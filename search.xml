<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo集成Gittalk报Error not found</title>
    <url>/2019/12/20/gittalk-one/</url>
    <content><![CDATA[<p>最近修改个人博客评论系统，集成Gittalk，但加载Gittalk插件之后出现Error not found的情况，特此记录下解决过程：</p>
<p>1.在Github上面新建一个评论仓库</p>
<p>2.在该评论仓库中的settings设置开启issue评论</p>
<p><img src="/img/66.png" alt=""></p>
<p>3.第三步，初始化 issues。点击issues栏，点击create an issue</p>
<p>4.设置GitHub Apps 的 OAuth Apps 配置项</p>
<p>在GitHub上注册新应用，链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p>
<p><img src="/img/67.png" alt=""></p>
<p>解释一下：</p>
<ul>
<li><p>1）Application name 可以随便填一个。</p>
</li>
<li><p>2）Homepage URL 必须是博客仓库的域名（GitHub Pages 的）。</p>
</li>
<li><p>3）Authorization callback URL 必须是博客的域名（<a href="http://zyjbml.cn）" target="_blank" rel="noopener">http://zyjbml.cn）</a></p>
</li>
</ul>
<p>5.博客主题_config.xml配置：</p>
<pre><code>gitalk:
  enable: true
  owner: #Github登录名
  repo: #创建的评论仓库名，例如：blog-comments
  oauth:
    clientId: #OAuth Apps的ClientID
    clientSecret: #OAuth Apps的Client Secret
  admin: #Github账号名称
</code></pre><p><img src="/img/68.png" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与SpringCloud的版本对应详细版</title>
    <url>/2019/12/17/springcloud-six/</url>
    <content><![CDATA[<h4 id="大版本对应："><a href="#大版本对应：" class="headerlink" title="大版本对应："></a>大版本对应：</h4><table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringCloud</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.2.x</td>
<td>Angel版本</td>
</tr>
<tr>
<td>1.3.x</td>
<td>Brixton版本</td>
</tr>
<tr>
<td>1.4.x stripes</td>
<td>Camden版本</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Dalston版本、Edgware版本</td>
</tr>
<tr>
<td>2.0.x</td>
<td>Finchley版本</td>
</tr>
<tr>
<td>2.1.x</td>
<td>Greenwich.SR2</td>
</tr>
</tbody>
</table>
<p>在实际开发过程中，我们需要更详细的版本对应  (<a href="https://start.spring.io/actuator/info)：" target="_blank" rel="noopener">https://start.spring.io/actuator/info)：</a></p>
<p>spring官方对应查看网址：<a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener">https://start.spring.io/actuator/info</a></p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"git"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"commit"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"time"</span><span class="token operator">:</span><span class="token string">"2019-12-13T08:19:15Z"</span><span class="token punctuation">,</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"6c6e59b"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"branch"</span><span class="token operator">:</span><span class="token string">"6c6e59b62f744ef12c2925bc6ed368fd2378ddd4"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"0.0.1-SNAPSHOT"</span><span class="token punctuation">,</span>
        <span class="token property">"artifact"</span><span class="token operator">:</span><span class="token string">"start-site"</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"start.spring.io website"</span><span class="token punctuation">,</span>
        <span class="token property">"versions"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"initializr"</span><span class="token operator">:</span><span class="token string">"0.9.0.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"spring-boot"</span><span class="token operator">:</span><span class="token string">"2.2.2.RELEASE"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"group"</span><span class="token operator">:</span><span class="token string">"io.spring.start"</span><span class="token punctuation">,</span>
        <span class="token property">"time"</span><span class="token operator">:</span><span class="token string">"2019-12-13T08:21:33.304Z"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"bom-ranges"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"azure"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.0.10"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RELEASE and &lt;2.1.0.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"2.1.7"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.RELEASE and &lt;2.2.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"2.2.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M1"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"codecentric-spring-boot-admin"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.0.6"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M1 and &lt;2.1.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"2.1.6"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.M1 and &lt;2.2.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"2.2.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M1"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"spring-cloud"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"Finchley.M2"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M3 and &lt;2.0.0.M5"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M3"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M5 and &lt;=2.0.0.M5"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M4"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M6 and &lt;=2.0.0.M6"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M5"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M7 and &lt;=2.0.0.M7"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M6"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RC1 and &lt;=2.0.0.RC1"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M7"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RC2 and &lt;=2.0.0.RC2"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.M9"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RELEASE and &lt;=2.0.0.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.RC1"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.1.RELEASE and &lt;2.0.2.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.RC2"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.2.RELEASE and &lt;2.0.3.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.SR4"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"Finchley.BUILD-SNAPSHOT"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3"</span><span class="token punctuation">,</span>
            <span class="token property">"Greenwich.M1"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.M3 and &lt;2.1.0.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"Greenwich.SR4"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.RELEASE and &lt;2.1.12.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"Greenwich.BUILD-SNAPSHOT"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.12.BUILD-SNAPSHOT and &lt;2.2.0.M4"</span><span class="token punctuation">,</span>
            <span class="token property">"Hoxton.RELEASE"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M4 and &lt;2.2.3.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"Hoxton.BUILD-SNAPSHOT"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.3.BUILD-SNAPSHOT"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"spring-cloud-services"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.0.3.RELEASE"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RELEASE and &lt;=2.0.999.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"2.1.4.RELEASE"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.RELEASE"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"spring-data-r2dbc"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"0.1.0.M3"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M6 and &lt;2.2.3.BUILD-SNAPSHOT"</span><span class="token punctuation">,</span>
            <span class="token property">"0.1.0.BUILD-SNAPSHOT"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.3.BUILD-SNAPSHOT"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"spring-statemachine"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.0.0.M4"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RC1 and &lt;=2.0.0.RC1"</span><span class="token punctuation">,</span>
            <span class="token property">"2.0.0.M5"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RC2 and &lt;=2.0.0.RC2"</span><span class="token punctuation">,</span>
            <span class="token property">"2.0.1.RELEASE"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RELEASE"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"vaadin"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"10.0.17"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M1 and &lt;2.1.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"14.0.15"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.M1"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"dependency-ranges"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"okta"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"1.2.1"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.2.RELEASE and &lt;2.2.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"1.3.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M1"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"mybatis"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.0.1"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.RELEASE and &lt;2.1.0.RELEASE"</span><span class="token punctuation">,</span>
            <span class="token property">"2.1.1"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.RELEASE"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"geode"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"1.2.2.RELEASE"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M5"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"camel"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"2.22.4"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.0.0.M1 and &lt;2.1.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"2.24.2"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.M1 and &lt;2.2.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"3.0.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M1"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"solace"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"3.1.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.1.0.RELEASE and &lt;2.2.0.M1"</span><span class="token punctuation">,</span>
            <span class="token property">"3.2.0"</span><span class="token operator">:</span><span class="token string">"Spring Boot >=2.2.0.M1"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>spring-cloud-dependencies 版本列表可查看：  </p>
<p><a href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies</a></p>
<p>spring-boot-starter-parent 版本列表可查看：</p>
<p><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent</a></p>
<p>作者：梦幻朵颜</p>
<p>链接：<a href="https://www.cnblogs.com/zhuwenjoyce/p/10261079.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuwenjoyce/p/10261079.html</a></p>
<p>來源：博客园</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令总结</title>
    <url>/2019/12/17/linux-one/</url>
    <content><![CDATA[<h4 id="一、系统信息"><a href="#一、系统信息" class="headerlink" title="一、系统信息"></a>一、系统信息</h4><p>1.显示机器的处理器架构(1)</p>
<pre><code>arch  
</code></pre><p>2.显示机器的处理器架构(2) </p>
<pre><code>uname -m 
</code></pre><p>3.显示正在使用的内核版本 </p>
<pre><code>uname -r 
</code></pre><p>4.显示硬件系统部件 - (SMBIOS / DMI) </p>
<pre><code>dmidecode -q 
</code></pre><p>5.罗列一个磁盘的架构特性 </p>
<pre><code>hdparm -i /dev/hda 
</code></pre><p>6.在磁盘上执行测试性读取操作 </p>
<pre><code>hdparm -tT /dev/sda 
</code></pre><p>7.显示CPU info的信息</p>
<pre><code>cat /proc/cpuinfo 
</code></pre><p>8.显示中断 </p>
<pre><code>cat /proc/interrupts 
</code></pre><p>9.校验内存使用</p>
<pre><code>cat /proc/meminfo 
</code></pre><p>10.显示哪些swap被使用</p>
<pre><code>cat /proc/swaps 
</code></pre><p>11.显示内核的版本</p>
<pre><code>cat /proc/version  
</code></pre><p>12.显示网络适配器及统计</p>
<pre><code>cat /proc/net/dev 
</code></pre><p>13.显示已加载的文件系统</p>
<pre><code>cat /proc/mounts 
</code></pre><p>14.罗列 PCI 设备</p>
<pre><code>lspci -tv  
</code></pre><p>15.显示 USB 设备</p>
<pre><code>lsusb -tv
</code></pre><p>16.显示系统日期</p>
<pre><code>date  
</code></pre><p>17.显示2007年的日历表 </p>
<pre><code>cal 2007
</code></pre><p>18.设置日期和时间 - 月日时分年.秒 </p>
<pre><code>date 041217002007.00
</code></pre><p>19.将时间修改保存到 BIOS </p>
<pre><code>clock -w
</code></pre><h4 id="二、关机-系统的关机、重启以及登出"><a href="#二、关机-系统的关机、重启以及登出" class="headerlink" title="二、关机 (系统的关机、重启以及登出 )"></a>二、关机 (系统的关机、重启以及登出 )</h4><p>1.关闭系统(1) </p>
<pre><code>shutdown -h now 
</code></pre><p>2.关闭系统(2) </p>
<pre><code>init 0 
</code></pre><p>3.关闭系统(3)</p>
<pre><code>telinit 0 
</code></pre><p>4.按预定时间关闭系统 </p>
<pre><code>shutdown -h hours:minutes &amp; 
</code></pre><p>5.取消按预定时间关闭系统</p>
<pre><code>shutdown -c  
</code></pre><p>6.重启(1) </p>
<pre><code>shutdown -r now 
</code></pre><p>7.重启(2) </p>
<pre><code>reboot 
</code></pre><p>8.注销</p>
<pre><code>logout  
</code></pre><h4 id="三、文件和目录"><a href="#三、文件和目录" class="headerlink" title="三、文件和目录"></a>三、文件和目录</h4><p>1.进入 ‘/ home’ 目录’ </p>
<pre><code>cd /home
</code></pre><p>2.返回上一级目录</p>
<pre><code>cd ..
</code></pre><p>3.返回上两级目录 </p>
<pre><code>cd ../..
</code></pre><p>4.进入个人的主目录 </p>
<pre><code>cd ~user1
</code></pre><p>5.返回上次所在的目录</p>
<pre><code>cd -
</code></pre><p>6.显示工作路径</p>
<pre><code>pwd
</code></pre><p>7.查看目录中的文件</p>
<pre><code>ls
</code></pre><p>8.查看目录中的文件 </p>
<pre><code>ls -F
</code></pre><p>9.显示文件和目录的详细资料 </p>
<pre><code>ls -l
</code></pre><p>10.显示隐藏文件</p>
<pre><code>ls -a
</code></pre><p>11.显示包含数字的文件名和目录名 </p>
<pre><code>ls *[0-9]*
</code></pre><p>12.显示文件和目录由根目录开始的树形结构(1) </p>
<pre><code>tree
</code></pre><p>13.显示文件和目录由根目录开始的树形结构(2) </p>
<pre><code>lstree
</code></pre><p>14.创建一个叫做 ‘dir1’ 的目录’ </p>
<pre><code>mkdir dir1
</code></pre><p>15.同时创建两个目录 </p>
<pre><code>mkdir dir1 dir2
</code></pre><p>16.创建一个目录树 </p>
<pre><code>mkdir -p /tmp/dir1/dir2
</code></pre><p>17.删除一个叫做 ‘file1’ 的文件’ </p>
<pre><code>rm -f file1
</code></pre><p>18.删除一个叫做 ‘dir1’ 的目录’ </p>
<pre><code>rmdir dir1
</code></pre><p>19.删除一个叫做 ‘dir1’ 的目录并同时删除其内容 </p>
<pre><code>rm -rf dir1
</code></pre><p>20.同时删除两个目录及它们的内容</p>
<pre><code>rm -rf dir1 dir2
</code></pre><p>21.重命名/移动 一个目录</p>
<pre><code>mv dir1  new_dir
</code></pre><p>22.复制一个文件 </p>
<pre><code>cp file1 file2
</code></pre><p>23.复制一个目录下的所有文件到当前工作目录 </p>
<pre><code>cp dir/*.
</code></pre><p>24.复制一个目录到当前工作目录</p>
<pre><code>cp -a /tmp/dir1 .
</code></pre><p>25.复制一个目录</p>
<pre><code>cp -a dir1 dir2
</code></pre><p>26.创建一个指向文件或目录的软链接 </p>
<pre><code>ln -s file1 lnk1
</code></pre><p>27.创建一个指向文件或目录的物理链接 </p>
<pre><code>ln file1 lnk1
</code></pre><ol start="28">
<li>修改一个文件或目录的时间戳 - (YYMMDDhhmm) </li>
</ol>
<pre><code>touch -t 0712250000 file1
</code></pre><p>29.列出已知的编码 </p>
<pre><code>iconv -l
</code></pre><h4 id="四、文件搜索"><a href="#四、文件搜索" class="headerlink" title="四、文件搜索"></a>四、文件搜索</h4><p>1.从 ‘/‘ 开始进入根文件系统搜索文件和目录 </p>
<pre><code>find / -name file1
</code></pre><p>2.搜索属于用户 ‘user1’ 的文件和目录 </p>
<pre><code>find / -user user1
</code></pre><p>3.在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件 </p>
<pre><code>find /home/user1 -name \*.bin
</code></pre><p>4.搜索在过去100天内未被使用过的执行文件</p>
<pre><code>find /usr/bin -type f -atime +100
</code></pre><p>5.搜索在10天内被创建或者修改过的文件</p>
<pre><code>find /usr/bin -type f -mtime -10
</code></pre><p>6.搜索以 ‘.rpm’ 结尾的文件并定义其权限</p>
<pre><code>find / -name \*.rpm -exec chmod 755 '{}' \
</code></pre><p>7.搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备 </p>
<pre><code>find / -xdev -name \*.rpm
</code></pre><p>8.寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令 </p>
<pre><code>locate \*.ps
</code></pre><p>9.显示一个二进制文件、源码或man的位置</p>
<pre><code>whereis halt
</code></pre><ol start="10">
<li>显示一个二进制文件或可执行文件的完整路径 </li>
</ol>
<pre><code>which halt
</code></pre><h4 id="五、挂载一个文件系统"><a href="#五、挂载一个文件系统" class="headerlink" title="五、挂载一个文件系统"></a>五、挂载一个文件系统</h4><p>1.挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在 </p>
<pre><code>mount /dev/hda2 /mnt/hda2 
</code></pre><p>2.卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出</p>
<pre><code>umount /dev/hda2  
</code></pre><p>3.当设备繁忙时强制卸载 </p>
<pre><code>fuser -km /mnt/hda2 
</code></pre><p>4.运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 </p>
<pre><code>umount -n /mnt/hda2 
</code></pre><p>5.挂载一个软盘 </p>
<pre><code>mount /dev/fd0 /mnt/floppy 
</code></pre><p>6.挂载一个cdrom或dvdrom </p>
<pre><code>mount /dev/cdrom /mnt/cdrom 
</code></pre><p>7.挂载一个cdrw或dvdrom </p>
<pre><code>mount /dev/hdc /mnt/cdrecorder 
</code></pre><p>8.挂载一个cdrw或dvdrom </p>
<pre><code>mount /dev/hdb /mnt/cdrecorder 
</code></pre><p>9.挂载一个文件或ISO镜像文件 </p>
<pre><code>mount -o loop file.iso /mnt/cdrom 
</code></pre><p>10.挂载一个Windows FAT32文件系统 </p>
<pre><code>mount -t vfat /dev/hda5 /mnt/hda5 
</code></pre><p>11.挂载一个usb 捷盘或闪存设备 </p>
<pre><code>mount /dev/sda1 /mnt/usbdisk 
</code></pre><p>12.挂载一个windows网络共享 </p>
<pre><code>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 
</code></pre><h4 id="六、磁盘空间"><a href="#六、磁盘空间" class="headerlink" title="六、磁盘空间"></a>六、磁盘空间</h4><p>1.显示已经挂载的分区列表 </p>
<pre><code>df -h
</code></pre><p>2.以尺寸大小排列文件和目录 </p>
<pre><code>ls -lSr |more 
</code></pre><p>3.估算目录 ‘dir1’ 已经使用的磁盘空间’ </p>
<pre><code>du -sh dir1 
</code></pre><p>4.以容量大小为依据依次显示文件和目录的大小 </p>
<pre><code>du -sk * | sort -rn 
</code></pre><p>5.1n以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) </p>
<pre><code>rpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1
</code></pre><p>6.1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p>
<pre><code>dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1
</code></pre><h4 id="七、用户和群组"><a href="#七、用户和群组" class="headerlink" title="七、用户和群组"></a>七、用户和群组</h4><p>1.创建一个新用户组 </p>
<pre><code>groupadd group_name 
</code></pre><p>2.删除一个用户组</p>
<pre><code>groupdel group_name  
</code></pre><p>3.重命名一个用户组 </p>
<pre><code>groupmod -n new_group_name old_group_name 
</code></pre><p>4.创建一个属于 “admin” 用户组的用户 </p>
<pre><code>useradd -c "Name Surname " -g admin -d /home/user1 -s /bin/bash user1 
</code></pre><p>5.创建一个新用户</p>
<pre><code>useradd user1  
</code></pre><p>5.删除一个用户 ( ‘-r’ 排除主目录) </p>
<pre><code>userdel -r user1 
</code></pre><p>6.修改用户属性</p>
<pre><code>usermod -c "User FTP" -g system -d /ftp/user1 -s /bin/nologin user1 
</code></pre><p>7.修改口令 </p>
<pre><code>passwd 
</code></pre><p>8.修改一个用户的口令 (只允许root执行) </p>
<pre><code>passwd user1 
</code></pre><p>9.设置用户口令的失效期限 </p>
<pre><code>chage -E 2005-12-31 user1 
</code></pre><p>10.检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户 </p>
<pre><code>pwck 
</code></pre><p>11.检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组 </p>
<pre><code>grpck 
</code></pre><p>12.登陆进一个新的群组以改变新创建文件的预设群组 </p>
<pre><code>newgrp group_name 
</code></pre><h4 id="八、文件的权限-“-”-设置权限，”-“-用于取消"><a href="#八、文件的权限-“-”-设置权限，”-“-用于取消" class="headerlink" title="八、文件的权限 - “+” 设置权限，”-“ 用于取消"></a>八、文件的权限 - “+” 设置权限，”-“ 用于取消</h4><p>1.将终端划分成5栏显示</p>
<pre><code>ls /tmp | pr -T5 -W$COLUMNS 
</code></pre><p>2.设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 </p>
<pre><code>chmod ugo+rwx directory1 
</code></pre><p>3.删除群组(g)与其他人(o)对目录的读写执行权限 </p>
<pre><code>chmod go-rwx directory1 
</code></pre><p>4.改变一个文件的所有人属性 </p>
<pre><code>chown user1 file1 
</code></pre><p>5.改变一个目录的所有人属性并同时改变改目录下所有文件的属性 </p>
<pre><code>chown -R user1 directory1 
</code></pre><p>6.改变文件的群组 </p>
<pre><code>chgrp group1 file1 
</code></pre><p>7.改变一个文件的所有人和群组属性</p>
<pre><code>chown user1:group1 file1  
</code></pre><p>8.罗列一个系统中所有使用了SUID控制的文件 </p>
<pre><code>find / -perm -u+s 
</code></pre><p>9.设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 </p>
<pre><code>chmod u+s /bin/file1 
</code></pre><p>10.禁用一个二进制文件的 SUID位 </p>
<pre><code>chmod u-s /bin/file1 
</code></pre><p>11.设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 </p>
<pre><code>chmod g+s /home/public 
</code></pre><p>12.禁用一个目录的 SGID 位 </p>
<pre><code>chmod g-s /home/public 
</code></pre><p>13.设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 </p>
<pre><code>chmod o+t /home/public 
</code></pre><p>13.禁用一个目录的 STIKY 位 </p>
<pre><code>chmod o-t /home/public 
</code></pre><h4 id="九、文件的特殊属性-“-”-设置权限，”-“-用于取消"><a href="#九、文件的特殊属性-“-”-设置权限，”-“-用于取消" class="headerlink" title="九、文件的特殊属性 - “+” 设置权限，”-“ 用于取消"></a>九、文件的特殊属性 - “+” 设置权限，”-“ 用于取消</h4><p>1.只允许以追加方式读写文件</p>
<pre><code>chattr +a file1  
</code></pre><p>2.允许这个文件能被内核自动压缩/解压 </p>
<pre><code>chattr +c file1 
</code></pre><p>3.在进行文件系统备份时，dump程序将忽略这个文件</p>
<pre><code>chattr +d file1  
</code></pre><p>4.设置成不可变的文件，不能被删除、修改、重命名或者链接 </p>
<pre><code>chattr +i file1 
</code></pre><p>5.允许一个文件被安全地删除 </p>
<pre><code>chattr +s file1 
</code></pre><p>6.一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 </p>
<pre><code>chattr +S file1 
</code></pre><p>7.若文件被删除，系统会允许你在以后恢复这个被删除的文件 </p>
<pre><code>chattr +u file1 
</code></pre><p>8.显示特殊的属性 </p>
<pre><code>lsattr 
</code></pre><h4 id="十、打包和压缩文件"><a href="#十、打包和压缩文件" class="headerlink" title="十、打包和压缩文件"></a>十、打包和压缩文件</h4><p>1.解压一个叫做 ‘file1.bz2’的文件 </p>
<pre><code>bunzip2 file1.bz2 
</code></pre><p>2.压缩一个叫做 ‘file1’ 的文件</p>
<pre><code>bzip2 file1  
</code></pre><p>3.解压一个叫做 ‘file1.gz’的文件 </p>
<pre><code>gunzip file1.gz 
</code></pre><p>4.压缩一个叫做 ‘file1’的文件 </p>
<pre><code>gzip file1
</code></pre><p>5.最大程度压缩</p>
<pre><code>gzip -9 file1  
</code></pre><p>6.创建一个叫做 ‘file1.rar’ 的包 </p>
<pre><code>rar a file1.rar test_file 
</code></pre><p>7.同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’ </p>
<pre><code>rar a file1.rar file1 file2 dir1 
</code></pre><p>8.打包rar包 </p>
<pre><code>rar x file1.rar 
</code></pre><p>9.解压rar包</p>
<pre><code>unrar x file1.rar 
</code></pre><p>10.创建一个非压缩的 tarball </p>
<pre><code>tar -cvf archive.tar file1 
</code></pre><p>11.创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件 </p>
<pre><code>tar -cvf archive.tar file1 file2 dir1 
</code></pre><p>12.显示一个包中的内容</p>
<pre><code>tar -tf archive.tar  
</code></pre><p>13.释放一个包 </p>
<pre><code>tar -xvf archive.tar 
</code></pre><p>14.将压缩包释放到 /tmp目录下 </p>
<pre><code>tar -xvf archive.tar -C /tmp 
</code></pre><p>15.创建一个bzip2格式的压缩包 </p>
<pre><code>tar -cvfj archive.tar.bz2 dir1 
</code></pre><p>16.解压一个bzip2格式的压缩包 </p>
<pre><code>tar -xvfj archive.tar.bz2 
</code></pre><p>17.创建一个gzip格式的压缩包 </p>
<pre><code>tar -cvfz archive.tar.gz dir1 
</code></pre><p>18.解压一个gzip格式的压缩包 </p>
<pre><code>tar -xvfz archive.tar.gz 
</code></pre><p>19.创建一个zip格式的压缩包 </p>
<pre><code>zip file1.zip file1 
</code></pre><p>20.将几个文件和目录同时压缩成一个zip格式的压缩包 </p>
<pre><code>zip -r file1.zip file1 file2 dir1 
</code></pre><p>21.解压一个zip格式压缩包 </p>
<pre><code>unzip file1.zip 
</code></pre><h4 id="十一、DEB-包-Debian-Ubuntu-类似系统"><a href="#十一、DEB-包-Debian-Ubuntu-类似系统" class="headerlink" title="十一、DEB 包 (Debian, Ubuntu 类似系统)"></a>十一、DEB 包 (Debian, Ubuntu 类似系统)</h4><p>1.安装/更新一个 deb 包 </p>
<pre><code>dpkg -i package.deb 
</code></pre><p>2.从系统删除一个 deb 包 </p>
<pre><code>dpkg -r package_name 
</code></pre><p>3.显示系统中所有已经安装的 deb 包 </p>
<pre><code>dpkg -l 
</code></pre><p>4.显示所有名称中包含 “httpd” 字样的deb包 </p>
<pre><code>dpkg -l | grep httpd 
</code></pre><p>5.获得已经安装在系统中一个特殊包的信息</p>
<pre><code>dpkg -s package_name  
</code></pre><p>6.显示系统中已经安装的一个deb包所提供的文件列表 </p>
<pre><code>dpkg -L package_name 
</code></pre><p>7.显示尚未安装的一个包所提供的文件列表</p>
<pre><code>dpkg --contents package.deb  
</code></pre><p>8.确认所给的文件由哪个deb包提供 </p>
<pre><code>dpkg -S /bin/ping 
</code></pre><h4 id="十二、APT-软件工具-Debian-Ubuntu-类似系统"><a href="#十二、APT-软件工具-Debian-Ubuntu-类似系统" class="headerlink" title="十二、APT 软件工具 (Debian, Ubuntu 类似系统)"></a>十二、APT 软件工具 (Debian, Ubuntu 类似系统)</h4><p>1.安装/更新一个 deb 包 </p>
<pre><code>apt-get install package_name 
</code></pre><p>2.从光盘安装/更新一个 deb 包 </p>
<pre><code>apt-cdrom install package_name 
</code></pre><p>3.升级列表中的软件包</p>
<pre><code>apt-get update  
</code></pre><p>4.升级所有已安装的软件</p>
<pre><code>apt-get upgrade  
</code></pre><p>5.从系统删除一个deb包 </p>
<pre><code>apt-get remove package_name 
</code></pre><p>6.确认依赖的软件仓库正确</p>
<pre><code>apt-get check  
</code></pre><p>7.从下载的软件包中清理缓存 </p>
<pre><code>apt-get clean 
</code></pre><p>8.返回包含所要搜索字符串的软件包名称 </p>
<pre><code>apt-cache search searched-package 
</code></pre><h4 id="十三、查看文件内容"><a href="#十三、查看文件内容" class="headerlink" title="十三、查看文件内容"></a>十三、查看文件内容</h4><p>1.从第一个字节开始正向查看文件的内容 </p>
<pre><code>cat file1 
</code></pre><p>2.从最后一行开始反向查看一个文件的内容 </p>
<pre><code>tac file1 
</code></pre><p>3.查看一个长文件的内容</p>
<pre><code>more file1  
</code></pre><p>4.类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作 </p>
<pre><code>less file1 
</code></pre><p>5.查看一个文件的前两行</p>
<pre><code>head -2 file1  
</code></pre><p>6.查看一个文件的最后两行 </p>
<pre><code>tail -2 file1 
</code></pre><p>7.实时查看被添加到一个文件中的内容</p>
<pre><code>tail -f /var/log/messages  
</code></pre><h4 id="十四、文本处理"><a href="#十四、文本处理" class="headerlink" title="十四、文本处理"></a>十四、文本处理</h4><h4 id="十五、字符设置和文件格式转换"><a href="#十五、字符设置和文件格式转换" class="headerlink" title="十五、字符设置和文件格式转换"></a>十五、字符设置和文件格式转换</h4><h4 id="十六、文件系统分析"><a href="#十六、文件系统分析" class="headerlink" title="十六、文件系统分析"></a>十六、文件系统分析</h4><h4 id="十七、初始化一个文件系统"><a href="#十七、初始化一个文件系统" class="headerlink" title="十七、初始化一个文件系统"></a>十七、初始化一个文件系统</h4><h4 id="十八、SWAP文件系统"><a href="#十八、SWAP文件系统" class="headerlink" title="十八、SWAP文件系统"></a>十八、SWAP文件系统</h4><h4 id="十九、备份"><a href="#十九、备份" class="headerlink" title="十九、备份"></a>十九、备份</h4><h4 id="二十、光盘"><a href="#二十、光盘" class="headerlink" title="二十、光盘"></a>二十、光盘</h4><h4 id="二十一、网络-（以太网和WIFI无线）"><a href="#二十一、网络-（以太网和WIFI无线）" class="headerlink" title="二十一、网络 - （以太网和WIFI无线）"></a>二十一、网络 - （以太网和WIFI无线）</h4><h4 id="二十二、JPS工具"><a href="#二十二、JPS工具" class="headerlink" title="二十二、JPS工具"></a>二十二、JPS工具</h4><p>作者：DreamWeaver_Zhou</p>
<p>链接：<a href="https://blog.csdn.net/DreamWeaver_zhou/article/details/80922852" target="_blank" rel="noopener">https://blog.csdn.net/DreamWeaver_zhou/article/details/80922852</a></p>
<p>來源：CSDN</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令总结</title>
    <url>/2019/12/17/git-one/</url>
    <content><![CDATA[<h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><p>1.新建一个项目，并初始化</p>
<pre><code>$ git init [project-name]
</code></pre><p>2.下载项目</p>
<pre><code>$ git clone [url]
</code></pre><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>1.显示当前的Git配置</p>
<pre><code>$ git config --list
</code></pre><p>2.编辑Git配置文件</p>
<pre><code>$ git config -e [--global]
</code></pre><p>3.设置提交代码时的用户信息</p>
<pre><code>$ git config [--global] user.name "name"
$ git config [--global] user.email "email.adress"
</code></pre><h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><p>1.添加指定文件到暂存区</p>
<pre><code>$ git add [file1][file2]....
</code></pre><p>2.添加指定目录到暂存区包括子目录</p>
<pre><code>$ git add [dir]
</code></pre><p>3.添加当前目录的所有文件到暂存区</p>
<pre><code>$ git add .
</code></pre><p>4.添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>
<pre><code>$ git add -p
</code></pre><p>5.删除工作区文件，并且将这次删除放入暂存区</p>
<pre><code>$ git rm [file1][file2]...
</code></pre><p>6.停止追踪指定文件，但该文件会保留在工作区</p>
<pre><code>$ git rm --cached [file]
</code></pre><p>7.改名文件，并将这个改名放入暂存区</p>
<pre><code>$ git mv [file-original][file-renamed]
</code></pre><h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><p>1.提交暂存区到仓库区</p>
<pre><code>$ git commit -m [message]
</code></pre><p>2.提交暂存区的指定文件到仓库区</p>
<pre><code>$ git commit [file1] [file2].... -m [message]
</code></pre><p>3.提交工作区自上次commit之后的变化，直接到仓库区</p>
<pre><code>$ git commit -a
</code></pre><p>4.提交时显示所有的diff信息</p>
<pre><code>$ git commit -v
</code></pre><p>5.使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<pre><code>$ git commit --amend -m [message]
</code></pre><p>6.重做上一次commit，并包括指定文件的新变化</p>
<pre><code>$ git commit --amend [file1] [file2] ...
</code></pre><h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><p>1.列出本地所有分支</p>
<pre><code>$ git branch
</code></pre><p>2.列出所有远程分支</p>
<pre><code>$ git branch -r
</code></pre><p>3.列出所有本地分支和远程分支</p>
<pre><code>$ git branch -a
</code></pre><p>4.新建一个分支，但依然停留在当前分支</p>
<pre><code>$ git branch [branch-name]
</code></pre><p>5.新建一个分支，并切换到该分支</p>
<pre><code>$ git checkout -b [branch]
</code></pre><p>6.新建一个分支，指定指向commit</p>
<pre><code>$ git branch [branch] [commit]
</code></pre><p>7.新建一个分支，与指定的远程分支建立追踪关系</p>
<pre><code>$ git branch --track [branch] [remote-branch]
</code></pre><p>8.切换到指定分支，并更新工作区</p>
<pre><code>$ git checkout [branch-name]
</code></pre><p>9.切换到上一个分支</p>
<pre><code>$ git checkout -
</code></pre><p>10.建立追踪关系，在现有分支与指定的远程分支之间</p>
<pre><code>$ git branch --set-upstream [branch] [remote-branch]
</code></pre><p>11.合并指定分支到当前分支</p>
<pre><code>$ git merge [branch]
</code></pre><p>12.选择一个commit，合并进当前分支</p>
<pre><code>$ git cherry-pick [commit]
</code></pre><p>13.删除分支</p>
<pre><code>$ git branch -d [branch-name]
</code></pre><p>14.删除远程分支</p>
<pre><code>$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre><h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><p>1.列出所有的tag</p>
<pre><code>$ git tag
</code></pre><p>2.新建一个tag，在当前commit</p>
<pre><code>$ git tag [tag]
</code></pre><p>3.新建一个tag在指定commit</p>
<pre><code>$ git tag [tag] [commit]
</code></pre><p>4.删除本地tag</p>
<pre><code>$ git tag -d [tag]
</code></pre><p>5.删除远程tag</p>
<pre><code>$ git push origin :refs/tags/[tagName]
</code></pre><p>6.查看tag信息</p>
<pre><code>$ git show [tag]
</code></pre><p>7.提交指定tag</p>
<pre><code>$ git push [remote] [tag]
</code></pre><p>8.提交所有tag</p>
<pre><code>$ git push [remote] --tags
</code></pre><p>9.新建一个分支，指向某个tag</p>
<pre><code>$ git checkout -b [branch] [tag]
</code></pre><h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><p>1.显示有变更的文件</p>
<pre><code>$ git status
</code></pre><p>2.显示当前分支的版本历史</p>
<pre><code>$ git log
</code></pre><p>3.显示commit历史，以及每次commit发生变更的文件</p>
<pre><code>$ git log --stat
</code></pre><p>4.搜索提交历史，根据关键词</p>
<pre><code>$ git log -S [keyword]
</code></pre><p>5.显示某个commit之后的所有变动，每个commit占据一行</p>
<pre><code>$ git log [tag] HEAD --pretty=format:%s
</code></pre><p>6.显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<pre><code>$ git log [tag] HEAD --grep feature
</code></pre><p>7.显示某个文件的版本历史，包括文件改名</p>
<pre><code>$ git log --follow [file]
$ git whatchanged [file]
</code></pre><p>8.显示指定文件相关的每一次diff</p>
<pre><code>$ git log -p [file]
</code></pre><p>9.显示过去的5次提交</p>
<pre><code>$ git log -5 --pretty --oneline
</code></pre><p>10.显示所有提交过的用户，按提交次数排序</p>
<pre><code>$ git shortlog -sn
</code></pre><p>11.显示指定文件是什么人在什么时间修改过</p>
<pre><code>$ git blame [file]
</code></pre><p>12.显示暂存区和工作区的差异</p>
<pre><code>$ git diff
</code></pre><p>13.显示暂存区和上一个commit的差异</p>
<pre><code>$ git diff --cached [file]
</code></pre><p>14.显示工作区与当前分支最新commit之间的差异</p>
<pre><code>$ git diff HEAD
</code></pre><p>15.显示两次提交之间的差异</p>
<pre><code>$ git diff [first-branch]...[second-branch]
</code></pre><p>16.显示今天你写了多少行代码</p>
<pre><code>$ git diff --shortstat "@{0 day ago}"
</code></pre><p>17.显示某次提交的元数据和内容变化</p>
<pre><code>$ git show [commit]
</code></pre><p>18.显示某次提交发生变化的文件</p>
<pre><code>$ git show --name-only [commit]
</code></pre><p>19.显示某次提交时，某个文件的内容</p>
<pre><code>$ git show [commit]:[filename]
</code></pre><p>20.显示当前分支的最近几次提交</p>
<pre><code>$ git reflog
</code></pre><h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><p>1.下载远程仓库的所有变动</p>
<pre><code>$ git fetch [remote]
</code></pre><p>2.显示所有远程仓库</p>
<pre><code>$ git remote -v
</code></pre><p>3.显示某个远程仓库的信息</p>
<pre><code>$ git remote show [remote]
</code></pre><p>4.增加一个新的远程仓库，并命名</p>
<pre><code>$ git remote add [shortname] [url]
</code></pre><p>5.取回远程仓库的变化，并与本地分支合并</p>
<pre><code>$ git pull [remote] [branch]
</code></pre><p>6.上传本地指定分支到远程仓库</p>
<pre><code>$ git push [remote] [branch]
</code></pre><p>7.强行推送当前分支到远程仓库，即使有冲突</p>
<pre><code>$ git push [remote] --force
</code></pre><p>8.推送所有分支到远程仓库</p>
<pre><code>$ git push [remote] --all
</code></pre><h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><p>1.恢复暂存区的指定文件到工作区</p>
<pre><code>$ git checkout [file]
</code></pre><p>2.恢复某个commit的指定文件到暂存区和工作区</p>
<pre><code>$ git checkout [commit] [file]
</code></pre><p>3.恢复暂存区的所有文件到工作区</p>
<pre><code>$ git checkout .
</code></pre><p>4.重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<pre><code>$ git reset [file]
</code></pre><p>5.重置暂存区与工作区，与上一次commit保持一致</p>
<pre><code>$ git reset --hard
</code></pre><p>6.重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<pre><code>$ git reset [commit]
</code></pre><p>7.重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<pre><code>$ git reset --hard [commit]
</code></pre><p>8.重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<pre><code>$ git reset --keep [commit]
</code></pre><p>9.新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<pre><code>$ git revert [commit]
</code></pre><p>10.暂时将未提交的变化移除，稍后再移入</p>
<pre><code>$ git stash
$ git stash pop
</code></pre><h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><p>1.生成一个可供发布的压缩包</p>
<pre><code>$ git archive
</code></pre><p>作者：190cm</p>
<p>链接：<a href="https://juejin.im/post/5dadb9f3e51d4526cc28135f" target="_blank" rel="noopener">https://juejin.im/post/5dadb9f3e51d4526cc28135f</a></p>
<p>來源：掘金</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>认识SpringCloud(五)—常用配置详解</title>
    <url>/2019/12/16/springcloud-five/</url>
    <content><![CDATA[<h4 id="一、Eureka"><a href="#一、Eureka" class="headerlink" title="一、Eureka"></a>一、Eureka</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>eureka.server.enable-self-preservation</td>
<td>关闭注册中心的保护机制，Eureka 会统计15分钟之内心跳失败的比例低于85%将会触发保护机制，不剔除服务提供者，如果关闭服务注册中心将不可用的实例正确剔除</td>
<td>false</td>
</tr>
<tr>
<td>eureka.instance.prefer-ip-address</td>
<td>不使用主机名来定义注册中心的地址，而使用IP地址的形式，如果设置eureka.instance.ip-address 属性，则使用该属性配置的IP，否则自动获取除环路IP外的第一个IP地址</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.ip-address</td>
<td>IP地址</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.hostname</td>
<td>设置当前实例的主机名称</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.lease-renewal-interval-in-seconds</td>
<td>定义服务续约任务（心跳）的调用间隔，单位：秒</td>
<td>30</td>
</tr>
<tr>
<td>eureka.instance.lease-expiration-duration-in-seconds</td>
<td>定义服务失效的时间，单位：秒</td>
<td>90</td>
</tr>
<tr>
<td>eureka.instance.status-page-url-path</td>
<td>状态页面的URL，相对路径，默认使用 HTTP 访问，如果需要使用 HTTPS则需要使用绝对路径配置</td>
<td>/info</td>
</tr>
<tr>
<td>eureka.instance.status-page-url</td>
<td>状态页面的URL，绝对路径</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.health-check-url-path</td>
<td>健康检查页面的URL，相对路径，默认使用 HTTP 访问，如果需要使用 HTTPS则需要使用绝对路径配置</td>
<td>/health</td>
</tr>
<tr>
<td>eureka.client.service-url</td>
<td>指定服务注册中心地址，类型为 HashMap，并设置有一组默认值，默认的Key为 defaultZone；如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔如果服务注册中心加入了安全验证，这里配置的地址格式为： http://:@localhost:8761/eureka 其中 为安全校验的用户名； 为该用户的密码</td>
<td><a href="http://localhost:8761/eureka" target="_blank" rel="noopener">http://localhost:8761/eureka</a></td>
</tr>
<tr>
<td>eureka.client.fetch-registery</td>
<td>检索服务</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.registery-fetch-interval-seconds</td>
<td>从Eureka服务器端获取注册信息的间隔时间，单位：秒</td>
<td>30</td>
</tr>
<tr>
<td>eureka.client.allow-redirects</td>
<td>指示服务器是否可以将客户端请求重定向到备份服务器/集群</td>
<td>false</td>
</tr>
<tr>
<td>eureka.client.availability-zones</td>
<td>获取此实例所在区域的可用性区域列表</td>
<td></td>
</tr>
<tr>
<td>eureka.client.backup-registry-impl</td>
<td>获取执行BackupRegistry的实现的名称</td>
<td></td>
</tr>
<tr>
<td>eureka.client.cache-refresh-executor-exponential-back-off-bound</td>
<td>缓存刷新执行者指数退出相关属性</td>
<td>10</td>
</tr>
<tr>
<td>eureka.client.cache-refresh-executor-thread-pool-size</td>
<td>cacheRefreshExecutor初始化的线程池大小</td>
<td>2</td>
</tr>
<tr>
<td>eureka.client.client-data-accept</td>
<td>EurekaAccept客户端数据接受名称</td>
<td></td>
</tr>
<tr>
<td>eureka.client.disable-delta</td>
<td>指示eureka客户端是否应该禁用提取delta</td>
<td>false</td>
</tr>
<tr>
<td>eureka.client.dollar-replacement</td>
<td>在eureka服务器的序列化/反序列化信息期间，获取Dollar符号<code>$ &lt;/ code&gt;</code>的替换字符串</td>
<td>_</td>
</tr>
<tr>
<td>eureka.client.enabled</td>
<td>标记是否启用Eureka客户端</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.escape-char-replacement</td>
<td>在eureka服务器的序列化/反序列化信息期间获取下划线符号<code>_&lt;/ code&gt;</code>的替换字符串</td>
<td>__</td>
</tr>
<tr>
<td>eureka.client.eureka-connection-idle-timeout-seconds</td>
<td>表示到eureka服务器的HTTP连接可以在关闭之前保持空闲状态的时间（以秒为单位）</td>
<td>30</td>
</tr>
<tr>
<td>eureka.client.eureka-server-connect-timeout-seconds</td>
<td>指示在连接到eureka服务器需要超时之前等待（以秒为单位）的时间</td>
<td>5</td>
</tr>
<tr>
<td>eureka.client.eureka-server-d-n-s-name</td>
<td>获取要查询的DNS名称以获取eureka服务器的列表</td>
<td></td>
</tr>
<tr>
<td>eureka.client.eureka-server-port</td>
<td>获取用于构建服务url的端口</td>
<td></td>
</tr>
<tr>
<td>eureka.client.eureka-server-read-timeout-seconds</td>
<td>指示从eureka服务器读取之前需要等待（秒）多久才能超时</td>
<td>8</td>
</tr>
<tr>
<td>eureka.client.eureka-server-total-connections</td>
<td>获取从eureka客户端到所有eureka服务器允许的总连接数</td>
<td>200</td>
</tr>
<tr>
<td>eureka.client.eureka-server-total-connections-per-host</td>
<td>获取从eureka客户端到eureka服务器主机允许的总连接数</td>
<td>50</td>
</tr>
<tr>
<td>eureka.client.eureka-server-u-r-l-context</td>
<td>获取用于构建服务网址的URL上下文，以便在eureka服务器列表来自DNS时联系eureka服务器</td>
<td></td>
</tr>
<tr>
<td>eureka.client.eureka-service-url-poll-interval-seconds</td>
<td>表示轮询对eureka服务器信息进行更改的频率（以秒为单位）</td>
<td>0</td>
</tr>
<tr>
<td>eureka.client.fetch-registry</td>
<td>指示该客户端是否应从eureka服务器获取eureka注册表信息</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.fetch-remote-regions-registry</td>
<td>逗号分隔将获取eureka注册表信息的区域列表</td>
<td></td>
</tr>
<tr>
<td>eureka.client.filter-only-up-instances</td>
<td>指示是否在仅具有InstanceStatus UP状态的实例的过滤应用程序之后获取应用程序</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.g-zip-content</td>
<td>从服务器支持时，是否必须压缩从eureka服务器提取的内容</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.heartbeat-executor-exponential-back-off-bound</td>
<td>心跳执行者指数回撤相关财产</td>
<td>10</td>
</tr>
<tr>
<td>eureka.client.heartbeat-executor-thread-pool-size</td>
<td>heartbeat执行器初始化的线程池大小</td>
<td>2</td>
</tr>
<tr>
<td>eureka.client.initial-instance-info-replication-interval-seconds</td>
<td>指示将实例信息复制到eureka服务器的开始时间（以秒为单位）</td>
<td>40</td>
</tr>
<tr>
<td>eureka.client.instance-info-replication-interval-seconds</td>
<td>指示复制要复制到eureka服务器的实例更改的频率（以秒为单位）</td>
<td>30</td>
</tr>
<tr>
<td>eureka.client.log-delta-diff</td>
<td>指示在注册表信息方面是否记录eureka服务器和eureka客户端之间的差异</td>
<td>false</td>
</tr>
<tr>
<td>eureka.client.on-demand-update-status-change</td>
<td>如果设置为true，则通过ApplicationInfoManager进行的本地状态更新将触发对远程eureka服务器的按需（但限速）注册/更新</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.prefer-same-zone-eureka</td>
<td>指示此实例是否应尝试在同一区域中使用eureka服务器延迟和/或其他原因</td>
<td></td>
</tr>
<tr>
<td>eureka.client.proxy-host</td>
<td>获取代理主机到eureka服务器（如果有的话）</td>
<td></td>
</tr>
<tr>
<td>eureka.client.proxy-password</td>
<td>获取代理密码（如果有）</td>
<td></td>
</tr>
<tr>
<td>eureka.client.proxy-port</td>
<td>获取代理端口到eureka服务器（如果有的话）</td>
<td></td>
</tr>
<tr>
<td>eureka.client.proxy-user-name</td>
<td>获取代理用户名（如果有）</td>
<td></td>
</tr>
<tr>
<td>eureka.client.region us-east-1</td>
<td>获取此实例所在的区域</td>
<td></td>
</tr>
<tr>
<td>eureka.client.register-with-eureka</td>
<td>指示此实例是否应将其信息注册到eureka服务器以供其他人发现</td>
<td>true</td>
</tr>
<tr>
<td>eureka.client.registry-fetch-interval-seconds</td>
<td>指示从eureka服务器获取注册表信息的频率（以秒为单位）</td>
<td>30</td>
</tr>
<tr>
<td>eureka.client.registry-refresh-single-vip-address</td>
<td>指示客户端是否只对单个VIP的注册表信息感兴趣</td>
<td></td>
</tr>
<tr>
<td>eureka.client.service-url</td>
<td>可用性区域映射到与eureka服务器通信的完全限定URL的列表。每个值可以是单个URL或逗号分隔的替代位置列表</td>
<td></td>
</tr>
<tr>
<td>eureka.client.use-dns-for-fetching-service-urls</td>
<td>指示eureka客户端是否应该使用DNS机制来获取要与之通信的eureka服务器列表。</td>
<td>false</td>
</tr>
<tr>
<td>eureka.dashboard.enabled</td>
<td>标志以启用Eureka仪表板</td>
<td>true</td>
</tr>
<tr>
<td>eureka.dashboard.path</td>
<td>到Eureka仪表板（相对于servlet路径）的路径</td>
<td>“/”</td>
</tr>
<tr>
<td>eureka.instance.a-s-g-name</td>
<td>获取与此实例关联的AWS自动缩放组名称。</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.app-group-name</td>
<td>获取要在eureka中注册的应用程序组的名称</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.appname</td>
<td>获取要在eureka注册的应用程序的名称</td>
<td>unknown</td>
</tr>
<tr>
<td>eureka.instance.data-center-info</td>
<td>返回此实例部署的数据中心</td>
<td></td>
</tr>
<tr>
<td>eureka.instance.health-check-url</td>
<td>获取此实例的绝对运行状况检查页面URL</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="二、Feign"><a href="#二、Feign" class="headerlink" title="二、Feign"></a>二、Feign</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>feign.compression.request.mime-types</td>
<td>支持的MIME类型列表</td>
<td>[text/xml, application/xml, application/json]</td>
</tr>
<tr>
<td>feign.compression.request.min-request-size</td>
<td>最小阈值内容大小</td>
<td>2048</td>
</tr>
</tbody>
</table>
<h4 id="三、health"><a href="#三、health" class="headerlink" title="三、health"></a>三、health</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>health.config.enabled</td>
<td>标记以指示应安装配置服务器运行状况指示器</td>
<td>false</td>
</tr>
<tr>
<td>health.config.time-to-live</td>
<td>生成缓存结果的时间，以毫秒为单位</td>
<td>300000（5分钟）</td>
</tr>
</tbody>
</table>
<h4 id="四、hystrix"><a href="#四、hystrix" class="headerlink" title="四、hystrix"></a>四、hystrix</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>hystrix.metrics.enabled</td>
<td>启用Hystrix指标轮询</td>
<td>true</td>
</tr>
<tr>
<td>hystrix.metrics.polling-interval-ms</td>
<td>后续轮询度量之间的间隔</td>
<td>2000</td>
</tr>
</tbody>
</table>
<h4 id="五、hystrix"><a href="#五、hystrix" class="headerlink" title="五、hystrix"></a>五、hystrix</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>zuul.add-host-header</td>
<td>标识以确定代理是否转发主机头</td>
<td>false</td>
</tr>
<tr>
<td>zuul.add-proxy-headers</td>
<td>标识以确定代理是否添加X-Forwarded-* 标头</td>
<td>true</td>
</tr>
<tr>
<td>zuul.host.max-per-route-connections</td>
<td>单个路由可以使用的最大连接数</td>
<td>20</td>
</tr>
<tr>
<td>zuul.host.max-total-connections</td>
<td>代理可以容纳到后端的总连接数</td>
<td>200</td>
</tr>
<tr>
<td>zuul.ignore-security-headers</td>
<td>如果spring security在类路径上，则将SECURITY_HEADERS添加到忽略的标头</td>
<td>true</td>
</tr>
<tr>
<td>zuul.ignored-headers</td>
<td>HTTP标头的名称完全忽略</td>
<td></td>
</tr>
<tr>
<td>zuul.ignored-services</td>
<td>一组服务名称不考虑代理自动。</td>
<td></td>
</tr>
<tr>
<td>zuul.prefix</td>
<td>所有路由的公共前缀</td>
<td></td>
</tr>
<tr>
<td>zuul.remove-semicolon-content</td>
<td>标记说，可以删除超过第一个分号的路径元素</td>
<td></td>
</tr>
<tr>
<td>zuul.retryable</td>
<td>默认情况下是否支持重试的标志</td>
<td></td>
</tr>
<tr>
<td>zuul.routes</td>
<td>将路线名称映射到属性</td>
<td></td>
</tr>
<tr>
<td>zuul.securityheaders</td>
<td>一般预期由Spring安全性添加的标头，因此如果代理和后端使用Spring保护，则通常会重复。默认情况下，如果存在Spring安全性，并且ignoreSecurityHeaders = true，它们将被添加到忽略的标头</td>
<td></td>
</tr>
<tr>
<td>zuul.semaphore.max-semaphores</td>
<td>Hystrix的总信号量的最大数量</td>
<td>100</td>
</tr>
<tr>
<td>zuul.sensitive-headers</td>
<td>不传递到下游请求的敏感标头列表</td>
<td></td>
</tr>
<tr>
<td>zuul.servlet-path</td>
<td>安装Zuul作为servlet的路径</td>
<td>/zull</td>
</tr>
<tr>
<td>zuul.ssl-hostname-validation-enabled</td>
<td>标记以说明是否应验证ssl连接的主机名</td>
<td>true</td>
</tr>
<tr>
<td>zuul.strip-prefix</td>
<td>在转发之前标记是否从路径中删除前缀</td>
<td>true</td>
</tr>
<tr>
<td>zuul.trace-request-body</td>
<td>标记说可以跟踪请求机构</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="六、spring-cloud-bus"><a href="#六、spring-cloud-bus" class="headerlink" title="六、spring.cloud.bus"></a>六、spring.cloud.bus</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.bus.ack.destination-service</td>
<td>想要听ack的服务</td>
<td>null（表示所有服务）</td>
</tr>
<tr>
<td>spring.cloud.bus.ack.enabled</td>
<td>标志关闭acks</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.bus.destination</td>
<td>名称Spring Cloud消息的流目的地</td>
<td>springCloudBus</td>
</tr>
<tr>
<td>spring.cloud.bus.enabled</td>
<td>标志表示总线已启用</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.bus.env.enabled</td>
<td>标志关闭环境变化事件</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.bus.refresh.enabled</td>
<td>关闭刷新事件的标志</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.bus.trace.enabled</td>
<td>打开acks跟踪的标志</td>
<td>false</td>
</tr>
</tbody>
</table>
<h4 id="七、spring-cloud-config"><a href="#七、spring-cloud-config" class="headerlink" title="七、spring.cloud.config"></a>七、spring.cloud.config</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.config.allow-override</td>
<td>标记以指示可以使用{@link #isSystemPropertiesOverride（）systemPropertiesOverride}。设置为false以防止用户意外更改默认值</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.config.authorization</td>
<td>客户端使用的授权令牌连接到服务器</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.discovery.enabled</td>
<td>标记以指示启用配置服务器发现</td>
<td>false</td>
</tr>
<tr>
<td>spring.cloud.config.discovery.service-id</td>
<td>服务ID来定位配置服务器</td>
<td>configserver</td>
</tr>
<tr>
<td>spring.cloud.config.enabled</td>
<td>标记说远程配置启用</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.config.fail-fast</td>
<td>标记表示无法连接到服务器是致命的</td>
<td>false</td>
</tr>
<tr>
<td>spring.cloud.config.label</td>
<td>用于拉取远程配置属性的标签名称</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.name</td>
<td>用于获取远程属性的应用程序名称</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.override-none</td>
<td>标志表示当{@link #setAllowOverride（boolean）allowOverride}为true时，外部属性应该采用最低优先级，并且不覆盖任何现有的属性源（包括本地配置文件）</td>
<td>false</td>
</tr>
<tr>
<td>spring.cloud.config.override-system-properties</td>
<td>标记以指示外部属性应覆盖系统属性</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.config.password</td>
<td>联系远程服务器时使用的密码</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.profile</td>
<td>获取远程配置时使用的默认配置文件（逗号分隔）</td>
<td>default</td>
</tr>
<tr>
<td>spring.cloud.config.retry.initial-interval</td>
<td>初始重试间隔（以毫秒为单位）</td>
<td>1000</td>
</tr>
<tr>
<td>spring.cloud.config.retry.max-attempts</td>
<td>最大尝试次数</td>
<td>6</td>
</tr>
<tr>
<td>spring.cloud.config.retry.max-interval</td>
<td>退避的最大间隔</td>
<td>2000</td>
</tr>
<tr>
<td>spring.cloud.config.retry.multiplier</td>
<td>下一个间隔的乘数</td>
<td>1.1</td>
</tr>
<tr>
<td>spring.cloud.config.server.bootstrap</td>
<td>表示配置服务器应使用远程存储库中的属性初始化其自己的环境</td>
<td>false</td>
</tr>
<tr>
<td>spring.cloud.config.server.default-application-name</td>
<td>application 传入请求没有特定的默认应用程序名称</td>
<td>application</td>
</tr>
<tr>
<td>spring.cloud.config.server.default-label</td>
<td>传入请求没有特定标签时的默认存储库标签</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.default-profile</td>
<td>传入请求没有特定的默认应用程序配置文件时</td>
<td>default</td>
</tr>
<tr>
<td>spring.cloud.config.server.encrypt.enabled</td>
<td>在发送给客户端之前启用对环境属性的解密</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.config.server.git.force-pull</td>
<td>标记表示存储库应该强制拉。如果真的丢弃任何本地更改并从远程存储库获取</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.git.password</td>
<td>使用远程存储库验证密码</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.git.repos</td>
<td>存储库标识符映射到位置和其他属性</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.git.search-paths</td>
<td>在本地工作副本中使用的搜索路径</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.git.timeout</td>
<td>用于获取HTTP或SSH连接的超时（以秒为单位）</td>
<td>5</td>
</tr>
<tr>
<td>spring.cloud.config.server.git.uri</td>
<td>远程存储库的URI</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.git.username</td>
<td>用于远程存储库的身份验证用户名</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.native.fail-on-error</td>
<td>标识以确定在解密期间如何处理异常</td>
<td>false</td>
</tr>
<tr>
<td>spring.cloud.config.server.native.search-locations</td>
<td>搜索配置文件的位置</td>
<td>[]</td>
</tr>
<tr>
<td>spring.cloud.config.server.native.version</td>
<td>为本地存储库报告的版本字符串</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.overrides</td>
<td>无条件发送给所有客户的资源的额外地图</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.prefix</td>
<td>配置资源路径的前缀</td>
<td></td>
</tr>
<tr>
<td>spring.cloud.config.server.strip-document-from-yaml</td>
<td>标记为指示作为文本或集合（而不是映射）的YAML文档应以“本机”形式返回</td>
<td>true</td>
</tr>
<tr>
<td>spring.cloud.config.uri</td>
<td>远程服务器的URI</td>
<td>http：// localhost：8888</td>
</tr>
<tr>
<td>spring.cloud.config.username</td>
<td>联系远程服务器时使用的用户名</td>
<td></td>
</tr>
</tbody>
</table>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>认识SpringCloud(四)—服务治理机制</title>
    <url>/2019/12/16/springcloud-four/</url>
    <content><![CDATA[<h4 id="一、了解服务治理机制"><a href="#一、了解服务治理机制" class="headerlink" title="一、了解服务治理机制"></a>一、了解服务治理机制</h4><p>在上一节搭建SpringCloud中，我们知道了整个 <code>Eureka</code> 服务治理基础架构的三个核心要素。<br>下面我们进一步了解下SpringCloud的<strong>服务治理机制</strong></p>
<p>我们看可以先看下图：</p>
<p><img src="/img/65.png" alt=""></p>
<p>根据上面的结构， 下面我们来详细了解一下， 从服务注册开始到服务调用， 及各个元<br>素所涉及的一些重要通信行为。</p>
<h4 id="二、服务提供者"><a href="#二、服务提供者" class="headerlink" title="二、服务提供者"></a>二、服务提供者</h4><p>服务提供者有<font color="#dd00dd">服务注册</font>、<font color="#dd00dd">服务同步</font>、<font color="#dd00dd">服务续约</font>。</p>
<ul>
<li><p><strong>服务注册：</strong> “服务提供者” 在启动的时候会通过发送REST请求的方式将自己注册到EurekaServer<br>上， 同时带上了自身服务的一些元数据信息。</p>
<ul>
<li>在服务注册时， 需要确认一下<code>eureka.client.register-with-eureka=true</code>参数是否正确， 该值默认为<code>true</code>。 若设置为<code>false</code>将不会启动注册操作。</li>
</ul>
</li>
<li><p><strong>服务同步：</strong> 当服务提供者发送注册请求到一个服务注册中心时， 它会将该请求转发给集群中相连的其他注册中心， 从而实现注册中心之间的服务同步。</p>
</li>
<li><p><strong>服务续约：</strong> 在注册完服务之后，服务提供者会维护一个心跳用来持续告诉<code>EurekaSe1-ver:</code> “我还活着”， 以防止<code>Eureka Server</code>的“剔除任务 ” 将该服务实例从服务列表中排除出去，我们称该操作为服务续约(Renew)。</p>
<ul>
<li><code>eureka.instance.lease-renewal-interval-in-seconds</code> 参数用于定义服务续约任务的调用间隔时间，默认为<font color="#dd0000">30</font>秒。 </li>
<li><code>eureka.instance.lease-expira巨ondura已on-in-seconds</code>参数用于定义服务失效的时间，默认为<font color="#dd0000">90</font>秒。</li>
</ul>
</li>
</ul>
<h4 id="三、服务消费者"><a href="#三、服务消费者" class="headerlink" title="三、服务消费者"></a>三、服务消费者</h4><p>服务消费者有<font color="#dd00dd">获取服务</font>、<font color="#dd00dd">服务调用</font>、<font color="#dd00dd">服务下线</font>。</p>
<ul>
<li><p><strong>获取服务：</strong> 启动服务消费者的时候，会发送一个<code>REST</code>请求到注册中心，获取注册的服务清单。</p>
<ul>
<li>必须确保<code>eureka.c巨ent.fetch-registry=
true</code>参数设置为<code>true</code></li>
<li>可以修改缓存清单的更新时间，设置过<code>eureka.client.registry-fetch-interval-seconds= 30</code>,单位为秒</li>
</ul>
</li>
<li><p><strong>服务调用：</strong> 服务消费者在获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例<br>的元数据信息。</p>
</li>
<li><p><strong>服务下线：</strong> 以在客户端程序中， 当服务实例进行正常的关闭操作时， 它会触发一个服务下线的REST请求给<code>Eureka Server</code>, 告诉服务注册中心：“我要下线了”。 服务端在接收到请求之后，该服务状态置为下线<code>(DOWN)</code>, 并把该下线事件传播出去。</p>
</li>
</ul>
<h4 id="四、服务注册中心"><a href="#四、服务注册中心" class="headerlink" title="四、服务注册中心"></a>四、服务注册中心</h4><p>服务注册中心有<font color="#dd00dd">失效剔除</font>、<font color="#dd00dd">自我保护</font>。</p>
<ul>
<li><p><strong>失效剔除：</strong> 由于内存溢出、 网络故障等原因使得服务不能正常工作， 而服务注册中心并未收到 “服务下线” 的请求。</p>
<ul>
<li><font color="#dd0000"><strong>解决办法：</strong></font>在启动的时候会创建一个定时任务，默认每隔一段时间（默认为60秒） 将当前清单中超时（默认为90秒）没有续约的服务剔除出去。</li>
</ul>
</li>
<li><p><strong>自我保护：</strong> 客户端必须要有容错机制， 比如可以使用请求重试、断路器等机制，避免出现调用失败的情况。本地调试很容易出发自我保护机制。</p>
<ul>
<li><font color="#dd0000"><strong>解决办法：</strong></font>以使用<code>eureka.server.enableself-preservation = false</code>来关闭自我保护机制，以确保注册中心可以将不可用的实例正确剔除。</li>
</ul>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>认识SpringCloud(三)—服务注册中心SpringCloud Eureka</title>
    <url>/2019/12/16/springcloud-three/</url>
    <content><![CDATA[<h4 id="一、认识服务治理"><a href="#一、认识服务治理" class="headerlink" title="一、认识服务治理"></a>一、认识服务治理</h4><p><strong>服务治理：</strong> 主要用来实现各个微服务实例的自动化注册与发现。</p>
<p>例如画几个简图来帮忙理解</p>
<p>项目A调用项目B，正常调用项目A请求项目B</p>
<p><img src="/img/55.png" alt=""></p>
<p>有了服务中心之后，任何一个服务都不能直接去掉用，都需要通过服务中心来调用</p>
<p><img src="/img/56.png" alt=""></p>
<p>项目A调用项目B，项目B在调用项目C</p>
<p><img src="/img/57.png" alt=""></p>
<p>这时候调用的步骤就会为两步：第一步，项目A首先从服务中心请求项目B服务器，然后项目B在从服务中心请求项目C服务。</p>
<p><img src="/img/58.png" alt=""></p>
<h4 id="二、认识Eureka"><a href="#二、认识Eureka" class="headerlink" title="二、认识Eureka"></a>二、认识Eureka</h4><p>按照官方介绍：</p>
<blockquote>
<p>Eureka is a REST (Representational State Transfer) based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers.</p>
</blockquote>
<blockquote>
<p>Eureka 是一个基于 REST 的服务，主要在 AWS 云中使用, 定位服务来进行中间层服务器的负载均衡和故障转移。</p>
</blockquote>
<p>Eureka由两个组件组成：<code>Eureka服务器</code>和<code>Eureka客户端</code>。</p>
<pre><code>Eureka服务器:用作服务注册服务器。
Eureka客户端:是一个java客户端，用来简化与服务器的交互、作为轮询负载均衡器，并提供服务的故障切换支持。
</code></pre><p>Netflix在其生产环境中使用的是另外的客户端，它提供基于流量、资源利用率以及出错状态的加权负载均衡。</p>
<p><img src="/img/59.png" alt=""></p>
<p>上图简要描述了Eureka的基本架构，由3个角色组成：</p>
<p>1、<strong><em>Eureka Server</em></strong></p>
<ul>
<li>提供服务注册和发现</li>
</ul>
<p>2、<strong><em>Service Provider</em></strong></p>
<ul>
<li>服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到</li>
</ul>
<p>3、<strong><em>Service Consumer</em></strong></p>
<ul>
<li>服务消费方从Eureka获取注册服务列表，从而能够消费服务</li>
</ul>
<h4 id="三、搭建服务注册中心"><a href="#三、搭建服务注册中心" class="headerlink" title="三、搭建服务注册中心"></a>三、搭建服务注册中心</h4><p>1.首先，创建一个基础的<code>Spring Boot</code>工程，创建一个Eureka注册中心，命名为<code>eureka-server</code>, 并在<code>pom.xml</code>中引入必要的依赖内容， 代码如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>
</code></pre>
<p>2.配置application.yml文件：</p>
<pre class=" language-xml"><code class="language-xml">server:
  port: 8081
eureka:
  instance:
    hostname: eurka-server
  client:
    #表示是否将自己注册到Eureka Server，默认为true。
    register-with-eureka: false
    #表示是否从Eureka Server获取注册信息，默认为true。
    fetch-registry: false
    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址
    service-url:
      defaultZone: http://localhost:8081/eureka/

</code></pre>
<p>3.在启动类添加<code>@EnableEurekaServer</code>注解，如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>4.启动工程后，访问：<a href="http://localhost:8081/，" target="_blank" rel="noopener">http://localhost:8081/，</a> 可以看到下面的页面，其中还没有发现任何服务</p>
<p><img src="/img/60.png" alt=""></p>
<h4 id="四、创建服务提供者"><a href="#四、创建服务提供者" class="headerlink" title="四、创建服务提供者"></a>四、创建服务提供者</h4><p>1.pom.xml配置如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>2.配置application.xml,</p>
<pre class=" language-xml"><code class="language-xml">server:
  port: 8082
eureka:
  instance:
    hostname: eurka-server2
  client:
    service-url:
      defaultZone: http://localhost:8081/eureka/
</code></pre>
<p>3.启动类添加如下注解:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>4.最后，将两个项目打成jar包，通过cmd命令启动如下：</p>
<p><img src="/img/61.png" alt=""></p>
<p><img src="/img/62.png" alt=""></p>
<p>5.查看服务中心注册页面，便可看到相对应的服务已经注册到注册中心了。</p>
<p><img src="/img/63.png" alt=""></p>
<h4 id="五、创建服务消费者"><a href="#五、创建服务消费者" class="headerlink" title="五、创建服务消费者"></a>五、创建服务消费者</h4><p>1.pom.xml配置和服务提供者一样</p>
<p>2.application.xml</p>
<pre class=" language-xml"><code class="language-xml">server:
  port: 8083
spring:
  application:
    name: consumer-user
eureka:
  instance:
    hostname: eurka-server3
  client:
    service-url:
      defaultZone: http://localhost:8081/eureka/
</code></pre>
<p>3.启动类添加<code>@EnableDiscoveryClient</code>注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>4.注册中心可以查看服务消费者：</p>
<p><img src="/img/64.png" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>认识SpringCloud(二)</title>
    <url>/2019/12/16/springcloud-two/</url>
    <content><![CDATA[<h4 id="一、搭建SpringBoot项目"><a href="#一、搭建SpringBoot项目" class="headerlink" title="一、搭建SpringBoot项目"></a>一、搭建SpringBoot项目</h4><p>1.打开idea窗口，选择<code>File--&gt;New--&gt;Project--&gt;Spring Initializr</code>,<code>Project SDK</code>为1.8,点击<code>Next</code>按钮，<br>填写<code>Group，Artifact</code>,选择<code>Packaging</code>打包类型是Jar包还是war包，填写包名，点击<code>Next</code>，可以选择相对应的依赖，<br>点击<code>Next</code>按钮，选择项目创建的地址和项目名称，点击<code>Finish</code>.</p>
<p>2.新建HelloController,内容如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Hello Word"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>3.访问浏览器<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>, 就能看到返回结果</p>
<h4 id="二、初识actuator"><a href="#二、初识actuator" class="headerlink" title="二、初识actuator"></a>二、初识actuator</h4><p>能够自动为<code>Spring Boot</code>构建的应用提供 一系列用千监控的端点。</p>
<p>POM.xml添加如下依赖：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependeny</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframwork.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependeny</span><span class="token punctuation">></span></span>
</code></pre>
<p>启动，访问<code>/health</code>断点，返回如下信息：</p>
<pre class=" language-JSON"><code class="language-JSON">{
    "status":"UP"
}
</code></pre>
<p>原生端点：</p>
<ul>
<li><strong>应用配置类：</strong> 获取应用程序中加载的应用配置、环境变量、自动化配置报告等配置类信息</li>
<li><strong>度量指标类：</strong> 获取应用程序运行过程中用于监控的度量指标，比如内存信息、线程池信息、HTTP请求统计</li>
<li><strong>操作控制类：</strong> 提供了对应用的关闭等操作类功能</li>
</ul>
<p>应用配置类：</p>
<ul>
<li><strong><em>/autoconfig:</em></strong> 用来获取应用的自动化配置报告<ul>
<li><font color="#dddd00">positiveMatches：</font>返回条件匹配成功的自动化配置</li>
<li><font color="#dddd00">negativeMatches: </font> 返回条件匹配不成功的自动化配置</li>
</ul>
</li>
<li><strong><em>/beans:</em></strong> 用来获取应用上下文中创建的所有Bean<ul>
<li><font color="#dddd00">bean: </font> Bean的名称</li>
<li><font color="#dddd00">scope: </font> Bean的作用域</li>
<li><font color="#dddd00">type： </font> Bean的JAVA类型</li>
<li><font color="#dddd00">resource：</font> class文件的具体路径</li>
<li><font color="#dddd00">dependencies: </font> 依赖的Bean名称</li>
</ul>
</li>
<li><strong><em>/configprops:</em></strong> 用来获取配置的属性信息报告</li>
<li><strong><em>/env:</em></strong> 用来获取应用所有可用的环境属性报告，包括环境变量、JVM属性、应用的配置属性、命令行参数</li>
<li><p><strong><em>/mappings:</em></strong> 返回所有Spring MVC的控制器映射关系报告</p>
</li>
<li><p><strong><em>/info:</em></strong> 返回一些应用自定义的信息</p>
</li>
</ul>
<p>度量指标类：</p>
<ul>
<li><strong><em>/metrics:</em></strong> 返回当前应用的各类重要度量指标，比如内存信息、线程信息、垃圾回收信息等</li>
<li><strong><em>/health:</em></strong> 获取各类健康指标信息</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>认识SpringCloud(一)</title>
    <url>/2019/12/16/springcloud-one/</url>
    <content><![CDATA[<h4 id="一、什么是微服务架构"><a href="#一、什么是微服务架构" class="headerlink" title="一、什么是微服务架构"></a>一、什么是微服务架构</h4><p>主要是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自的进程中运行，<br>服务之间通过基于HTTP的<code>RESTFUL API</code>进行通信协作</p>
<p>什么是<code>RESTFUL</code>？</p>
<p>简单来说就是用<font color="#dd0000"><strong><em>URL定位资源，用HTTP描述操作</em></strong></font></p>
<h4 id="二、微服务架构的调用方式"><a href="#二、微服务架构的调用方式" class="headerlink" title="二、微服务架构的调用方式"></a>二、微服务架构的调用方式</h4><p>1.使用HTTP的<code>RESTFUL API</code>或轻量级的消息发送协议，实现信息传递与服务调用的触发<br>2.通过在轻量级消息总线上传递消息，类似<code>RabbitMQ</code>等一些提供可靠异步交换的中间件</p>
<h4 id="三、SpringCloud的优点"><a href="#三、SpringCloud的优点" class="headerlink" title="三、SpringCloud的优点"></a>三、SpringCloud的优点</h4><ul>
<li>提供配置管理</li>
<li>服务治理</li>
<li>断路器</li>
<li>智能路由</li>
<li>微代理</li>
<li>控制总线</li>
<li>全局锁</li>
<li>决策竞选</li>
<li>分布式会话</li>
<li>集群状态管理</li>
<li>…..</li>
</ul>
<h4 id="四、SpringCloud相关组件"><a href="#四、SpringCloud相关组件" class="headerlink" title="四、SpringCloud相关组件"></a>四、SpringCloud相关组件</h4><ul>
<li><strong><em>SpringCloud Config:</em></strong> 配置管理工具</li>
<li><strong><em>SpringCloud Netflix:</em></strong> 核心组件<ul>
<li><font color="#dd00dd"><strong><em>Eureka:</em></strong></font> 服务注册中心、服务注册与发现机制的实现</li>
<li><font color="#dd00dd"><strong><em>Hystrix:</em></strong></font> 容错管理组件</li>
<li><font color="#dd00dd"><strong><em>Ribbon:</em></strong></font> 客户端负载均衡的服务调用组件</li>
<li><font color="#dd00dd"><strong><em>Feign:</em></strong></font> 声明式调用组件</li>
<li><font color="#dd00dd"><strong><em>Zuul:</em></strong></font> 网管组件，提供智能路由、访问过滤等功能</li>
</ul>
</li>
<li><strong><em>SpringCloud Bus:</em></strong> 事件、消息总线</li>
<li><strong><em>SpringCloud Cluster:</em></strong> 针对Zookeeper、Redis的选举算法和通用状态模式的实现</li>
<li><strong><em>SpringCloud Consul:</em></strong> 服务发现与配置管理工具</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-kafka启动报错,无法自动创建Topic</title>
    <url>/2019/11/28/springboot-six/</url>
    <content><![CDATA[<p>之前用SpringBoot集成Kafka的时候，后面运行就报一下错误：</p>
<pre class=" language-java"><code class="language-java">Caused by<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> <span class="token function">Topic</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">[</span>topic2<span class="token punctuation">,</span> topic3<span class="token punctuation">]</span> is<span class="token operator">/</span>are not present and missingTopicsFatal is <span class="token boolean">true</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>AbstractMessageListenerContainer<span class="token punctuation">.</span><span class="token function">checkTopics</span><span class="token punctuation">(</span>AbstractMessageListenerContainer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">351</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">]</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>ConcurrentMessageListenerContainer<span class="token punctuation">.</span><span class="token function">doStart</span><span class="token punctuation">(</span>ConcurrentMessageListenerContainer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">136</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">]</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>AbstractMessageListenerContainer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>AbstractMessageListenerContainer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">308</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">]</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>config<span class="token punctuation">.</span>KafkaListenerEndpointRegistry<span class="token punctuation">.</span><span class="token function">startIfNecessary</span><span class="token punctuation">(</span>KafkaListenerEndpointRegistry<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">309</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">]</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>config<span class="token punctuation">.</span>KafkaListenerEndpointRegistry<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>KafkaListenerEndpointRegistry<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token punctuation">]</span> at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultLifecycleProcessor<span class="token punctuation">.</span><span class="token function">doStart</span><span class="token punctuation">(</span>DefaultLifecycleProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">182</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>BUILD<span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>BUILD<span class="token operator">-</span>SNAPSHOT<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">14</span> common frames omitted
</code></pre>
<p>经过排查和寻找方案，才知道原因，我的Kafka版本是2.3.1，凡是2.2版本以上的，都添加了一个新的属性<code>missingTopicsFatal</code>，需要设置成<code>false</code></p>
<p>因此需要在application.yml文件这样设置一下就Ok了</p>
<pre class=" language-java"><code class="language-java">  kafka<span class="token operator">:</span>
    producer<span class="token operator">:</span>
      bootstrap<span class="token operator">-</span>servers<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">9092</span>
    consumer<span class="token operator">:</span>
      bootstrap<span class="token operator">-</span>servers<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">9092</span>
      group<span class="token operator">-</span>id<span class="token operator">:</span> info
      enable<span class="token operator">-</span>auto<span class="token operator">-</span>commit<span class="token operator">:</span> <span class="token boolean">true</span>
      auto<span class="token operator">-</span>offset<span class="token operator">-</span>reset<span class="token operator">:</span> latest
    template<span class="token operator">:</span>
      <span class="token keyword">default</span><span class="token operator">-</span>topic<span class="token operator">:</span> info
    listener<span class="token operator">:</span>
      missing<span class="token operator">-</span>topics<span class="token operator">-</span>fatal<span class="token operator">:</span> <span class="token boolean">false</span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=411214279&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot项目打包成war并在tomcat上运行的步骤</title>
    <url>/2019/11/25/springboot-five/</url>
    <content><![CDATA[<h2 id="一、修改打包形式"><a href="#一、修改打包形式" class="headerlink" title="一、修改打包形式"></a>一、修改打包形式</h2><p>在pom.xml里设置 </p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>packaging<span class="token operator">></span>war<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>
</code></pre>
<h2 id="二、移除嵌入式tomcat插件"><a href="#二、移除嵌入式tomcat插件" class="headerlink" title="二、移除嵌入式tomcat插件"></a>二、移除嵌入式tomcat插件</h2><p>在pom.xml里找到spring-boot-starter-web依赖节点，在其中添加如下代码，</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 移除嵌入式tomcat插件 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>
        <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
</code></pre>
<h2 id="三、添加servlet-api的依赖"><a href="#三、添加servlet-api的依赖" class="headerlink" title="三、添加servlet-api的依赖"></a>三、添加servlet-api的依赖</h2><p>下面两种方式都可以，任选其一</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>tomcat<span class="token operator">-</span>servlet<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">36</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
</code></pre>
<h2 id="四、修改启动类，并重写初始化方法"><a href="#四、修改启动类，并重写初始化方法" class="headerlink" title="四、修改启动类，并重写初始化方法"></a>四、修改启动类，并重写初始化方法</h2><p>我们平常用main方法启动的方式，都有一个App的启动类，代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>我们需要类似于web.xml的配置方式来启动spring上下文了，在Application类的同级添加一个SpringBootStartApplication类，其代码如下:</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStartApplication</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 注意这里要指向原先用main方法执行的Application启动类</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="五、打包部署"><a href="#五、打包部署" class="headerlink" title="五、打包部署"></a>五、打包部署</h2><p>在项目根目录下（即包含pom.xml的目录），在命令行里输入：<br>mvn clean package即可， 等待打包完成，出现[INFO] BUILD SUCCESS即为打包成功。<br>然后把target目录下的war包放到tomcat的webapps目录下，启动tomcat，即可自动解压部署。</p>
<p><strong>注意事项：</strong></p>
<p>使用外部Tomcat部署访问的时候，application.properties(或者application.yml)中配置的</p>
<p>server.port=</p>
<p>server.servlet.context-path=</p>
<p>将失效，<br>请使用tomcat的端口，tomcat，webapps下项目名进行访问。</p>
<p>为了防止应用上下文所导致的项目访问资源加载不到的问题，</p>
<p>建议pom.xml文件中<code>&lt;build&gt;&lt;/build&gt;</code>标签下添加<code>&lt;finalName&gt;&lt;/finalName&gt;</code>标签</p>
<p>最后在浏览器中输入<br><a href="http://localhost:[端口号]/[打包项目名]/" target="_blank" rel="noopener">http://localhost:[端口号]/[打包项目名]/</a></p>
<ul>
<li>作者：平凡的LU同学</li>
<li>链接：<a href="https://blog.csdn.net/yalishadaa/article/details/70037846" target="_blank" rel="noopener">https://blog.csdn.net/yalishadaa/article/details/70037846</a></li>
<li>來源：CSDN</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1362124362&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot yml文件自定义属性乱码</title>
    <url>/2019/11/25/springboot-four/</url>
    <content><![CDATA[<p>在springboot的application.yml文件中有中文时，读取出来的是乱码，需要进行一下操作：</p>
<p>将idea的配置编码设置为UTF-8,步骤如下：</p>
<ul>
<li>1.Files-&gt;Editor-&gt;File Encodings,设置Global Encoding,Project Encoding和Default Encoding for Properties files编码为UTF-8</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180427181546641?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2duYWlsX291Zw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="本图片来自网络"></p>
<ul>
<li>2.修改application.yml配置如下：</li>
</ul>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8081</span>
  tomcat<span class="token operator">:</span>
    uri<span class="token operator">-</span>encoding<span class="token operator">:</span> UTF<span class="token operator">-</span><span class="token number">8</span>

spring<span class="token operator">:</span>
  http<span class="token operator">:</span>
    encoding<span class="token operator">:</span>
      charset<span class="token operator">:</span> utf<span class="token operator">-</span><span class="token number">8</span>
      enabled<span class="token operator">:</span> <span class="token boolean">true</span>
      force<span class="token operator">:</span> <span class="token boolean">true</span>
  messages<span class="token operator">:</span>
    encoding<span class="token operator">:</span> UTF<span class="token operator">-</span><span class="token number">8</span>

</code></pre>
<p>然后在应用就ok了。</p>
<ul>
<li>作者：gnail_oug</li>
<li>链接：<a href="https://blog.csdn.net/gnail_oug/article/details/80111787" target="_blank" rel="noopener">https://blog.csdn.net/gnail_oug/article/details/80111787</a></li>
<li>來源：CSDN</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1347466560&amp;auto=1&amp;height=66"></iframe>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo打包报TypeError Cannot read property &#39;count&#39; of undefined</title>
    <url>/2019/11/24/hexo-one/</url>
    <content><![CDATA[<p>某一天，突然想将自己的博客文章发布打包项目时，报如下错误：</p>
<pre><code>$ hexo g
INFO Start processing
FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html
TypeError: Cannot read property 'count' of undefined
at Hexo.module.exports (E:\github\hexo\node_modules\hexo-baidu-url-submit\lib\generator.js:4:40)
at Hexo.tryCatcher (E:\github\hexo\node_modules\bluebird\js\release\util.js:16:23)
at Hexo. (E:\github\hexo\node_modules\bluebird\js\release\method.js:15:34)
at E:\github\hexo\node_modules\hexo\lib\hexo\index.js:337:24
at tryCatcher (E:\github\hexo\node_modules\bluebird\js\release\util.js:16:23)
at MappingPromiseArray._promiseFulfilled (E:\github\hexo\node_modules\bluebird\js\release\map.js:61:38)
at MappingPromiseArray.PromiseArray._iterate (E:\github\hexo\node_modules\bluebird\js\release\promise_array.js:113:31)
at MappingPromiseArray.init (E:\github\hexo\node_modules\bluebird\js\release\promise_array.js:77:10)
at MappingPromiseArray._asyncInit (E:\github\hexo\node_modules\bluebird\js\release\map.js:30:10)
at Async._drainQueue (E:\github\hexo\node_modules\bluebird\js\release\async.js:138:12)
at Async._drainQueues (E:\github\hexo\node_modules\bluebird\js\release\async.js:143:10)
at Immediate.Async.drainQueues (E:\github\hexo\node_modules\bluebird\js\release\async.js:17:14)
at runCallback (timers.js:649:20)
at tryOnImmediate (timers.js:622:5)
at processImmediate [as _immediateCallback] (timers.js:594:5)
FATAL Cannot read property 'count' of undefined
TypeError: Cannot read property 'count' of undefined
at Hexo.module.exports (E:\github\hexo\node_modules\hexo-baidu-url-submit\lib\generator.js:4:40)
at Hexo.tryCatcher (E:\github\hexo\node_modules\bluebird\js\release\util.js:16:23)
at Hexo. (E:\github\hexo\node_modules\bluebird\js\release\method.js:15:34)
at E:\github\hexo\node_modules\hexo\lib\hexo\index.js:337:24
at tryCatcher (E:\github\hexo\node_modules\bluebird\js\release\util.js:16:23)
at MappingPromiseArray._promiseFulfilled (E:\github\hexo\node_modules\bluebird\js\release\map.js:61:38)
at MappingPromiseArray.PromiseArray._iterate (E:\github\hexo\node_modules\bluebird\js\release\promise_array.js:113:31)
at MappingPromiseArray.init (E:\github\hexo\node_modules\bluebird\js\release\promise_array.js:77:10)
at MappingPromiseArray._asyncInit (E:\github\hexo\node_modules\bluebird\js\release\map.js:30:10)
at Async._drainQueue (E:\github\hexo\node_modules\bluebird\js\release\async.js:138:12)
at Async._drainQueues (E:\github\hexo\node_modules\bluebird\js\release\async.js:143:10)
at Immediate.Async.drainQueues (E:\github\hexo\node_modules\bluebird\js\release\async.js:17:14)
at runCallback (timers.js:649:20)
at tryOnImmediate (timers.js:622:5)
at processImmediate [as _immediateCallback] (timers.js:594:5)

</code></pre><p>原因：安装了百度推送的插件导致</p>
<p>话不多说，解决方案如下：</p>
<p>运行如下指令</p>
<pre><code>1.npm remove hexo-baidu-url-submit
2.hexo clean
3.hexo g

</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 2.0启动报No active profile set, falling back to default</title>
    <url>/2019/11/24/springboot-three/</url>
    <content><![CDATA[<p>创建一个SpringBoot项目之后，控制台打印如下：</p>
<pre class=" language-java"><code class="language-java">    <span class="token punctuation">.</span>   ____          _            __ _ _
 <span class="token operator">/</span>\\ <span class="token operator">/</span> ___<span class="token string">'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '</span>_ <span class="token operator">|</span> <span class="token string">'_| | '</span>_ \<span class="token operator">/</span> _` <span class="token operator">|</span> \ \ \ \
 \\<span class="token operator">/</span>  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
  '  <span class="token operator">|</span>____<span class="token operator">|</span> <span class="token punctuation">.</span>__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_\__<span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>
 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>_<span class="token operator">|=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>___<span class="token operator">/=</span><span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>
 <span class="token operator">:</span><span class="token operator">:</span> Spring Boot <span class="token operator">:</span><span class="token operator">:</span>        <span class="token punctuation">(</span>v2<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">)</span>

<span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">41.812</span>  INFO <span class="token number">11644</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span>Demo01Application<span class="token operator">:</span> Starting Demo01Application on <span class="token number">20180528</span><span class="token operator">-</span><span class="token number">132245</span> with PID <span class="token function">11644</span> <span class="token punctuation">(</span>D<span class="token operator">:</span>\SpringBoot\project\demo01\target\classes started by Administrator in D<span class="token operator">:</span>\SpringBoot\project\demo01<span class="token punctuation">)</span>

<span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">41.821</span>  INFO <span class="token number">11644</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span>Demo01Application<span class="token operator">:</span> No active profile set<span class="token punctuation">,</span> falling back to <span class="token keyword">default</span> profiles<span class="token operator">:</span> <span class="token keyword">default</span>

<span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">43.160</span>  INFO <span class="token number">11644</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span>Demo01Application<span class="token operator">:</span> Started Demo01Application in <span class="token number">1.955</span> <span class="token function">seconds</span> <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">3.395</span><span class="token punctuation">)</span>

Process finished with exit code <span class="token number">0</span>

</code></pre>
<p>原因：创建的pom.xml有问题，</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> 

</code></pre>
<p>pom文件中有这个依赖，这个是什么意思呢？</p>
<p>简单来说就是：我把外部的一个tomcat引入了。</p>
<p>这下你明白了吧，spring boot内部本来就有一个。你现在又引入了一个，这下出问</p>
<p>解决方案：上述代码删掉，重新Import changes就Ok了</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器无法访问配置的服务端口</title>
    <url>/2019/11/16/systembuild-two/</url>
    <content><![CDATA[<h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h4><p>阿里云为了安全考虑，需要设置安全规则，否则会导致无法访问到服务器的相关端口。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在云服务器管理控制台按以下步骤简单设置一下即可</p>
<p><img src="/img/54.png" alt="本图片来自网络"></p>
<p>点击添加规则，设置端口</p>
<p><strong>注意：</strong> 添加完安全规则后需要重启服务器才能生效。</p>
<p>然后windows+R，输入mstsc打开远程桌面输入公网IP和凭据即可，一般用户名</p>
<p>默认为administrator。</p>
<ul>
<li>作者：csdn2497242041</li>
<li>链接：<a href="https://blog.csdn.net/CSDN2497242041/article/details/78776600" target="_blank" rel="noopener">https://blog.csdn.net/CSDN2497242041/article/details/78776600</a></li>
<li>來源：CSDN</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云学生服务器的购买和配置方法</title>
    <url>/2019/11/15/systembuild/</url>
    <content><![CDATA[<h3 id="一、购买"><a href="#一、购买" class="headerlink" title="一、购买"></a>一、购买</h3><p><strong>1.登录阿里云官网</strong> <a href="https://promotion.aliyun.com/ntms/act/campus2018.html?source=5176.11533457&amp;userCode=kfnrves6&amp;type=copy" target="_blank" rel="noopener">https://www.aliyun.com/</a></p>
<p><strong>2.滚动你手中的鼠标，滑至网站首页的末端。</strong></p>
<p><strong>3.如下图所示：</strong></p>
<p><img src="https://ahualy.github.io//post-images/1556071126269.png" alt="本图片来自网络"></p>
<p><strong>4.按照上面提供的学生认证流程，完成学生认证，认证成功就会出现【恭喜您，已完成学生认证，解锁全部时长】</strong></p>
<p><strong>5.选择好你所有购买的服务(笔者选择【轻量应用服务器】)–&gt;【预装环境(系统镜像–&gt;Windows Server 2012 R2 64位)】–&gt;【地域】–&gt;【购买时长】，点击【立即购买】</strong></p>
<p><strong>6.会让你付款，付款成功后，回到阿里云首页，点击导航栏【控制台】</strong></p>
<p><strong>7.在控制台一次点击【产品与服务】–&gt;【轻量应用服务器】，如下图所示</strong></p>
<p><img src="https://ahualy.github.io//post-images/1556071900403.png" alt="本图片来自网络"></p>
<p><strong>8.跳转到【轻量应用服务器】后，可以看到你购买的服务器的详细信息，如下图所示</strong></p>
<p><img src="https://ahualy.github.io//post-images/1556072060131.png" alt="本图片来自网络"></p>
<p><strong>9.点击你的服务器，跳转到服务器详细信息页面，做两件事情</strong></p>
<ul>
<li><p><strong>记住你的服务器的公网ip。</strong></p>
</li>
<li><p><strong>重置密码，这个密码是远程连接服务器的密码，按要求设置好之后，重启你的服务器</strong></p>
</li>
</ul>
<p><img src="https://ahualy.github.io//post-images/1556072474284.png" alt="本图片来自网络"></p>
<p>至此，你的阿里云服务器就已经购买完成。下面将讨论如何使用这个服务器。</p>
<h3 id="二、远程登录"><a href="#二、远程登录" class="headerlink" title="二、远程登录"></a>二、远程登录</h3><p><strong>远程连接有以下两种方式</strong></p>
<ul>
<li><strong>使用浏览器发起安全连接</strong></li>
<li><strong>通过远程桌面工具连接（如Windows自带的远程桌面连接工具）</strong></li>
</ul>
<p>具体连接方法可以参考<a href="https://help.aliyun.com/knowledge_detail/60784.html?spm=5176.10173289.107.2.1bad2e77CPXRYM" target="_blank" rel="noopener">《Windows远程桌面工具配置说明》</a> 连接的时候，笔者并不是一次就连接成功，这里贴上可能出现的错误的解决方案，希望有用</p>
<p>可能出现问题的解决方案<a href="https://www.cnblogs.com/raswin/p/9018388.html" target="_blank" rel="noopener">https://www.cnblogs.com/raswin/p/9018388.html</a></p>
<h3 id="三、环境配置和项目部署"><a href="#三、环境配置和项目部署" class="headerlink" title="三、环境配置和项目部署"></a>三、环境配置和项目部署</h3><p><strong>1.环境配置</strong></p>
<ul>
<li><p><strong>前期准备：</strong> 将你的web项目打包成war(确保你个项目能在你的本机正常运行，访问)、由于我们需要在远程主机上从我们本地拷贝相关文件，因此需将本地某个盘共享到远程服务器中，故需要将自己项目运行的环境放在本机的一个磁盘上(如，笔者在F盘根目录下新建【我的远程项目】文件夹，在该文件夹下存放，MySQL数据库，JDK，Tomcat，数据库文件等)。</p>
</li>
<li><p><strong>远程连接：详情请看下图</strong></p>
</li>
</ul>
<p>(1).Window+R -&gt; 输入mstsc 回车 来到这个界面</p>
<p><img src="https://ahualy.github.io//post-images/1556078371557.png" alt="本图片来自网络"></p>
<p>(2).如上图输入我们购买的云服务器的外网ip</p>
<p>(3).确定后点击连接 用户名为Administrator，密码为之前设置的那个很复杂的那个密码(即之前点击重置密码时设置的密码) ，点击确定进入远程主机界面。成功后，会看到如下图所示界面。</p>
<p><img src="https://ahualy.github.io//post-images/1556078739171.png" alt="本图片来自网络"></p>
<p><strong>2.项目部署</strong></p>
<ul>
<li><p><strong>运行环境：</strong> 需要注意的是！！！必须配置JAVA_HOME和CATALINA_HOME否则tomcat启动会失败(必须配置这两个HOME) 环境配置如下:</p>
<ul>
<li><p>1.1配置JAVA_HOME</p>
<pre><code>在环境变量中新建环境变量，名为JAVA_HOME，内容为Java安装根目录,例如C:\Java\jdk_1.7.0_13.在环境变量中找到path环境变量，在最后面加上 ;%JAVA_HOME%\bin; (注意前后的两个分号不可少) 。

验证:Windows+R 输入cmd 键入javac 验证是否成功。
</code></pre></li>
<li><p>1.2配置CATALINA_HOME</p>
<pre><code>在环境变量中新建环境变量,名为CATALINA_HOME,内容为tomcat根目录,例如：C:\apache-tomcat-7.0.56

在环境变量中找到path环境变量,在最后面加上 ;%CATALINA_HOME\bin; (注意前后的两个分号不可少) 。

验证：进入tomcat目录下的bin目录下运行startup.bat文件,若能正常启动服务，则说明配置成功，若启动服务一闪而过，表示失败 失败原因有两种：1.JAVA_HOME路径有误 2.CATALINA_HOME路径有误 自己检查。
</code></pre></li>
</ul>
</li>
</ul>
<p>以上已完成正常的服务配置，启动服务后，打开远程主机上的浏览器，输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 若能访问到tomcat主页，则说明配置成功。</p>
<ul>
<li><p><strong>部署项目：</strong> 接下来将外网ip配置进去，即可通过外网ip访问我们的远程服务器，具体操作如下:</p>
<pre><code> 进入tomcat根目录，找到conf下的server.xml文件，找到host根节点。
将原来的name="localhost" 中的localhost改成我们的外网ip.保存后，重启服务 验证:随便使用一台电脑打开浏览器，输入【公网ip:8080】即可访问到我们远程主机上的web项目。
不加端口号访问项目的方法
将Connector节点下的port属性值改成80即可在访问的时候不加端口号.http默认端口号为80因此我们可以不用输入端口号。
</code></pre></li>
</ul>
<ul>
<li>作者：翎幺</li>
<li>链接：<a href="https://ahualy.github.io/post/a-li-yun/" target="_blank" rel="noopener">https://ahualy.github.io/post/a-li-yun/</a></li>
<li>來源：Github</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Connection is read-only. Queries leading to data modification are not allowed 的产生原因及解决方案</title>
    <url>/2019/01/20/ssm-three/</url>
    <content><![CDATA[<p>spring.xml:文件</p>
<pre class=" language-xml"><code class="language-xml">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>   
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>import*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>export*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>   
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>
</code></pre>
<p>分析：service层里面有参与事物的方法没有按以上规则来命名，而以上配置文件规定了数据库操作函数必须要以上面的字符串开头，否则的话就按照默认的配置，对数据库访问的权限为read-only。</p>
<p>报错原因：我的因为service层中的方法名违背了以上规则，只要将方法名改下就可以了</p>
<p>解决办法：1.修改service里面方法的名字，改为符合配置文件的规则。<br>2.当然也可以把read-only=”true”去掉，(不推荐这种做法)</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=520511377&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>关于表单自动提交的问题及解决方式</title>
    <url>/2019/01/20/form/</url>
    <content><![CDATA[<p>在js中，我们常常会用到表单提交，但小编今天遇到一个问题：在删除所有引用的js文件之后，页面还是刷新</p>
<p>最后发现问题如下：</p>
<p>在js中，使用表单提交，即使你不写$(“XXX”).submit()也会使得表单提交，那如何寻找这种问题解决方式呢？</p>
<p>总结问题及解决方式如下:</p>
<p>(1)使用onsubmit()阻止表单提交，但是会有一个触发问题，onsubmit 事件只有在表单中的确认按钮被点击时发生触发。原因如下：  </p>
<p>先看一段代码：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"index.jsp"</span> method<span class="token operator">=</span><span class="token string">"post"</span> onsubmit<span class="token operator">=</span><span class="token string">"submitTest();"</span><span class="token operator">></span> 
<span class="token operator">&lt;</span>INPUT value<span class="token operator">=</span><span class="token string">"www"</span><span class="token operator">></span> 
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span> 

<span class="token operator">&lt;</span>SCRIPT LANGUAGE<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token operator">></span> 
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 
<span class="token keyword">function</span> <span class="token function">submitTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
<span class="token comment" spellcheck="true">// 一些逻辑判断return false; </span>
<span class="token punctuation">}</span> 
<span class="token comment" spellcheck="true">//-->&lt;/SCRIPT></span>
</code></pre>
<p>在点击该submit按钮时并没有发生触发事件，原因为何？应该在onsubmit中加上return submitTest()；onsubmit属性就像是</p><form>这个html对象的一个方法名，其值（一字符串）就是其方法体，默认返回true； </form><p></p>
<p>submitTest()虽然返回false，但我们只执行了此函数，没有对其结果进行任何处理,而onsubmit=”return submitTest()利用到了它的返回值，达到了预期效果。</p>
<p>(2)使用return false来阻止表单的默认行为</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"loginForm"</span> action<span class="token operator">=</span><span class="token string">"login.aspx"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
 <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit"</span> id<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">var</span> submitBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 submitBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"preventDefault!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p>最后：事件处理函数返回false的问题，在大多数情况下,为事件处理函数返回false,可以防止默认的事件行为. </p>
<p>(3)使用preventDefault()来阻止浏览器默认提交表单行为</p>
<p>在标准浏览器中，阻止浏览器默认行为使用event.preventDefault()，而在IE6~8中，使用returnValue属性来实现。</p>
<p>请看如下代码</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"loginForm"</span> action<span class="token operator">=</span><span class="token string">"login.aspx"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
 <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit"</span> id<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">var</span> submitBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 submitBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"preventDefault!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 兼容标准浏览器</span>
  window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 兼容IE6~8</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=571534645&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Package should contain a content type part [M1.13]异常的解决方式</title>
    <url>/2019/01/20/hssfwork/</url>
    <content><![CDATA[<p>此异常的源代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Workbook <span class="token function">create</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token keyword">throws</span>       
    IOException<span class="token punctuation">,</span>InvalidFormatException <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>POIFSFileSystem<span class="token punctuation">.</span><span class="token function">hasPOIFSHeader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>POIXMLDocument<span class="token punctuation">.</span><span class="token function">hasOOXMLHeader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>OPCPackage<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"你的excel版本目前poi解析不了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<p><code>解决方式</code>：</p>
<p>读写xls和xlsx格式时，HSSFWorkbook针对xls，XSSFWorkbook针对xlsx</p>
<p>主要是格式的问题！</p>
<p>作者主要是将xls文件格式改成了xlsx就没有问题了</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=468546961&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>form表单中关于ajaxForm与ajaxSubmit的两种提交方式的用法和区别</title>
    <url>/2019/01/20/ajax-three/</url>
    <content><![CDATA[<p>(1)用法:ajaxForm和ajaxSubmit都可以接收0或1个参数，该参数可以是一个变量，一个对象或回调函数，这个对象主要有一下参数 :</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
url <span class="token punctuation">:</span> url<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//form提交数据的路径</span>
type <span class="token punctuation">:</span> type<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//form提交的方式(method:get/post)</span>
target <span class="token punctuation">:</span> target<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//服务器返回响应数据显示的元素(Id)号</span>
beforeSerialize <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//序列化提交数据之前的回调函数</span>
beforeSubmit <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//提交之前执行的回调函数</span>
success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//提交成功之后返回的回调函数</span>
error <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//提交失败后返回的回调函数</span>
dataType <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//服务器返回的数据类型</span>
clearForm <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//提交成功后是否清空表单中的字段值</span>
restForm <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//提交成功后是否重置表单中的字段值，即恢复到页面加载时的状态</span>
timeout <span class="token punctuation">:</span> <span class="token number">6000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置请求时间，超过请求时间后，自动退出请求</span>
<span class="token punctuation">}</span>
</code></pre>
<p>(2)区别:ajaxForm不能主动提交form表单，函数只是为提交表单做准备需要以submit来触发提交，而ajaxSubmit会自动提交表单，同时也可以在点击其他按钮也可以触发提交，不一定是submit按钮。<br>ajaxForm执行的时候其实相当于：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此句解释了为什么ajaxSubmit会自动提交表单，想要阻止自动提交，必须return false;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1306861622&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>关于$.ajax()中使用serialize()提交form表单数据</title>
    <url>/2019/01/20/ajax-two/</url>
    <content><![CDATA[<p>提交多个数据时，不需要一个一个将获取的值传给ajax,可以直接使用$(“form”).serialize()将其表单序列化的值传给ajax()作为url的参数，轻松使用ajax提交form表单了。<br>例:</p>
<pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>
url <span class="token punctuation">:</span> url<span class="token punctuation">,</span>
data <span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>关于序列化表单之后出现的中文乱码问题原因及解决方案:<br>(1)原因:使用ajax请求之后，当没有设定请求的type时，默认采用的是get请求方式，而get请求方式要采用(String)request.getParameter(“username”),”utf-8”);对每个中文进行单独的转码才能解决乱码问题<br>(2)解决方案:使用post请求方式进行提交表单</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34200609&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的JsonConfig详解</title>
    <url>/2019/01/20/jsonconfig/</url>
    <content><![CDATA[<p>JSON lib能够将Java对象转成json格式的字符串，也可以将Java对象转换成xml格式的文档，同样可以将json字符串转换成Java对象或是将xml字符串转换成Java对象。<br>无论出于何种原因，某些时候，我们需要对对象转为字符串的过程加以控制，最常见需求如数值格式化和日期格式化。JSON lib提供了JsonConfig对象，该对象能够深刻影响Java对象转成json字符串的行为。<br>比如我们要控制JSON序列化过程中的Date对象的格式化，以及数值的格式化，JsonValueProcessor是最好的选择。</p>
<p>(1)<code>JsonValueProcessor</code><br>Example：<br>java里面时间类型转换成json数据就成这样了：</p>
<p>“createTime”:{“date”:30,”day”:3,”hours”:15,”minutes”:14,”month”:3,”nanos”:0,”seconds”<br>:38,”time”:1209539678000,”timezoneOffset”:-480,”year”:108}</p>
<p>期望的结果是”yyyy-mm–dd”</p>
<p>解决方案:使用jsonConfig即可</p>
<pre class=" language-java"><code class="language-java">JsonConfig jsonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jsonConfig<span class="token punctuation">.</span><span class="token function">registerJsonValueProcessor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateJsonValueProcessor</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>(2)<code>setIgnoreDefaultExcludes</code><br>Example:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JsonConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setIgnoreDefaultExcludes</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认为false，即过滤默认的key</span>

JSONObject jsonObject <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>上面的代码会把name 和 class都输出</p>
<p>而去掉setIgnoreDefaultExcludes(true)的话，就只会输出name，不会输出class。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=497400537&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>StringUtils.isEmpty用法</title>
    <url>/2019/01/20/stringtoconvert-two/</url>
    <content><![CDATA[<p>StringUtils 方法的操作对象是 Java.lang.String 类型的对象，是 JDK 提供的 String 类型操作方法的补充，并且是 null 安全的(即如果输入参数 String 为 null 则不会抛出 NullPointerException ，而是做了相应处理，例如，如果输入为 null 则返回也是 null 等，具体可以查看源代码)。</p>
<p>除了构造器，StringUtils 中一共有130多个方法，并且都是 static 的，所以我们可以这样调用 StringUtils.xxx()</p>
<p>下面分别对一些常用方法做简要介绍：</p>
<p><code>1. public static boolean isEmpty(String str)</code> </p>
<p>判断某字符串是否为空，为空的标准是 <code>str==null</code> 或 <code>str.length()==0</code><br>下面是 StringUtils 判断是否为空的示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span> 
StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//注意在 StringUtils 中空格作非空处理</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">"bob"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">" bob "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre>
<p><code>2. public static boolean isNotEmpty(String str)</code></p>
<p>判断某字符串是否非空，等于 !isEmpty(String str)<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token string">"         "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token string">"bob"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token string">" bob "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre>
<p><code>3. public static boolean isBlank(String str)</code></p>
<p>判断某字符串是否为空或长度为0或由空白符(whitespace) 构成<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">"        "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">"\t \n \f \r"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">//对于制表符、换行符、换页符和回车符</span>

StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//均识为空白符</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">"\b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">//"\b"为单词边界符</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">"bob"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">" bob "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>

</code></pre>
<p><code>4. public static boolean isNotBlank(String str)</code></p>
<p>判断某字符串是否不为空且长度不为0且不由空白符(whitespace) 构成，等于 !isBlank(String str)<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">"         "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">"\t \n \f \r"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">"\b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">"bob"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token string">" bob "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre>
<p><code>5. public static String trim(String str)</code><br>去掉字符串两端的控制符(control characters, char &lt;= 32) , 如果输入为 null 则返回null<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">" \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p><code>6. public static String trimToNull(String str)</code><br>去掉字符串两端的控制符(control characters, char &lt;= 32) ,如果变为 null 或””，则返回 null<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">"     \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToNull</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p><code>7. public static String trimToEmpty(String str)</code><br>去掉字符串两端的控制符(control characters, char &lt;= 32) ,如果变为 null 或 “” ，则返回 “”<br>下面是示例：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">"     \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p><code>8. public static String strip(String str)</code><br>去掉字符串两端的空白符(whitespace) ，如果输入为 null 则返回 null<br>下面是示例(注意和 trim() 的区别)：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">"     \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"\b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss   \b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p><code>9. public static String stripToNull(String str)</code><br>去掉字符串两端的空白符(whitespace) ，如果变为 null 或””，则返回 null<br>下面是示例(注意和 trimToNull() 的区别)：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> null
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"\b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss   \b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p><code>10. public static String stripToEmpty(String str)</code><br>去掉字符串两端的空白符(whitespace) ，如果变为 null 或”” ，则返回””<br>下面是示例(注意和 trimToEmpty() 的区别)：</p>
<pre class=" language-java"><code class="language-java">StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     \b \t \n \f \r    "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"\b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     \n\tss   \b"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"ss   \b"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">" d   d dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"d   d dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"dd     "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
StringUtils<span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token string">"     dd       "</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"dd"</span>
</code></pre>
<p>以下方法只介绍其功能，不再举例：<br><code>11. public static String strip(String str, String stripChars)</code><br>   去掉 str 两端的在 stripChars 中的字符。<br>   如果 str 为 null 或等于”” ，则返回它本身；<br>   如果 stripChars 为 null 或”” ，则返回 strip(String str) 。</p>
<p><code>12. public static String stripStart(String str, String stripChars)</code><br>    和11相似，去掉 str 前端的在 stripChars 中的字符。</p>
<p><code>13. public static String stripEnd(String str, String stripChars)</code><br>    和11相似，去掉 str 末端的在 stripChars 中的字符。</p>
<p><code>14. public static String[] stripAll(String[] strs)</code><br>    对字符串数组中的每个字符串进行 strip(String str) ，然后返回。<br>    如果 strs 为 null 或 strs 长度为0，则返回 strs 本身</p>
<p><code>15. public static String[] stripAll(String[] strs, String stripChars)</code><br>    对字符串数组中的每个字符串进行 strip(String str, String stripChars) ，然后返回。<br>    如果 strs 为 null 或 strs 长度为0，则返回 strs 本身</p>
<p><code>16. public static boolean equals(String str1, String str2)</code><br>    比较两个字符串是否相等，如果两个均为空则也认为相等。</p>
<p><code>17. public static boolean equalsIgnoreCase(String str1, String str2)</code><br>    比较两个字符串是否相等，不区分大小写，如果两个均为空则也认为相等。</p>
<p><code>18. public static int indexOf(String str, char searchChar)</code><br>    返回字符 searchChar 在字符串 str 中第一次出现的位置。<br>    如果 searchChar 没有在 str 中出现则返回-1，<br>    如果 str 为 null 或 “” ，则也返回-1</p>
<p><code>19. public static int indexOf(String str, char searchChar, int startPos)</code><br>    返回字符 searchChar 从 startPos 开始在字符串 str 中第一次出现的位置。<br>    如果从 startPos 开始 searchChar 没有在 str 中出现则返回-1，<br>    如果 str 为 null 或 “” ，则也返回-1</p>
<p><code>20. public static int indexOf(String str, String searchStr)</code><br>    返回字符串 searchStr 在字符串 str 中第一次出现的位置。<br>    如果 str 为 null 或 searchStr 为 null 则返回-1，<br>    如果 searchStr 为 “” ,且 str 为不为 null ，则返回0，<br>    如果 searchStr 不在 str 中，则返回-1</p>
<p><code>21. public static int ordinalIndexOf(String str, String searchStr, int ordinal)</code><br>    返回字符串 searchStr 在字符串 str 中第 ordinal 次出现的位置。<br>    如果 str=null 或 searchStr=null 或 ordinal&lt;=0 则返回-1<br>    举例(*代表任意字符串)：</p>
<pre class=" language-java"><code class="language-java">      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre>
<p><code>22. public static int indexOf(String str, String searchStr, int startPos)</code><br>    返回字符串 searchStr 从 startPos 开始在字符串 str 中第一次出现的位置。<br>    举例(*代表任意字符串)：</p>
<pre class=" language-java"><code class="language-java">      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
      StringUtils<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre>
<p><code>23. public static int lastIndexOf(String str, char searchChar)</code><br>    基本原理同18</p>
<p><code>24. public static int lastIndexOf(String str, char searchChar, int startPos)</code><br>    基本原理同19</p>
<p><code>25. public static int lastIndexOf(String str, String searchStr)</code><br>    基本原理同20</p>
<p><code>26. public static int lastIndexOf(String str, String searchStr, int startPos)</code></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28949843&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>String字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>e.stopPropagation与e.cancelBubble的区别</title>
    <url>/2019/01/20/jquery/</url>
    <content><![CDATA[<p>相同之处：都是阻止服务器的默认行为<br>不同之处：<code>stopPropagation</code>符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器，而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。<br><code>cancelBubble</code>:设置或获取当前事件是否要在事件句柄中向上冒泡</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=564247897&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONObject与JSONArray()的使用</title>
    <url>/2019/01/20/jsonconvert/</url>
    <content><![CDATA[<p>1.从Object到String<br>要先用Object构造一个JSONObject对象或者一个JSONArray对象，然后调用他的toString()方法即可。<br>–&gt;1.案例一:</p>
<pre class=" language-java"><code class="language-java">Book book<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">52.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JSONObject object<span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>–&gt;2.案例二:</p>
<pre class=" language-java"><code class="language-java">Book book<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">52.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Book book2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book2<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">42.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
ist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book2<span class="token punctuation">)</span><span class="token punctuation">;</span>
JSONArray arry<span class="token operator">=</span>JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果如下：</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">52.3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">42.3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre>
<p>2.从String到Object<br>要先用String对象构造一个JSONObject或者JSONArray对象<br>——&gt;1.案例一：</p>
<pre class=" language-java"><code class="language-java">String json<span class="token operator">=</span><span class="token string">"{name:'Java',price:52.3}"</span><span class="token punctuation">;</span>
JSONObject object<span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>object<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>——–&gt;2.案例二:</p>
<pre class=" language-java"><code class="language-java">String json<span class="token operator">=</span><span class="token string">"[{name:'Java',price:52.3},{name:'C',price:42.3}]"</span><span class="token punctuation">;</span>
JSONArray array<span class="token operator">=</span>JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
Map o<span class="token operator">=</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>3.从String到Bean<br>——-&gt;1.单个Bean对象</p>
<pre class=" language-java"><code class="language-java">String json<span class="token operator">=</span><span class="token string">"{name:'Java',price:52.3}"</span><span class="token punctuation">;</span>
JSONObject object<span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
Product product<span class="token operator">=</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span>JSONObject<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>——–&gt;2.Bean的数组</p>
<pre class=" language-java"><code class="language-java">String json<span class="token operator">=</span><span class="token string">"[{name:'Java',price:52.3},{name:'C',price:42.3}]"</span><span class="token punctuation">;</span>
JSONArray array<span class="token operator">=</span>JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
Product<span class="token punctuation">[</span><span class="token punctuation">]</span> products<span class="token operator">=</span><span class="token punctuation">(</span>Product<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> JSONArray<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>Product p<span class="token operator">:</span>products<span class="token punctuation">)</span><span class="token punctuation">{</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1334433561&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>JSONObject</tag>
        <tag>JSONArray</tag>
      </tags>
  </entry>
  <entry>
    <title>简要概述对spring security与shrio的认识与区别</title>
    <url>/2019/01/20/springsecurity-two/</url>
    <content><![CDATA[<p>最近看到项目中使用到了shrio和spring security,这两者都是对权限的控制与管理，为了了解两者的区别，查阅了相关资料，进行了一个整理:</p>
<p>Apache shrio是Java的一个安全框架，但是shrio框架的一大特点强大而灵活并且简单，容易使用，相比spring security框架没有那么晦涩难懂，它能清晰的处理认证，授权，管理会话以及密码加密。但是相比于spring security，可能没有spring security做的相关功能强大，所以具体使用哪个框架主要看你本身的项目是都需要那些复杂功能一些相关的东西。但因为我项目中运用到了spring security，所以后面的博文可能会对spring security做一下详细的了解以及介绍总结。</p>
<p>以下是<strong>shrio</strong>所具有的一些特点:</p>
<ul>
<li>1.易于理解的 Java Security API；</li>
<li>2.简单的身份认证（登录），支持多种数据源（LDAP，JDBC，Kerberos，ActiveDirectory 等）；</li>
<li>3.对角色的简单的签权（访问控制），支持细粒度的签权；</li>
<li>4.支持一级缓存，以提升应用程序的性能；</li>
<li>5.内置的基于 POJO 企业会话管理，适用于 Web 以及非 Web 的环境；</li>
<li>6异构客户端会话访问；</li>
<li>7.非常简单的加密 API；</li>
<li>8.不跟任何的框架或者容器捆绑，可以独立运行</li>
</ul>
<p><strong>spring security</strong>:<br>spring security对于spring的结合较好，如果项目用的是springmvc使用起来挺方便，如果项目没有使用spring，先暂时不考虑了，shrio因为是Apache下的一个项目，不跟任何容器和框架绑定，可以独立运行，所以相对来说简便灵活。但对于shiro所具有的一系列功能，spring security都有，包括认证，验证，授权等等，目前spring security较好的解决了功能级权限管理的问题，并且spring security对Oauth、OpenID也有支持,Shiro则需要自己手动实现，作者自己还整理了一些资料，说spring security的权限细粒度更高，当然，关于这里，作者还没有深入去了解，这里主要是对shrio和spring security做一个大概总结，并且对spring security有一个大概的认识。</p>
<p>转载:  以下是对Oauth以及OpenId的一些认知:</p>
<p><strong>Oauth</strong>:在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p>
<p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
<p><strong>OpenId</strong>: 系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。</p>
<p>与OpenID同属性的身份识别服务商还有ⅥeID,ClaimID,CardSpace,Rapleaf,Trufina ID Card等，其中ⅥeID通用账户的应用最为广泛。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=486707381&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>关于spring security的简要介绍以及相关配置和jar包认识</title>
    <url>/2019/01/20/springsecurity/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p>
<p>安全主要包括两个操作，”认证和验证(权限控制)”，现在是spring security面向的两个主要方向，“认证” 是为用户建立一个他所声明的主体的过程， （“主体”一般是指用户，设备或可以在你系统中执行行动的其他系统）。 “验证”指的一个用户能否在你的应用中执行某个操作。              </p>
<p>在身份验证层面，Spring Security广泛支持各种身份验证模式。 这些验证模型绝大多数都由第三方提供，或正在开发的有关标准机构提供的，例如Internet Engineering Task Force。 作为补充，Spring Security也提供了自己的一套验证功能。 Spring Security目前支持认证一体化和如下认证技术：</p>
<ul>
<li><p>HTTP BASIC authentication headers (一个基于IETF RFC的标准)</p>
</li>
<li><p>HTTP Digest authentication headers (一个基于IETF RFC的标准)</p>
</li>
<li><p>HTTP X.509 client certificate exchange (一个基于IETF RFC的标准)</p>
</li>
<li><p>LDAP (一个非常常见的跨平台认证需要做法，特别是在大环境)</p>
</li>
<li><p>Form-based authentication (提供简单用户接口的需求)</p>
</li>
<li><p>OpenID authentication</p>
</li>
<li><p>基于预先建立的请求头进行认证 （比如Computer Associates Siteminder）</p>
</li>
<li><p>JA-SIG Central Authentication Service (也被称为CAS，这是一个流行的开源单点登录系统)</p>
</li>
<li><p>Transparent authentication context propagation for Remote Method Invocation (RMI) and HttpInvoker (一个Spring远程调用协议)</p>
</li>
<li><p>Automatic “remember-me” authentication (这样你可以设置一段时间，避免在一段时间内还需要重新验证)</p>
</li>
<li><p>Anonymous authentication (允许未认证的任何调用，自动假设一个特定的安全主体)</p>
</li>
<li><p>Run-as authentication (这在一个会话内使用不同安全身份的时候是非常有用的)</p>
</li>
<li><p>Java Authentication and Authorization Service (JAAS)</p>
</li>
<li><p>JEE Container autentication (这样，你可以继续使用容器管理认证，如果想的话)</p>
</li>
<li><p>Kerberos</p>
</li>
<li><p>Java Open Source Single Sign On (JOSSO) *</p>
</li>
<li><p>OpenNMS Network Management Platform *</p>
</li>
<li><p>AppFuse *</p>
</li>
<li><p>AndroMDA *</p>
</li>
<li><p>Mule ESB *</p>
</li>
<li><p>Direct Web Request (DWR) *</p>
</li>
<li><p>Grails *</p>
</li>
<li><p>Tapestry *</p>
</li>
<li><p>JTrac *</p>
</li>
<li><p>Jasypt *</p>
</li>
<li><p>Roller *</p>
</li>
<li><p>Elastic Plath *</p>
</li>
<li><p>Atlassian Crowd *</p>
</li>
<li><p>你自己的认证系统(向下看)</p>
</li>
</ul>
<p>许多独立软件供应商（ISVs, independent software vendors）采用Spring Security，是因为它拥有丰富灵活的验证模型。 这样，无论终端用户需要什么，他们都可以快速集成到系统中，不用花很多功夫，也不用让用户改变运行环境。 如果上述的验证机制都没有满足你的需要，Spring Security是一个开放的平台，编写自己的验证机制是十分简单的。 Spring Security的许多企业用户需要整合不遵循任何特定安全标准的“遗留”系统，Spring Security在这类系统上也表现的很好。</p>
<p>Spring Security不仅提供认证功能，也提供了完备的授权功能。 在授权方面主要有三个领域，授权web请求，授权被调用方法，授权访问单个对象的实例。 为了帮你了解它们之间的区别，对照考虑授在Servlet规范web模式安全，EJB容器管理安全，和文件系统安全方面的授权方式。 Spring Security在所有这些重要领域都提供了完备的能力</p>
<p>好了，简述到这里下面主要介绍一下spring security相关的一些jar包： </p>
<ul>
<li><p>1.4.1.1. Core - spring-security-core.jar</p>
<ul>
<li>包含了核心认证和权限控制类和接口， 运程支持和基本供应API。使用Spring Security所必须的。支持单独运行的应用， 远程客户端，方法（服务层）安全和JDBC用户供应。包含顶级包：</li>
<li><p>org.springframework.security.core</p>
</li>
<li><p>org.springframework.security.access</p>
</li>
<li><p>org.springframework.security.authentication</p>
</li>
<li><p>org.springframework.security.provisioning</p>
</li>
</ul>
</li>
<li><p>1.4.1.2. 远程调用 - spring-security-remoting.jar</p>
<ul>
<li>提供与Spring远程调用的集成。你不需要它，除非你写了一个远程客户端 使用Spring Remoting。 主包是 org.springframework.security.remoting。</li>
</ul>
</li>
<li><p>1.4.1.3. Web - spring-security-web.jar</p>
<ul>
<li>包含过滤器和对应的web安全架构代码。任何需要依赖servlet API的。 你将需要它，如果你需要Spring Security Web认证服务和基于URL的权限控制。 主包是org.springframework.security.web。</li>
</ul>
</li>
<li><p>1.4.1.4. Config - spring-security-config.jar</p>
<ul>
<li>包含安全命名控制解析代码，你需要它， 如果使用了Spring Security XML命名控制来进行配置。主包是 org.springframework.security.config。这些类都不应该在应用中直接使用。</li>
</ul>
</li>
<li><p>1.4.1.5. LDAP - spring-security-ldap.jar</p>
<ul>
<li>LDAP认证和实现代码，如果你需要使用LDAP认证或管理LDAP用户实体就是必须的。 顶级包是org.springframework.security.ldap。</li>
</ul>
</li>
<li><p>1.4.1.6. ACL - spring-security-acl.jar</p>
<ul>
<li>处理领域对象ACL实现。用来提供安全给特定的领域对象实例，在你的应用中。 顶级包是org.springframework.security.acls。</li>
</ul>
</li>
<li><p>1.4.1.7. CAS - spring-security-cas.jar</p>
<ul>
<li>Spring Security的CAs客户端集成。如果你希望使用Spring Security web认证 整合一个CAS单点登录服务器。顶级包是 org.springframework.security.cas。</li>
</ul>
</li>
<li><p>1.4.1.8. OpenID - spring-security-openid.jar</p>
<ul>
<li>OpenID web认证支持。用来认证用户，通过一个外部的OpenID服务。 org.springframework.security.openid。需要OpenID4Java</li>
</ul>
</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在pom.xml中的配置如下请看:    </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>spring security在web.xml中的配置:   </p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Spring Secutiry4.1的过滤器链配置 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSecurityFilterChain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSecurityFilterChain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
</code></pre>
<p>spring security.xml配置如下:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/security<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>beans</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans  
          http://www.springframework.org/schema/beans/spring-beans.xsd  
          http://www.springframework.org/schema/context  
          http://www.springframework.org/schema/context/spring-context.xsd  
          http://www.springframework.org/schema/security  
          http://www.springframework.org/schema/security/spring-security.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>


         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**/js/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**/css/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**/img/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/plugins/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bootstrap/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**/*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload/**/*.*<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>


        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">auto-config</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">use-expressions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">entry-point-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAuthenticationEntryPoint<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  


        <span class="token comment" spellcheck="true">&lt;!--配置自定义的过滤器--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-filter</span> <span class="token attr-name">before</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILTER_SECURITY_INTERCEPTOR<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

         <span class="token comment" spellcheck="true">&lt;!-- 退出处理 --></span>  
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logout</span> <span class="token attr-name">logout-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/j_spring_security_logout<span class="token punctuation">"</span></span>   
                <span class="token attr-name">logout-success-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginlog/logout.do<span class="token punctuation">"</span></span>   
                <span class="token attr-name">invalidate-session</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-filter</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginFilter<span class="token punctuation">"</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FORM_LOGIN_FILTER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 登录成功后拒绝访问跳转的页面 --></span>         
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access-denied-handler</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accessDeniedHandler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>csrf</span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- 自定义权限不足处理程序 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accessDeniedHandler<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MyAccessDeniedHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>errorPage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/sysadmin/error.jsp?errorCode<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 使用自定义类myUserDetailsService从数据库获取用户信息 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-manager</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAuthenticationManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-provider</span> <span class="token attr-name">user-service-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myUserDetailsService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication-provider</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication-manager</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 自定义用户资源信息获取 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myUserDetailsService<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MyUserDetailService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 被认证请求根据所需权限跳转到不同的登录界面 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAuthenticationEntryPoint<span class="token punctuation">"</span></span>   
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginFormUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>constructor-arg</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 验证成功后操作 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationSuccessHandler<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MySimpleUrlAuthenticationSuccessHandler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 验证失败后操作 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationFailureHandler<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MySimpleUrlAuthenticationFailureHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultFailureUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 自定义登陆拦截器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginFilter<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MyAuthenticationFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAuthenticationManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filterProcessesUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/j_spring_security_check<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment" spellcheck="true">&lt;!-- 认证成功用自定义类authenticationSuccessHandler处理 --></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationSuccessHandler<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationSuccessHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationFailureHandler<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationFailureHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 自定义拦截器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MyAuthorizationFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticationManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAuthenticationManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accessDecisionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysecurityAccessDecisionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityMetadataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secureResourceFilterInvocationDefinitionSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span> 

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysecurityAccessDecisionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MyAccessDecisionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secureResourceFilterInvocationDefinitionSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.seawin.webapp.base.security.MySecurityMetadataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446944158&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>关于断言机制(Assert)常用的方法</title>
    <url>/2019/01/20/assert/</url>
    <content><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expression<span class="token punctuation">)</span>
     <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expression<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
               当 expression 不为 <span class="token boolean">true</span> 抛出异常；
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">notNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span>
               当 object 不为 null 时抛出异常，<span class="token function">notNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> 方法允许您通过 message 定制异常信息。和 <span class="token function">notNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法断言规则相反的方法是 <span class="token function">isNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">isNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>，它要求入参一定是 null；
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>Collection collection<span class="token punctuation">)</span>
    <span class="token function">notEmpty</span><span class="token punctuation">(</span>Collection collection<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
               当集合未包含元素时抛出异常。

   <span class="token function">notEmpty</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span>
   <span class="token function">notEmpty</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
   <span class="token function">notEmpty</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
   <span class="token function">notEmpty</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
             分别对 Map 和 Object<span class="token punctuation">[</span><span class="token punctuation">]</span> 类型的入参进行判断；
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">hasLength</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span>
    <span class="token function">hasLength</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
             当 text 为 null 或长度为 <span class="token number">0</span> 时抛出异常
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">hasText</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span>
    <span class="token function">hasText</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
              text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常；
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span>
    <span class="token function">isInstanceOf</span><span class="token punctuation">(</span>Class <span class="token class-name">type</span><span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
             如果 obj 不能被正确造型为 clazz 指定的类将抛出异常；
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>Class <span class="token class-name">superType</span><span class="token punctuation">,</span> Class <span class="token class-name">subType</span><span class="token punctuation">)</span>
<span class="token function">isAssignable</span><span class="token punctuation">(</span>Class <span class="token class-name">superType</span><span class="token punctuation">,</span> Class <span class="token class-name">subType</span><span class="token punctuation">,</span> String message<span class="token punctuation">)</span>
            subType 必须可以按类型匹配于 superType，否则将抛出异常；
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=167882&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Assert</category>
      </categories>
      <tags>
        <tag>Assert</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring下ActiveMQ的xml配置</title>
    <url>/2019/01/20/activemq/</url>
    <content><![CDATA[<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
 <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
 <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
 <span class="token attr-name"><span class="token namespace">xmlns:</span>cache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/cache<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-4.0.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
 http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

 <span class="token comment" spellcheck="true">&lt;!--连接池 ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory 
 可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包 --></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pooledConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.activemq.pool.PooledConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.activemq.ActiveMQConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brokerURL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tcp://localhost:61616<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> 

 <span class="token comment" spellcheck="true">&lt;!-- 连接工厂 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activeMQConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.activemq.ActiveMQConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brokerURL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tcp://localhost:61616<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
 <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="brokerURL" value="ws://localhost:61614" /> --></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> 

 <span class="token comment" spellcheck="true">&lt;!-- 配置消息目标 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryDestination<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.activemq.command.ActiveMQQueue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greetings<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> 

 <span class="token comment" spellcheck="true">&lt;!-- 定义消息Destination --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topicDestination<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.activemq.command.ActiveMQTopic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topic/greetings<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>


 <span class="token comment" spellcheck="true">&lt;!-- 消息模板 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryJmsTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jms.core.JmsTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activeMQConnectionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultDestination<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryDestination<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jms.support.converter.SimpleMessageConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> 

 <span class="token comment" spellcheck="true">&lt;!-- 消息发送者客户端 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topicJmsTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jms.core.JmsTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activeMQConnectionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultDestination<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topicDestination<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jms.support.converter.SimpleMessageConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> 

 <span class="token comment" spellcheck="true">&lt;!-- 开启订阅模式 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pubSubDomain<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>receiveTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

 <span class="token comment" spellcheck="true">&lt;!-- deliveryMode, priority, timeToLive 的开关要生效，必须配置为true，默认false--></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>explicitQosEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

 <span class="token comment" spellcheck="true">&lt;!-- 发送模式
 DeliveryMode.NON_PERSISTENT=1:非持久 ;
 DeliveryMode.PERSISTENT=2:持久
 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deliveryMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
 <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=469010924&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>ActiveMQ</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉Mybatis Generator生成的一堆Example类</title>
    <url>/2019/01/20/mybatis-twleve/</url>
    <content><![CDATA[<p>上篇讲了如何使用Mybatis Generator生成代码，但是再生成过程中，往往出现一大堆的Example类，而这些Example中的很多方法我们是不需要用到的，因此在生成之前我们可以添加如下代码:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">schema</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>general<span class="token punctuation">"</span></span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tb_table_name<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EntityName<span class="token punctuation">"</span></span>
    <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
    <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useActualColumnNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
</code></pre>
<p>右击项目—&gt;run as—&gt;maven build就OK啦！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=402073807&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis获取插入记录的自增长字段值</title>
    <url>/2019/01/20/mybatis-eleven/</url>
    <content><![CDATA[<p>转自：<a href="http://blog.csdn.net/hellostory/article/details/6790248" target="_blank" rel="noopener">http://blog.csdn.net/hellostory/article/details/6790248</a></p>
<ul>
<li>1.在Mybatis Mapper文件中添加属性“useGeneratedKeys”和“keyProperty”，其中keyProperty是Java对象的属性名！<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spares<span class="token punctuation">"</span></span>   
      <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
      insert into spares(spares_id,spares_name,  
          spares_type_id,spares_spec)  
      values(#{id},#{name},#{typeId},#{spec})  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li>2.Mybatis执行完插入语句后，自动将自增长值赋值给对象Spares的属性id。因此，可通过Spares对应的getter方法获取！<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 
* 新增备件 
* @author hellostory 
* @param spares 
* @return 
*/</span>  
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span>  
<span class="token annotation punctuation">@ResponseBody</span>  
<span class="token keyword">public</span> JsonResponse <span class="token function">insert</span><span class="token punctuation">(</span>Spares spares<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  <span class="token keyword">int</span> count <span class="token operator">=</span> sparesService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>spares<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共插入"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录！"</span>  
          <span class="token operator">+</span> <span class="token string">"\n刚刚插入记录的主键自增长值为："</span> <span class="token operator">+</span> spares<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=436355188&amp;auto=1&amp;height=66"></iframe></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mybatis出现:there is no getter for property named &#39;VARCHAR&#39; in &#39;class com.xxx.xxxxx</title>
    <url>/2019/01/20/mybatis-ten/</url>
    <content><![CDATA[<p>出现这个问题的时候我也是一脸懵逼，后面百度一下但都不是我出现的情况，下面说一下我的解决方法吧</p>
<p>之前看到是插入的时候语句没有截断加上逗号，后面运行一下项目发现还是出现同样的问题，</p>
<p>解决方案如下:<br><img src="/img/53.png" alt="本图片来自网络"></p>
<p>传入的参数我不小心写成了数据库的字段，所以导致冲突，参数应该是你传入的那个参数字段，如果你也出现这种问题还是仔细看看吧，我改正之后就没有以上情况了</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=27583103&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat报文件名，目录名或建标语法不正确的解决办法</title>
    <url>/2019/01/20/navicat-two/</url>
    <content><![CDATA[<p>那天我打开Navicat Permium的时候，当我点击新建查询的时候给我弹出以上问题的框，</p>
<p>解决方案:删除连接，新建一个连接，测试，OK！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28457938&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC中Date对象获取不到表单序列化传过来的日期值解决办法</title>
    <url>/2019/01/20/springmvc-two/</url>
    <content><![CDATA[<p>之前在做这一块的时候，由于js中将表单序列化转换成了json格式，而我使用实体对象直接获取值的，导致我这里出现取不到值的情况，为此，想了一天，用前端JSON.stringgify转换成了对象传给我还是取不到</p>
<p>我还采用了反序列化使用@JSONFiled和@JSONFormat两种方式但还是做无用功，也想到过将字段改成Strign类型，但是之后做转换很麻烦，因此因为这个伤了脑筋，不过最终努力还是有回报，问题得到了解决，下面说下</p>
<p>我的解决方法：</p>
<p>首先在实体类中在定义两个字段，并且赋给他getter和setter方法，</p>
<p>例如:我实体对象获取值的是ieDate和dDate;<br>我在给他添加两个字段</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String ieDateStr<span class="token punctuation">;</span>
<span class="token keyword">private</span> String dDateStr<span class="token punctuation">;</span>
</code></pre>
<p>然后把这两个字段放到文本框的name属性中，</p>
<p>在Controller中如下写:<br><img src="/img/52.png" alt="本图片来自网络"></p>
<p>将你获取到的值进行格式转换并且添加到你的Date字段当中就OK了!</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=25729605&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis中返回list集合为空的解决方法</title>
    <url>/2019/01/20/mybatis-nine/</url>
    <content><![CDATA[<p>一.本人出现的问题是sql语句没报错，但是由于忽略了已修改的代码的传递参数的值，导致查询出来的结果为空，在controller中的参数互换一下就有值了</p>
<p>二.用mybits查询数据库时，如果参数已传入sql，sql也已经执行了，但是返回结果为空，首先保证数据库中有对应数据，如果有对应数据仍返回null，是数据库配置文件有问题。解决方案如下：</p>
<ul>
<li><p>1、mapper.xml文件加入<resultmap>映射，column是数据库中的字段名，property是实体类javabean中的属性，要一一对应</resultmap></p>
</li>
<li><p>2、如果是多张表联合查询，查看是否有相同字段并且没有做区分，比如select s.<em> from single left join customer cu on s.customer_id = cu.customer_id;single的customer_id没有指定，建议s.</em> 换成指定字段</p>
</li>
<li><p>3、<select>标签中不要用ResultType，要用ResultMap且名字要和属性的id相同。且select语句不要用”select * from user_info”,要用具体的字段名如”select user_id,user_name from user_info”`xml&lt;?xml version=”1.0” encoding=”UTF-8” ?&gt;&lt;!DOCTYPE mapper</select></p>
<pre><code>  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
</code></pre><p><mapper namespace="com.springapp.maper.UserMapper"></mapper></p>
  <resultmap type="User" id="BaseResultMap"><br>      <!--
          column:数据库中表的字段
          property：数据库中表所有映射的实体类javaBean中的属性名
       --><br>      <result column="user_id" property="id"><br>      <result column="user_name" property="name"><br>  </result></result></resultmap>


</li>
</ul>
<pre><code>&lt;!-- 这里的id必须和UserMapper接口中的接口方法名相同,resultMap和上面定义的id名字相同 --&gt;
&lt;select id="getUser" resultMap="BaseResultMap" parameterType="Java.lang.Integer"&gt;
    select user_id,user_name from user_info where user_id=#{id}
&lt;/select&gt;
</code></pre><p><br><code>`</code></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=515481072&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis批量插入转换成list集合的问题以及解决方案</title>
    <url>/2019/01/20/mybatis-eight/</url>
    <content><![CDATA[<p>问题：</p>
<p>由于项目中需要批量插入的功能，然后我就用到了阿里的json包，将json数据转换成list集合在批量添加到数据库，但是这个过程中，我突然发现一个问题，之前接收前台传来的值是有的，但转换之后某些字段的值没有了，后面发现，原来是Mybatis自动生成插件做的怪，将实体类赋setter和getter方法时，并没有将属性大写，也就是说原本我的实体字段为gName;setter方法之后为setgName,这就违反了命名规则，但是阿里json包就出现了不能转换报Null的问题，经过试验，终于找到了解决方案：</p>
<p><strong><code>解决方案</code></strong>：</p>
<ul>
<li>1.如果你不想用别的方法，且Pojo类字段不是很多的话，直接将所有的setter和getter方法去掉，用eclipse自动生成的setter和getter方法</li>
<li>2.当然，这种方法是已经废弃的，但是还可以使用，至于有什么漏洞我就不知道了<pre class=" language-java"><code class="language-java">JSONArray Array1 <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>Declaration<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//List&lt;CustomsDeclareBillDetail> detail = Array1.toList(Array1, CustomsDeclareBillDetail.class);</span>
</code></pre>
</li>
<li>3.这种方法的结果和上面是一样的，但还是极力推荐使用这种方案。<pre class=" language-java"><code class="language-java">JSONArray jsonArray <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span> JSONArray<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1302196608&amp;auto=1&amp;height=66"></iframe>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库是dateTime类型传入参数是String类型如何转换的解决方案</title>
    <url>/2019/01/20/mybatis-seven/</url>
    <content><![CDATA[<p>最近遇到一个头疼的问题，在进行条件查询时发现查询没有结果，后面发现数据库字段是dateTime类型，而我传入的是String类型，这就导致它不识别你传入的参数无法作比较而爆出异常，在这里贴出本人的解决方案:<br><img src="/img/51.png" alt="本图片来自网络"></p>
<p>create_time是你的数据库字段，我是做时间范围查询，因此使用了if高级判断，另外发现数据库另外一个字段是date类型，而我传入的是String类型并没有做转换还查询出了结果，这让我感到疑惑，最终可能是因为date的形式和传入参数的格式一致所以才能识别吧，但还是不建议使用。至于我这里为什么还指定了字段是因为我数据库使用了左连接，两个表有相同的字段所以需要指定否则识别不了还是没有查询结果</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1327085138&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis条件查询没有结果，程序不继续执行的原因及解决方案</title>
    <url>/2019/01/20/mybatis-six/</url>
    <content><![CDATA[<p>之前做条件查询的时候，遇到一个问题，如果查询条件数据库能查到，dataTable就给我返回数据，但如果查不到，程序就不执行了，为此也拜读了许多，但是没有搜索结果，有一个的他的事实体类中添加了构造方法后面去掉就解决了，但是我的不是，找了N久，终于解决了，问题出现在哪呢，我debug到查询出来的list，发现list是空的啊，那页面为啥一直在加载呢，而断点也没往下执行了，后面才发现，如图所示：<br><img src="/img/50.png" alt="本图片来自网络"><br>我给list做了JSONObject.fromObject的转换，因此程序到这里就截止了，执行不下去了，后面我去掉了，直接放在map里，就解决了，更多的原因还是出在自己写的代码里，还是要观细微啊！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1330928425&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis实现批量插入与批量删除案例</title>
    <url>/2019/01/20/mybatis-five/</url>
    <content><![CDATA[<p>1.js：首先序列化表单然后将值传到后台<br><img src="/img/47.png" alt="本图片来自网络"></p>
<p>2.Controller：</p>
<p>获取前台传来的序列化表单，并转化为List集合：<br><img src="/img/48.png" alt="本图片来自网络"></p>
<p>3.Service以及ServiceImpl层：<br><img src="/img/49.png" alt="本图片来自网络"></p>
<p>4.Mybatis:</p>
<p>字段以及数据库类型一定要对应</p>
<p>批量插入:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     insert into customs_declare_bill_detail(
     id,
     gno,
     relman_no,
     code_t,
     g_name,
     g_model,
     g_qty,
     g_unit,
     decl_total, 
     decl_curr, 
     decl_price, 
     exg_version, 
     goods_no,
     origin_country, 
     unit_1, 
     qty_1,
     unit_2,
     qty_2, 
     duty_mode,
     work_usd, 
     dest_country, 
     rtn_code,
     rtn_info,
     invalid, 
     bill_id, 
     main_factor,
     bill_no, 
     creator,
     create_time, 
     amender, 
     amend_time)
     values
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        (
         #{item.id,jdbcType=BIGINT}, 
         #{item.gno,jdbcType=VARCHAR},
         #{item.relmanNo,jdbcType=VARCHAR}, 
         #{item.codeT,jdbcType=VARCHAR},
         #{item.gName,jdbcType=VARCHAR}, 
         #{item.gModel,jdbcType=VARCHAR}, 
         #{item.gQty,jdbcType=INTEGER}, 
         #{item.gUnit,jdbcType=VARCHAR},
         #{item.declTotal,jdbcType=DECIMAL}, 
         #{item.declCurr,jdbcType=VARCHAR}, 
         #{item.declPrice,jdbcType=DECIMAL}, 
         #{item.exgVersion,jdbcType=VARCHAR}, 
         #{item.goodsNo,jdbcType=VARCHAR}, 
         #{item.originCountry,jdbcType=VARCHAR},
         #{item.unit1,jdbcType=VARCHAR}, 
         #{item.qty1,jdbcType=DECIMAL},
         #{item.unit2,jdbcType=VARCHAR}, 
         #{item.qty2,jdbcType=DECIMAL}, 
         #{item.dutyMode,jdbcType=VARCHAR},
         #{item.workUsd,jdbcType=DECIMAL},
         #{item.destCountry,jdbcType=VARCHAR}, 
         #{item.rtnCode,jdbcType=VARCHAR}, 
         #{item.rtnInfo,jdbcType=VARCHAR}, 
         #{item.invalid,jdbcType=VARCHAR}, 
         #{item.billId,jdbcType=BIGINT},
         #{item.mainFactor,jdbcType=VARCHAR},
         #{item.billNo,jdbcType=VARCHAR}, 
         #{item.creator,jdbcType=INTEGER}, 
         #{item.createTime,jdbcType=TIMESTAMP},
         #{item.amender,jdbcType=INTEGER}, 
         #{item.amendTime,jdbcType=TIMESTAMP}
      )
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
</code></pre>
<p>2.批量删除:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
        delete from customs_declare_bill_detail where id in  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
            #{item} 
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=468546961&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\ipact\.\upload\*.txt问题及解决方案</title>
    <url>/2019/01/20/javaweb-four/</url>
    <content><![CDATA[<p>这是没有设置路径，所以eclipse将默认路径到了eclipse自带的Tomcat下面</p>
<p>解决方式:</p>
<p>tomcat有项目的先remove掉，双击tomcat,旁边有一个Server Locations</p>
<p>这里有三种可以选择：</p>
<p>1.使用eclipse的工作空间，以上述为例就是 D:\workSpace.metadata.plugins\org.eclipse.wst.server.core\tmp0\</p>
<p>2.使用tomcat的安装目录，以上述为例就是 D:\tomcat\</p>
<p>3.自定义路径，这里就是自己选择目录了</p>
<p>还可以通过修改 Deploy path 来定义工程到底部署到容器的哪个目录下。例如下图中，我们就可以选着 Use Tomcat Installtion 这种方式，并且设置 Deploy path 为 webapps:</p>
<p><img src="/img/46.png" alt="本图片来自网络"></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1314438112&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>is a MultipartResolver configured?</title>
    <url>/2019/01/20/javaweb-three/</url>
    <content><![CDATA[<p>解决方法：<br>（1）<br>第一步：引入commons-fileupload-1.2.jar，具体版本号以具体项目要求为准；<br>第二步：在spring-mvc.xml中增加如下配置，具体文体大小限制以具体项目要求为准</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 设置上传文件最大值   1M=1*1024*1024(B)=1048576 bytes --></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1048576<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>（2）我是在Controller中的方法加了@RequestParam(“file”)Mutipart file,但是我spring.xml中引用的是自定义的包，不是spring本体的包，所以报错了</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34200949&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>BeanFactory not initialized or already closed - call &#39;refresh&#39; before accessing beans via the ApplicationContext的出现问题以及各种解决方案</title>
    <url>/2019/01/20/javaweb-two/</url>
    <content><![CDATA[<p>解决方案:</p>
<p>(1)</p>
<p>BeanFactory没有实例化或者已经关闭了，其实产生错误的原因很简单，在写：ApplicationContext ctx = new ClassPathXmlApplicationContext();<br>时，没有指定配置文件，Spring实例化BeanFactory的时候是默认到classPath下面查找名为applicationContext.xml的文件的，但是呢，你又没有指定，所以出现了这个错误。</p>
<p>这就是错误的原因，在括号写上配置文件名就行了。</p>
<p><code>ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml")</code>;</p>
<p>这样的话就不会出现这样的错误了。</p>
<p>(2)</p>
<p>原因：spring初始化bean对象出错；</p>
<ul>
<li>1）xml的bean的id 有重复；</li>
<li>2）如果是注解配置：可能是注解的名称有重复：</li>
</ul>
<p>只需要将重复的bean 的id和重复的注解改了就行了；</p>
<p>（3）查看@Controller或者@service注入的接口是否有一样的或者注入的接口是引入别的文件的而导致报错(本人项目出错原因)</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1327294960&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>java生成自增流水号，并从每月第一天重新清零计数将业务流水号添加到数据库</title>
    <url>/2019/01/20/javaweb/</url>
    <content><![CDATA[<p>如果你不想在数据库操作的话，这里有个方法可以一试，直接上代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>seawin<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>convert<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DecimalFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryGenerater</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> String SERIAL_NUMBER <span class="token operator">=</span> <span class="token string">"0001"</span> <span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> PrimaryGenerater primaryGenerater <span class="token operator">=</span> null<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token function">PrimaryGenerater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 取得PrimaryGenerater的单例实现
   *
   * @return
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> PrimaryGenerater <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryGenerater <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>PrimaryGenerater<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryGenerater <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  primaryGenerater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimaryGenerater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> primaryGenerater<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>



<span class="token comment" spellcheck="true">/**
 * 生成 日期+随机数的流水号
 * */</span>
  <span class="token keyword">public</span> String <span class="token function">getNumberForPK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
      String id<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  
      SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      String temp <span class="token operator">=</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">int</span> random<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      id<span class="token operator">=</span>temp<span class="token operator">+</span>random<span class="token punctuation">;</span>  
      <span class="token keyword">return</span> id<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  



<span class="token comment" spellcheck="true">/**
 * HHTG+年月+8+0001
 * 每月从0001开始计数
 * */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">getnumber</span><span class="token punctuation">(</span>String thisCode<span class="token punctuation">)</span><span class="token punctuation">{</span>

      String id <span class="token operator">=</span> null<span class="token punctuation">;</span>
      Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      SimpleDateFormat formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyMM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      String thisData <span class="token operator">=</span> thisCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//这个判断就是判断你数据取出来的最后一个业务单号是不是当月的</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>thisData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新的一月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          thisData <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//如果是新的一月的就直接变成0001</span>
          id <span class="token operator">=</span> <span class="token string">"HHTG"</span> <span class="token operator">+</span> thisData <span class="token operator">+</span> <span class="token string">"80001"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">//不是新的一月就累加</span>
          id <span class="token operator">=</span><span class="token string">"HHTG"</span><span class="token operator">+</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"8"</span>
                <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>thisCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     *  HHTG170980001
     *  HH公司简称  + TG业务类型 + 年月 + 8部门 + 0001
     * 
     *  */</span>
      String sno <span class="token operator">=</span> <span class="token string">"HHTG170980001"</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getnumber</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Controller调用：<br><img src="/img/43.png" alt="本图片来自网络"></p>
<p> no = list.get(0).getBillSeq()这里是查看你数据库的本月最后一条记录，如果有，则继续增加，如果是新月份，则从0001开始计数</p>
<p>结果如下:<br><img src="/img/44.png" alt="本图片来自网络"></p>
<p>换下月份结果如下:<br><img src="/img/45.png" alt="本图片来自网络"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>关于对springboot的认识</title>
    <url>/2019/01/20/springboot-two/</url>
    <content><![CDATA[<h4 id="什么是spring-boot"><a href="#什么是spring-boot" class="headerlink" title="什么是spring boot"></a>什么是spring boot</h4><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（不知道这样比喻是否合适）</p>
<h4 id="使用spring-boot有什么好处"><a href="#使用spring-boot有什么好处" class="headerlink" title="使用spring boot有什么好处"></a>使用spring boot有什么好处</h4><p>其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢</p>
<ul>
<li>1）配置web.xml，加载spring和spring mvc</li>
<li>2）配置数据库连接、配置spring事务</li>
<li>3）配置加载配置文件的读取，开启注解</li>
<li>4）配置日志文件</li>
<li>…</li>
<li>配置完成之后部署tomcat 调试</li>
<li>…</li>
</ul>
<p>现在非常流行微服务，如果我这个项目仅仅只是需要发送一个邮件，如果我的项目仅仅是生产一个积分；我都需要这样折腾一遍!</p>
<p>但是如果使用spring boot呢？<br>很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务！</p>
<p>使用sping boot到底有多爽，用下面这幅图来表达</p>
<p><img src="/img/42.jpg" alt="本图片来自网络"></p>
<p>链接： <a href="http://www.ityouknow.com/springboot/2016/01/06/springboot(%E4%B8%80)-%E5%85%A5%E9%97%A8%E7%AF%87.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/01/06/springboot(%E4%B8%80)-%E5%85%A5%E9%97%A8%E7%AF%87.html</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446940994&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连接报too many connections以及打开mysql.exe出现闪退的问题</title>
    <url>/2019/01/20/mysql-five/</url>
    <content><![CDATA[<p>1.打开cmd,进入mysql盘，进入mysql所在文件夹，进入bin文件夹</p>
<p>2.输入net start mysql启动MySQL服务</p>
<p>3.输入</p>
<p><code>show variables like '%max_connections%'</code>; </p>
<p>4.结果显示：<br><img src="/img/41.png" alt="本图片来自网络"></p>
<p>5.设置最大连接数:</p>
<p> set global max_connections=1000；</p>
<p>6.启动tomcat，ok</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446943133&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax获取返回的map集合</title>
    <url>/2019/01/20/ajax/</url>
    <content><![CDATA[<p>后台代码:<br><img src="/img/34.png" alt="本图片来自网络"></p>
<p>或:<br><img src="/img/35.png" alt="本图片来自网络"></p>
<p>前台ajax获取:</p>
<ul>
<li><p>(1)第一种:<br><img src="/img/36.png" alt="本图片来自网络"></p>
</li>
<li><p>（2）第二种:<br><img src="/img/37.png" alt="本图片来自网络"></p>
</li>
<li><p>（3）第三种：in循环<br><img src="/img/38.png" alt="本图片来自网络"></p>
</li>
<li><p>(4)第四种：for循环<br><img src="/img/39.png" alt="本图片来自网络"></p>
</li>
<li><p>(5)第五种:each循环<br><img src="/img/40.png" alt="本图片来自网络"></p>
</li>
</ul>
<p>链接：<a href="http://blog.csdn.net/t0404/article/details/53425417" target="_blank" rel="noopener">http://blog.csdn.net/t0404/article/details/53425417</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=450385404&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql存储过程，函数，视图，触发器的用法</title>
    <url>/2019/01/20/mysql-four/</url>
    <content><![CDATA[<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a><strong><code>存储过程</code></strong></h4><ul>
<li>1语法</li>
</ul>
<pre class=" language-java"><code class="language-java">      CREATE PROCEDURE <span class="token function">sp_name</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>proc_parameter<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> routine_body
</code></pre>
<ul>
<li>2举例    </li>
</ul>
<pre><code>         DROP PROCEDURE IF EXISTS pro_add;
           DELIMITER //
           CREATE PROCEDURE pro_add( IN p1 INT, IN p2  INT, INOUT p3 INT)
           BEGIN
              SET p3=p1+p2;
           END
           //

           CALL pro_add(1,2,@abc);
           SELECT @abc;  
</code></pre><h4 id="函数-（特殊的存储过程-暂时不支持-out）"><a href="#函数-（特殊的存储过程-暂时不支持-out）" class="headerlink" title="函数 （特殊的存储过程 暂时不支持 out）"></a><strong><code>函数 （特殊的存储过程 暂时不支持 out）</code></strong></h4><ul>
<li>1语法结构：<pre><code>  CREATE FUNCTION sp_name ([func_parameter[,...]])
     RETURNS type
     [characteristic ...] routine_body
</code></pre></li>
<li>2举例<pre><code>  DROP FUNCTION IF EXISTS fun_add;
  DELIMITER //
  CREATE FUNCTION fun_add(p1 INT,p2 INT)
  RETURNS INT
  BEGIN
      RETURN p1+p2;
  END
  //
  SET @abc=fun_add(1,2);
 SELECT @abc;
</code></pre></li>
</ul>
<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a><strong><code>视图</code></strong></h4><ul>
<li><p>1&gt;语法结构<br>  <code>create view 名称 as sql语句</code></p>
<ul>
<li>视图操作举例<pre class=" language-xml"><code class="language-xml">CREATE TABLE `arcticle` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `title` varchar(200) DEFAULT NULL,
 `content` varchar(200) DEFAULT NULL,
 `createuser` varchar(200) DEFAULT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8
CREATE VIEW vi_arc AS SELECT title,content FROM arcticle
SELECT * FROM arcticle
UPDATE vi_arc SET content='java永不过时' WHERE title='java是否过时'
DELETE FROM vi_arc WHERE title='java是否过时' 
INSERT INTO vi_arc VALUES('abc','ccc')
</code></pre>
<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><strong><code>触发器</code></strong></h4></li>
</ul>
</li>
<li><p>1&gt;语法结构</p>
<pre class=" language-xml"><code class="language-xml">  CREATE TRIGGER trigger_name trigger_time trigger_event
  ON tbl_name FOR EACH ROW trigger_stmt
</code></pre>
</li>
<li><p>2&gt;举例：</p>
<pre class=" language-xml"><code class="language-xml">   DROP TRIGGER trg_arc
     DELIMITER //
     CREATE TRIGGER trg_arc 
     BEFORE INSERT
     ON arcticle 
     FOR EACH ROW
     BEGIN
        IF new.createuser IS NULL THEN
         SET new.createuser='张三';
        END IF;
     END
     //  
</code></pre>
<p>3&gt;注意<br>  delete和update 有 old对象<br>  insert和update 有new对象<br>  update  有old，new对象<br>  after触发器 不能够修改new的值</p>
</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=167850&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Mysql 5.7.15 主从复制</title>
    <url>/2019/01/20/mysql-three/</url>
    <content><![CDATA[<p>Windows Mysql 5.7.15 主从复制</p>
<p>Windows MySQL 解压版安装</p>
<ul>
<li><p>1、配置环境变量</p>
</li>
<li><p>2、解压出来的目录默认会有my-default.ini，该配置文件主要用于配置</p>
</li>
</ul>
<p><code>basedir = D:\soft\mysql-5.7.15-winx64</code><br><code>datadir = D:\soft\mysql-5.7.15-winx64\bin</code><br>在安装目录下新建data目录</p>
<ul>
<li><p>3、打开dos窗口执行命令，进入mysql安装目录的bin目录下，执行<br><code>mysqld --initialize-insecure --user=mysql</code><br><code>mysqld install</code><br>执行后Windows服务中就会有MySQL的服务，然后执行<br><code>net start mysql</code><br>会出现提示，服务启动成功</p>
</li>
<li><p>4、服务启动成功后，输入</p>
</li>
</ul>
<p><code>mysql -uroot -p
直接进入mysql，这是因为安装后第一次不需要输入密码，进入后需要修密码</code>SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘newpass’)`;<br>到这里MySQL数据库安装完毕。<br>接下来我们进行主从复制的配置</p>
<p>Windows MySQL5.7.15 主从复制配置</p>
<ul>
<li>1、主从服务器配置一样<br>建立用户<br><code>`</code><br>mysql&gt; grant all privileges on <em>.</em> to root@”192.168.0.161” identified by “root”;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)</li>
</ul>
<pre><code>
- 2、配置环境变量my.ini

解压版的默认没有my.ini配置文件，只有my-default.ini文件，
这样只需新建my.ini文件即可，然后配置
Master 添加如下
</code></pre><p>[mysqld]<br>log-bin=mysql-bin<br>log-bin-index=mysql-bin.index<br>server-id = 232<br>sync_binlog=1<br>binlog_format=mixed<br>binlog-do-db = ibase4j<br>binlog-ignore-db = mysql<br>binlog-ignore-db = performance_schema<br>binlog-ignore-db = information_schema</p>
<p>#服务端的编码方式</p>
<p>character-set-server=utf8</p>
<p>#客户端编码方式，最好和服务端保存一致</p>
<p>loose-default-character-set = utf8</p>
<p>[mysqldump]<br>max_allowed_packet = 100M</p>
<pre><code>

Slave 添加如下
</code></pre><p>[mysqld]<br>server-id = 148<br>log-bin=mysql-bin<br>relay-log-index = slave-relay-bin.index<br>relay-log = slave-relay-bin</p>
<p>sync_master_info = 1<br>sync_relay_log = 1<br>sync_relay_log_info = 1</p>
<p>#服务端的编码方式<br>character-set-server=utf8</p>
<p>#客户端编码方式，最好和服务端保存一致<br>loose-default-character-set = utf8</p>
<pre><code>
3、重启服务
主服务器重启后
登录mysql，执行`show master status`;

mysql&gt; show master status;
+------------------+----------+--------------+---------------------------------- -----------+
| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+---------------------------------- -----------+
| mysql-bin.000004 | 107 | ibase4j | mysql,performance_schema,informat ion_schema |
+------------------+----------+--------------+---------------------------------- -----------+

从服务器重启
重启后登录从服务器
</code></pre><p>mysql&gt; slave stop;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)</p>
<p>mysql&gt; change master to master_host=’192.168.0.19’,master_user=’root’,master_password=’root’,master_log_file=’mysql-bin.000001’ ,master_log_pos=5163;<br>Query OK, 0 rows affected (0.04 sec)</p>
<p>mysql&gt; slave start;<br>Query OK, 0 rows affected (0.00 sec)</p>
<pre><code>注意查看：
</code></pre><p>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><code>`</code><br>以上这两个参数的值为Yes，即说明配置成功！</p>
<p>第四部：测试MySQL主从服务器双机热备是否成功<br>在主服务器上的mysql中添加数据、或表，看能否同步到从服务器中的mysql中。</p>
<p>问题:<br>查看Slave状态：<code>show slave status\G</code><br>Slave_IO_Running: connecting —网络不通<br>Slave_SQL_Running: NO：</p>
<p><strong><code>原因</code></strong>：</p>
<ul>
<li><p>1.程序可能在slave上进行了写操作 </p>
</li>
<li><p>2.也可能是slave机器重起后，事务回滚造成的.</p>
</li>
</ul>
<p><strong><code>解决办法</code></strong>：</p>
<ul>
<li>1.首先停掉Slave服务：slave stop</li>
<li>2.到主服务器上查看主机状态：记录File和Position对应的值。</li>
<li>3.到slave服务器上执行手动同步：</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=167732&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse导入maven项目报Resources文件夹红叉问题解决方案</title>
    <url>/2019/01/20/eclipse/</url>
    <content><![CDATA[<p>1.找到该项目下的settings文件夹，</p>
<p>2.找到该文件</p>
<p><img src="/img/31.png" alt="本图片来自网络"></p>
<p>3.打开查看版本号</p>
<p><img src="/img/32.png" alt="本图片来自网络"></p>
<p>与web.xml文件中的版本号做对比</p>
<p><img src="/img/33.png" alt="本图片来自网络"></p>
<p>4.然后在Eclipse中点击该项目maven update Project， OK！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=167827&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架实现复杂的Excel导出功能</title>
    <url>/2019/01/20/ssm-two/</url>
    <content><![CDATA[<p>最近项目开发当中要求实现导出功能，查看了很多人的博客但是感觉对于复杂的导出还是感觉好麻烦，代码量太大，为此，想了多种方法，最后找到了最简洁的一种方法，如下：</p>
<p>1.要实现的导出功能模板如下：</p>
<p><img src="/img/25.png" alt="本图片来自网络"></p>
<p>2.按常规解决方法做如下导出显然是不明智的，为此，Java中提供了一个jar包可以实现这种复杂的导出</p>
<p>3.导入jxls包</p>
<p><img src="/img/26.png" alt="本图片来自网络"></p>
<p>4.在Controller中代码如下：</p>
<ul>
<li><p>(1)首先实现数据查询<br><img src="/img/27.png" alt="本图片来自网络"></p>
</li>
<li><p>(2)获取项目中放入Excel模板的路径以及导出Excel的路径<br><img src="/img/28.png" alt="本图片来自网络"></p>
</li>
<li><p>(3)将项目路径放入读取流，导出路径以及文件名放入输出流，然后用Map实现key-value的方式写入Excel，此处的list和Detail是查询出来的结果集，然后就是用我们导入的jar包功能啦，使用XLSTransformer，将结果集写入Excel，然后在获取导出的文件路径，在客户端实现下载导出的功能<br><img src="/img/29.png" alt="本图片来自网络"></p>
</li>
<li><p>4.Excel模板如下，此处必须用${key.value}输出值的方式，否则无效<br><img src="/img/30.png" alt="本图片来自网络"></p>
</li>
</ul>
<p>5.附上源代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/export.do"</span><span class="token punctuation">,</span>produces<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        Long id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>CustomsDeclareBill<span class="token operator">></span> list <span class="token operator">=</span> customsDeclareBillService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>CustomsDeclareBillDetail<span class="token operator">></span> detail <span class="token operator">=</span> customsDeclareBillDetailService<span class="token punctuation">.</span><span class="token function">getSelectDetailById</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>detail<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>detail<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>
            OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//文件名</span>
                String excelName <span class="token operator">=</span> <span class="token string">"中华人民共和国海关进口货物报关单.xls"</span><span class="token punctuation">;</span>
                excelName <span class="token operator">=</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>excelName<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">//获取Excel模板的路径</span>
                <span class="token comment" spellcheck="true">/**
                 * 获取项目路径
                 * 1.this.getClass().getClassLoader().getResource("/").getPath();
                 * getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
                 * 2.req.getSession().getServletContext().getRealPath("/resources/upload");
                 * 3.servletContext.getRealPath("/").substring(0, servletContext.getRealPath("/").lastIndexOf("seawin-webapp-base"))
                 * */</span>
                <span class="token comment" spellcheck="true">//String templateDir = "C:/Users/Administrator/Desktop/"+java.net.URLDecoder.decode(excelName,"utf-8");</span>
                String templateDir <span class="token operator">=</span>servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"seawin-webapp-base"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/seawin-pcweb/"</span><span class="token operator">+</span><span class="token string">"/exceltemplates/"</span> <span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//导出Excel路径</span>
                String exportDir<span class="token operator">=</span>servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"seawin-webapp-base"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/seawin-uploadfile/"</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">//设置响应  </span>
                response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>excelName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 


                 is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>templateDir<span class="token operator">+</span>excelName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>exportDir<span class="token operator">+</span>excelName<span class="token punctuation">)</span><span class="token punctuation">;</span>

                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"billlist"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"detail"</span><span class="token punctuation">,</span> detail<span class="token punctuation">)</span><span class="token punctuation">;</span>

                XLSTransformer transFormer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XLSTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                HSSFWorkbook workBook <span class="token operator">=</span> <span class="token punctuation">(</span>HSSFWorkbook<span class="token punctuation">)</span> transFormer<span class="token punctuation">.</span><span class="token function">transformXLS</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> beans<span class="token punctuation">)</span><span class="token punctuation">;</span>  

                workBook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>

                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>exportDir<span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span>excelName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                InputStream inputstream <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>

                    inputstream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//用于记录以完成的下载的数据量，单位是byte</span>
                     <span class="token keyword">long</span> downloadedLength <span class="token operator">=</span> 0l<span class="token punctuation">;</span>

                      os<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token comment" spellcheck="true">//循环写入输出流</span>
                      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                      <span class="token keyword">int</span> length<span class="token punctuation">;</span>
                      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> inputstream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          downloadedLength <span class="token operator">+=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>

                os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                inputstream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>好了，这样就可以实现导出功能了，再复杂的Excel导出使用此种方式都能够化繁为简，喜欢的小伙伴就将此文顶上去让更多人看到吧！</p>
<p>链接：<a href="http://blog.csdn.net/hu_shengyang/article/details/6736789，该链接写的很详细哦，并且可以实现往Excel中插入动态图片等等。" target="_blank" rel="noopener">http://blog.csdn.net/hu_shengyang/article/details/6736789，该链接写的很详细哦，并且可以实现往Excel中插入动态图片等等。</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446940017&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;null&#39; at line 84</title>
    <url>/2019/01/20/mybatis-four/</url>
    <content><![CDATA[<p>做mybatis批量插入的时候一直报这个错误，为此找了很久，</p>
<p><img src="/img/24.png" alt="本图片来自网络"></p>
<p>一直报着附近的错，后面发现是foreach后面括号没有添加，搞得我心累，所以还是粗心犯的错误，</p>
<p>出现这个错误肯定是sql语法的问题，建议仔细检查每一个环节才能找出错误</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=167937&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>405 method not allowed</title>
    <url>/2019/01/20/405/</url>
    <content><![CDATA[<p>之前项目开发的时候就遇到这种问题，百度了没啥结果，后面自己慢慢寻找错误终于发现了 ，现在总结一下：</p>
<p>1.<br><img src="/img/22.png" alt="本图片来自网络"></p>
<p>检查提交方式和接口路径是否与后台一一对应</p>
<p>2.如果前面没有问题，还是报错请查看指定方式</p>
<p><img src="/img/23.png" alt="本图片来自网络"></p>
<p>3.如果是新建的Controller，请检查spring.xml文件是否进行了配置扫描包</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28138493&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>405</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架实现xml导出并在客户端下载的三种方式</title>
    <url>/2019/01/20/ssm/</url>
    <content><![CDATA[<p>1.使用Document创建节点</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建xml</span>
Document document <span class="token operator">=</span> DocumentHelper<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//创建节点</span>

Element elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"ImportMessage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNamespace</span><span class="token punctuation">(</span><span class="token string">"xsi"</span><span class="token punctuation">,</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"xsi:noNamespaceSchemaLocation"</span><span class="token punctuation">,</span><span class="token string">"SWImportMessagexsd.xsd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>注:第一个是创建根节点，addNamespace()定义命名空间</strong>，后面一个就是自定义属性，如下图所示：</p>
<p><img src="/img/18.png" alt="本图片来自网络"></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建子节点</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>创建第一个子节点

      Element ele <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　

     Element nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"CopMsgId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"普通报关单.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"MsgType"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"SWDEC001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                   nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"FunctionCode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
　　　　　nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Format"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                  nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Compress"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                  nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Version"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如图所示:</p>
<p><img src="/img/19.png" alt="本图片来自网络"></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*创建第二个子节点*/</span>

      Element ele2 <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*创建第二个子节点的子节点*/</span>

      Element nameEle2 <span class="token operator">=</span> ele2<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"DecMessage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*创建子节点的子节点*/</span>

    Element nameEle3 <span class="token operator">=</span> nameEle2<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"DecLists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nameEle3 <span class="token operator">=</span> nameEle2<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"DecContainers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nameEle3 <span class="token operator">=</span> nameEle2<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"DecLicenseDocus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取所有的节点名称</span>

    Element root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true">/*创建子节点下的节点循环，例如DecLists*/</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>CustomsDeclareBillDetail detail<span class="token operator">:</span>detailList<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">//找到要创造节点循环的子节点名称:root.selectSingleNode()</span>
        Element ee2 <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> root<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//DecLists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建节点循环的节点名称</span>

        Element ele6 <span class="token operator">=</span> ee2<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"DecList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java">Element ele7<span class="token operator">=</span>ele7<span class="token operator">=</span>ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"商品编号"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getCodeT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span>ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"备案序号"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getRelmanNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span>ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"商品名称"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getGName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span>ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"规格型号"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getgModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"成交数量"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getgQty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>detail<span class="token punctuation">.</span><span class="token function">getgQty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"成交单位"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getGUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"法定单位"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getLegalUnits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"成交总价"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getDeclTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>detail<span class="token punctuation">.</span><span class="token function">getDeclTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"币制"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getDeclCurr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"原产国"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getOriginCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"征减免税方式"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getDutyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"最终目的国"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getDestCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         ele7<span class="token operator">=</span> ele6<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"提运单号"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getBillNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

String xmlString <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">asXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

String xmlDoc <span class="token operator">=</span> XMLUtil<span class="token punctuation">.</span><span class="token function">formatXml</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>
String fileName <span class="token operator">=</span> <span class="token string">"报关单.xml"</span><span class="token punctuation">;</span>

XMLUtil<span class="token punctuation">.</span><span class="token function">getXMLWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span>xmlDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如下图所示:</p>
<p><img src="/img/20.png" alt="本图片来自网络"></p>
<p>2.<strong><code>使用StringBuffer拼接xml文件</code></strong>：</p>
<p>System.getProperty(“line.separator”);//为换行标记</p>
<pre class=" language-java"><code class="language-java">StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;ImportMessage xsi:noNamespaceSchemaLocation=\"SWImportMessagexsd.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Head>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;CopMsgId>普通报关单.xml&lt;/CopMsgId>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;MsgType>SWDEC001&lt;/MsgType>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;FunctionCode>0&lt;/FunctionCode>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Format>xml&lt;/Format>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Compress>0&lt;/Compress>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Version>1.0&lt;/Version>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/Head>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Data>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;DecMessage>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;DecLists>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>CustomsDeclareBillDetail detail<span class="token operator">:</span>detailList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;DecList>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;商品编号>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getCodeT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/商品编号>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;备案序号>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getRelmanNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/备案序号>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;商品名称>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getGName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/商品名称>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;规格型号>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getgModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/规格型号>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;成交数量>"</span><span class="token operator">+</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getgQty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>detail<span class="token punctuation">.</span><span class="token function">getgQty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/成交数量>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;成交单位>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getGUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/成交单位>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;法定单位>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getLegalUnits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/法定单位>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;成交总价>"</span><span class="token operator">+</span>XMLUtil<span class="token punctuation">.</span><span class="token function">replaceNullString</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getDeclTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>detail<span class="token punctuation">.</span><span class="token function">getDeclTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/成交总价>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;币制>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getDeclCurr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/币制>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;原产国>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getOriginCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/原产国>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;征减免税方式>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getDutyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/征减免税方式>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;最终目的国>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getDestCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/最终目的国>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;提运单号>"</span><span class="token operator">+</span>detail<span class="token punctuation">.</span><span class="token function">getBillNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/提运单号>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/DecList>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/DecLists>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/DecMessage>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/Data>"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/ImportMessage>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

String xmlString <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String xmlDoc <span class="token operator">=</span> XMLUtil<span class="token punctuation">.</span><span class="token function">formatXml</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>
String fileName <span class="token operator">=</span> <span class="token string">"报关单.xml"</span><span class="token punctuation">;</span>

XMLUtil<span class="token punctuation">.</span><span class="token function">getXMLWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span>xmlDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>3.<strong><code>使用String += 输出xml文件</code></strong>:</p>
<pre class=" language-java"><code class="language-java">string strXML <span class="token operator">=</span> <span class="token string">"&lt;?xml version=\"1.0\"?>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;books>&lt;bookdata id=\"1\">"</span><span class="token punctuation">;</span>

        strXML<span class="token operator">+=</span><span class="token string">"&lt;title>C# premier&lt;/title>"</span><span class="token punctuation">;</span>
        strXML <span class="token operator">+=</span> <span class="token string">"&lt;year>2005&lt;/year>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;publisher> Qinghua University Press&lt;/publisher>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;Author>hou &lt;/Author>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;pagers>500 &lt;/pagers>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;description> c# fundation knowledge&lt;/description>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;Price>50.00&lt;/Price>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;/bookdata>"</span><span class="token punctuation">;</span>

        strXML<span class="token operator">+=</span><span class="token string">"&lt;bookdata id=\"2\">"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;title>xml premier&lt;/title>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;year>2005&lt;/year>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;publisher> Peking University Press&lt;/publisher>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;Author>Leo &lt;/Author>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;pagers>400 &lt;/pagers>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;description> xml fundation knowledge&lt;/description>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;Price>45.00&lt;/Price>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;/bookdata>"</span><span class="token punctuation">;</span>

        strXML<span class="token operator">+=</span><span class="token string">"&lt;bookdata id=\"3\">"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;title>UML&lt;/title>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;year>2005&lt;/year>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">"&lt;publisher> Peking University Press&lt;/publisher>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">" &lt;Author>James &lt;/Author>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">" &lt;pagers>650 &lt;/pagers>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">" &lt;description>UML fundation knowledge&lt;/description>"</span><span class="token punctuation">;</span>
        strXML <span class="token operator">+=</span> <span class="token string">" &lt;Price>85.00&lt;/Price>"</span><span class="token punctuation">;</span>
        strXML<span class="token operator">+=</span><span class="token string">" &lt;/bookdata>&lt;/books>"</span><span class="token punctuation">;</span>

        Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"text/xml"</span><span class="token punctuation">;</span>
            Response<span class="token punctuation">.</span>Charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>XmlDocument doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            doc<span class="token punctuation">.</span><span class="token function">LoadXml</span><span class="token punctuation">(</span>strXML<span class="token punctuation">)</span><span class="token punctuation">;</span>
            doc<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>OutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Response<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/*或者这样也可以输出
        *String xmlDoc = XMLUtil.formatXml(strXML);
        *String fileName = "报关单.xml";
        *XMLUtil.getXMLWriter(response, fileName,xmlDoc);
        */</span>
</code></pre>
<p>最后附上调用的工具包:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>XMLUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">private</span> <span class="token function">XMLUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment" spellcheck="true">/** 
     * 根据字符串创建 document 对象 
     * 
     * @param xmlStr 
     * @return 
     */</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> Document <span class="token function">getDocumentByString</span><span class="token punctuation">(</span>String xmlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        Document doc <span class="token operator">=</span> null<span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            doc <span class="token operator">=</span> DocumentHelper<span class="token punctuation">.</span><span class="token function">parseText</span><span class="token punctuation">(</span>xmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"字符串转换成XML失败:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> doc<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment" spellcheck="true">/** 
     * 设置response的返回信息 
     * @param response 
     * @param fileName 
     * @return    XMLWriter 
     */</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> XMLWriter <span class="token function">getXMLWriter</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span>String fileName<span class="token punctuation">,</span>String xmlDoc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        XMLWriter writer <span class="token operator">=</span> null<span class="token punctuation">;</span>  
        OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">//定义xml文件的格式  </span>
            OutputFormat format <span class="token operator">=</span> OutputFormat<span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            format<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment" spellcheck="true">//准备输出xml文件  </span>
            writer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/xml;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xmlDoc<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">setOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"导出xml时获取XMLWriter出错："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> os<span class="token punctuation">)</span><span class="token punctuation">{</span>  
                <span class="token keyword">try</span> <span class="token punctuation">{</span>  
                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"关闭outputStream出错："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> writer<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">formatXml</span><span class="token punctuation">(</span>String xml<span class="token punctuation">)</span> <span class="token keyword">throws</span> DocumentException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>   
     SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

     Document document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
     <span class="token comment" spellcheck="true">//创建输出格式</span>
     OutputFormat format <span class="token operator">=</span> OutputFormat<span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token comment" spellcheck="true">//制定输出xml的编码类型</span>
     format<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     StringWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//创建一个文件输出流</span>
     XMLWriter xmlwriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//将格式化后的xml串写入到文件</span>
     xmlwriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      String returnValue <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

      <span class="token comment" spellcheck="true">//返回编译后的字符串格式</span>
     <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/** 
     * 根据file获得Document 
     * @param file   MultipartFile 
     * @return       Document 
     */</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> Document <span class="token function">getDocumentByFile</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Document document <span class="token operator">=</span> null<span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment" spellcheck="true">//创建SAXReader对象  </span>
            SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment" spellcheck="true">//读取文件 转换成Document  </span>
            document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            document <span class="token operator">=</span> null<span class="token punctuation">;</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件转换出错："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            document <span class="token operator">=</span> null<span class="token punctuation">;</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"读取文件出错："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> document<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  



    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建xml</span>
                Document document <span class="token operator">=</span> DocumentHelper<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token comment" spellcheck="true">//创建节点</span>
                Element elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Element ele <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"CustomsDeclareBill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ele<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    Element nameEle <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"提运单号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    nameEle<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"55555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    OutputFormat format <span class="token operator">=</span> OutputFormat<span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Format格式！！  </span>
                    format<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     XMLWriter writer <span class="token operator">=</span> null<span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>
                        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>  
                     <span class="token keyword">try</span> <span class="token punctuation">{</span>  
                         <span class="token comment" spellcheck="true">//讲xml文档输出到控制台上  </span>
                        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  

                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token punctuation">}</span>  
                <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">replaceNullString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> str<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>最后导出个xml文件如图所示:</p>
<p><img src="/img/21.png" alt="本图片来自网络"></p>
<p>以上三种方法都是本人亲测并实现的功能，有什么问题欢迎留言询问~如果觉得此文对你有帮助的话，顶一下文哦~</p>
<p>部分代码参考自<a href="http://www.cnblogs.com/zgqys1980/archive/2009/10/17/1585052.html" target="_blank" rel="noopener">http://www.cnblogs.com/zgqys1980/archive/2009/10/17/1585052.html</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=33414388&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis中动态SQL语句完成多条件查询</title>
    <url>/2019/01/20/mybatis-three/</url>
    <content><![CDATA[<p>choose（when otherwise）相当于Java中的switch语句，通常when和otherwise一起使用。</p>
<p>where：简化SQL语句中的where条件。</p>
<p>set 解决SQL语句中跟新语句</p>
<p>我们课已通过几个例子来看一下这几个元素的运用场景：</p>
<p><strong><code>if</code></strong>:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryEmp<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.test.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          select * from emp where 1=1
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptNo!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptno=#{deptNO}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptno=#{deptName}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
</code></pre>
<p>注：<code>&lt;if test="deptNo!=null"&gt;</code>中 的deptNo是指实体类中的属性或字段；</p>
<p><strong><code>choose：</code></strong>:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryEmp<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.test.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          select * from emp where 1=1
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptNo!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptno=#{deptNo}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptname=#{deptName}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>
          and personnum>#{personNum}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
</code></pre>
<p>注：上面也说了，choose相当于Java中的switch语句；当第一个when满足时；就只执行第一个when中的条件。当when中的条件都不满足时；就会执行默认的的；也就是otherwise中的语句。</p>
<p><strong><code>where：</code></strong>:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryEmp<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.test.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          select * from emp 
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptNo!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptno=#{deptNO}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and deptno=#{deptName}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
</code></pre>
<p>注： where下面第一个if语句中以and开头，也可以省略第一个and ，如果第一个if语句中有and；mybatis会将第一个and忽略。</p>
<p><strong><code>set：</code></strong>:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.test.entity.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          update emp 
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>empname=#{empName},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>job=#{job}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
          where empno=#{empNo}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>
</code></pre>
<p><strong><code>in:</code></strong>:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamicForeachTest<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  

select * from t_blog where id in  

     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  

            #{item}  

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
</code></pre>
<p>测试代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dynamicForeachTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    SqlSession session <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    BlogMapper blogMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> blogMapper<span class="token punctuation">.</span><span class="token function">dynamicForeachTest</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre>
<p>注：  在mybatis中的SQL语句结尾不能加“；”，这样会导致mybatis无法识别字符；导致SQL语句的语法错误；出现 java.sql.SQLSyntaxErrorException:ORA-00911: 无效字符的错误。的异常。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=480793923&amp;auto=1&amp;height=66"></iframe>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Date与String的相互转换</title>
    <url>/2019/01/20/datetostring/</url>
    <content><![CDATA[<p>我们在注册网站的时候，往往需要填写个人信息，如姓名，年龄，出生日期等，在页面上的出生日期的值传递到后台的时候是一个字符串，而我们存入数据库的时候确需要一个日期类型，反过来，在页面上显示的时候，需要从数据库获取出生日期，此时该类型为日期类型，然后需要将该日期类型转为字符串显示在页面上，Java的API中为我们提供了日期与字符串相互转运的类DateForamt。DateForamt是一个抽象类，所以平时使用的是它的子类SimpleDateFormat。SimpleDateFormat有4个构造函数，最经常用到是第二个。</p>
<p><img src="/img/16.png" alt="本图片来自网络"></p>
<p>构造函数中pattern为时间模式，具体有什么模式，API中有说明，如下</p>
<p><img src="/img/17.png" alt="本图片来自网络"></p>
<p>1、<strong><code>日期转字符串（格式化）</code></strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Date2String</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>输出结果:<br>1 2016-10-24<br>2 2016-10-24 21:59:06<br>3 2016年10月24日 21:59:06</p>
<p>2、<strong><code>字符串转日期（解析）</code></strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String2Date</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>
        String string <span class="token operator">=</span> <span class="token string">"2016-10-24 21:59:06"</span><span class="token punctuation">;</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>输出结果<br>Mon Oct 24 21:59:06 CST 2016</p>
<p>在字符串转日期操作时，需要注意给定的模式必须和给定的字符串格式匹配，否则会抛出java.text.ParseException异常，例如下面这个就是错误的，字符串中并没有给出时分秒，那么SimpleDateFormat当然无法给你凭空解析出时分秒的值来</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String2Date</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>
        String string <span class="token operator">=</span> <span class="token string">"2016-10-24"</span><span class="token punctuation">;</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>不过，给定的模式比字符串少则可以</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String2Date</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>
        String string <span class="token operator">=</span> <span class="token string">"2016-10-24 21:59:06"</span><span class="token punctuation">;</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>输出结果:<br>Mon Oct 24 00:00:00 CST 2016</p>
<p>可以看出时分秒都是0，没有被解析，这是可以的。</p>
<p>链接： <a href="https://www.cnblogs.com/huangminwen/p/5994846.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangminwen/p/5994846.html</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=440241077&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Date</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>java中Integer转Float总结以及BigDecimal 转float</title>
    <url>/2019/01/20/integertofloat/</url>
    <content><![CDATA[<p>一.<strong>先将Integer转化成int类型，在强制转float类型()</strong></p>
<p>例:</p>
<pre class=" language-java"><code class="language-java">Integer str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">float</span> rr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>
</code></pre>
<p>输出结果为:20.0</p>
<p>二.<strong>将Integer类型转成String类型,在转化成float类型</strong></p>
<p>例:</p>
<pre class=" language-java"><code class="language-java">   Integer str <span class="token operator">=</span> <span class="token number">2056</span><span class="token punctuation">;</span>

    String format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">float</span> rr <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
<p>输出结果为20.0</p>
<p>三.<strong>BigDecimal 转float</strong></p>
<p>例:</p>
<pre class=" language-java"><code class="language-java">   BigDecimal tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

    <span class="token keyword">float</span> kk <span class="token operator">=</span> tt<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>输出结果:50.0</p>
<p>以上均本人亲自测试，如不符合，请仔细检查</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1311388007&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Integer</tag>
        <tag>Float</tag>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>Statement cancelled due to timeout or client request</title>
    <url>/2019/01/20/mysql-two/</url>
    <content><![CDATA[<pre class=" language-java"><code class="language-java">Caused by<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>MySQLTimeoutException<span class="token operator">:</span> Statement cancelled due to timeout or client request 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>MysqlIO<span class="token punctuation">.</span><span class="token function">sqlQueryDirect</span><span class="token punctuation">(</span>MysqlIO<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2303</span><span class="token punctuation">)</span> 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ConnectionImpl<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span>ConnectionImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2696</span><span class="token punctuation">)</span> 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">.</span><span class="token function">executeInternal</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2105</span><span class="token punctuation">)</span> 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2398</span><span class="token punctuation">)</span> 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2316</span><span class="token punctuation">)</span> 
at com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2301</span><span class="token punctuation">)</span> 
at org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>CachedPreparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>CachedPreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">)</span> 

at org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>WrappedPreparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>WrappedPreparedStatement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">251</span><span class="token punctuation">)</span> 

</code></pre>
<p><code>解决方法</code>:</p>
<p>设置defaultStatementTimeout=”60”<br>在sqlmap.xml中设置，表示60s</p>
<pre><code>    &lt;settings cacheModelsEnabled="false" enhancementEnabled="true"
lazyLoadingEnabled="false" errorTracingEnabled="true" maxRequests="32"
maxSessions="10" maxTransactions="5" useStatementNamespaces="true" defaultStatementTimeout="60" /&gt;

</code></pre><p>链接: <a href="http://blog.csdn.net/u014698348/article/details/53409786" target="_blank" rel="noopener">http://blog.csdn.net/u014698348/article/details/53409786</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1320938750&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>关于字符串重复调用转换的优化方法</title>
    <url>/2019/01/20/stringtoconvert/</url>
    <content><![CDATA[<p>我们通常如果数据库定义的是int类型，但是需求是页面显示的是字符串，如果是多个方法，就需要重复调用，所以为此，我们提供了枚举类型来优化，</p>
<p>例子如下:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>singleCenter<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token keyword">switch</span> <span class="token punctuation">(</span>singleCenter<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">case</span> <span class="token string">"0"</span><span class="token operator">:</span>
                                listStatus<span class="token operator">=</span><span class="token string">"已接单"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>
                                listStatus<span class="token operator">=</span><span class="token string">"未处理"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>
                                listStatus<span class="token operator">=</span><span class="token string">"已拒绝"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>
                                listStatus<span class="token operator">=</span><span class="token string">"代接单"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>
                                listStatus<span class="token operator">=</span><span class="token string">"代下单"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            singleCenter<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>listStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
</code></pre>
<p>优化方法:<br>定义一个枚举类:将你需要转换的字符串如下显示，然后调用下面的<code>getTypeValue()</code>方法，再在你需要转换的代码中调用该方法就OK了</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> BusinessTypeEnum <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//这里就是定义index对应的value</span>
    <span class="token function">TYPE_1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"海运进口整箱"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"海运进口拼箱"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"海运出口整箱"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"海运出口拼箱"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_5</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"空运进口"</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span><span class="token function">TYPE_6</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"空运出口"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_7</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"集装箱出口"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_8</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"集装箱进口"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_9</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"多式联运"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_10</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"集装箱"</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span><span class="token function">TYPE_11</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"散货船"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_12</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"干线运输"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_13</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"零担运输"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TYPE_14</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"仓储运输"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">BusinessTypeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//主要通过这个方法来去value</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getTypeValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>BusinessTypeEnum e <span class="token operator">:</span> BusinessTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=461375949&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>String字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>win10系统的mysql下载安装(详细内容)以及出现的一系列问题解决方案</title>
    <url>/2019/01/20/mysql/</url>
    <content><![CDATA[<p>1.解压文件</p>
<p>2.安装mysql</p>
<p>3.配置环境变量</p>
<p>鼠标单击我的电脑——&gt;属性——&gt;高级系统设置——&gt;环境变量</p>
<p>(1).添加用户变量<br><img src="/img/13.png" alt="本图片来自网络"></p>
<p>(2).设置系统变量<br><img src="/img/14.png" alt="本图片来自网络"><br><img src="/img/15.png" alt="本图片来自网络"></p>
<p>3.打开cmd，使用cmd管理员身份运行，输入命令行mysqld –initialize初始化data文件夹,成功之后，安装mysql服务,输入命令行mysql -install,成功之后，启动mysql服务,</p>
<p>4.输入net start mysql启动服务，启动成功之后输入 mysql –u root,运行mysql命令</p>
<p>5.mysql&gt;show databases;<br>    mysql&gt;use mysql;<br>    mysql&gt; UPDATE user SET authentication_string = PASSWORD(‘123456’) WHERE user = ‘root’;</p>
<p> 查看修改的密码:</p>
<p>select host,user,password from mysql.user;<br>然后刷新，输入 mysql&gt;FLUSH PRIVILEGES;<br>最后输入quit;退出,</p>
<p>6.测试重新登录<br>停止服务:net stop mysql,重新启动,输入命令行mysql -u root -p<br>,输入密码就OK了</p>
<p>7.<strong><code>关于安装出现的一系列问题及解决方案</code></strong></p>
<p>(1) 安装初始化的时候没有data文件夹，这个问题我自己也尝试了很多，没用，最后自己选了一个较低的版本才可以，如果哪位解决了欢迎指导一下,我最后选的版本是mysql-5.5.44-winx64版本的</p>
<p>(2)ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)，当你设置了密码之后，你不能使用mysql -u root登录，需要输入mysql -u root -p进行密码登录，如果密码忘记，<br>需要在停止服务,具体详情可看这<a href="http://blog.csdn.net/u012903926/article/details/46405551" target="_blank" rel="noopener">http://blog.csdn.net/u012903926/article/details/46405551</a></p>
<p>8.卸载重装mysql</p>
<p>(1)bin/输入命令行mysqld -remove</p>
<p>(2)彻底删除，打开注册表，win+r,打开regidet，删除以下注册表：</p>
<ul>
<li>HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Applications/MySQL </li>
<li>HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Applications/MySQL</li>
<li>HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Applications/MySQL （在我的电脑里是没有这条信息的） </li>
</ul>
<p>(3)</p>
<p>网上的一些方法基本就是做到这一步就搞定了，然而我的却还是不行，索性在C盘中打开搜索‘mysql’相关字眼，居然还找到了，在这个路径下的：</p>
<p>C:\ProgramData\MySQL</p>
<p>尝试着删除之后，安装成功。</p>
<p>结论就是：<code>卸载东西一定要删除干净！</code></p>
<p>另外，C:\ProgramData下存储的是程序的数据，请不要随意删除这个文件夹下的文件。补充：刚试验了下，卸载mysql后，仅删除安装路径文件和ProgramData的mysql文件也可以安装成功了。</p>
<p>链接： <a href="https://www.cnblogs.com/honor-007/p/honor.html" target="_blank" rel="noopener">https://www.cnblogs.com/honor-007/p/honor.html</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446945324&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>破解 Navicat Premium 12</title>
    <url>/2019/01/20/navicat/</url>
    <content><![CDATA[<p>1、软件下载</p>
<p>（1）Navicat官网：<a href="https://www.navicat.com/en/products" target="_blank" rel="noopener">https://www.navicat.com/en/products</a></p>
<p>（2）网盘下载：<a href="http://pan.baidu.com/s/1bpm2BjL" target="_blank" rel="noopener">http://pan.baidu.com/s/1bpm2BjL</a>   密码：mwmm   （网盘版本：Navicat Premium 12.0.11，简体中文，64位）</p>
<p>2、语言设置：navicat 语言选择跟 软件的版本相关，也就说一个版本的软件仅适用于一种语言，所以选择合适的版本将直接关乎后期使用的“手感”<br>在语言选择上 Navicat 官网的做法特别坑爹，在官网首页就要选择相应的语言，而不能够在具体的下载页选择相应的语言版本，如图：</p>
<p>3、版本选择：官网提供了多达6种数据库语言的版本选择，分别为 MySQL、Oracle、SQL Server、MariaDB、PostgreSQL 和 SQLite，你可以选择适合的版本下载，也可以使用涵盖6种语言的综合版本 Navicat Premium,这里当然是推荐使用：Navicat Premium 啦。。</p>
<p>4、破解 Navicat Premium 12</p>
<p>（1）<strong>破解补丁下载，网盘</strong>：</p>
<pre><code>链接：https://pan.baidu.com/s/1mhLIjQ4   密码：avru

链接：https://pan.baidu.com/s/1c2eWtcW   密码：dtaf

或者针对网盘版本 Navicat Premium 12.0.11，简体中文，64位的：

链接：http://pan.baidu.com/s/1mh9AC7Q   密码：y52p
</code></pre><p>（2）<strong>破解方法</strong>：</p>
<p>将解压出来的 version.dll 和 payload.bin 扔到软件安装根目录即可，具体细节嘛~</p>
<pre><code> @jixun66：https://www.52pojie.cn/thread-618718-1-1.html
</code></pre><p>（3）<strong>特别说明</strong>：</p>
<p>本方法实际上并没有真正意义上的添加注册码，而是在软件启动时引入注册验证之前添加访问拦截，实现了跳过注册验证而直接使用软件的方法，原则上与“破解”并无二致</p>
<p>链接： <a href="http://blog.csdn.net/MAOZEXIJR/article/details/77773860?locationNum=7&amp;fps=1" target="_blank" rel="noopener">http://blog.csdn.net/MAOZEXIJR/article/details/77773860?locationNum=7&amp;fps=1</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=480823627&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC之@RequestBody, @ResponseBody 详解</title>
    <url>/2019/01/20/springmvc/</url>
    <content><![CDATA[<p>之前练习springboot+mybatis实现Restful服务，给予HTTP/JSON格式传输，但是在新增的时候出现一个维妮塔，就是我传的参数到数据库为Null值，我仔细检查了个个层的代码，后面发现实在Controller中将@Requestbody写成了@ResponseBody,因为我这里只需直接添加数据，使用postman工具进行测试，不需要返回值，所以导致出错，下面就说下这两者的区别吧。</p>
<h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p><strong>@RequestBody</strong>:</p>
<ul>
<li><p><code>作用</code>： </p>
<ul>
<li><p>该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上；</p>
</li>
<li><p>再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上。</p>
</li>
</ul>
</li>
</ul>
<p>使用时机：</p>
<p>A) GET、POST方式提时， 根据request header Content-Type的值来判断:</p>
<ul>
<li><p>application/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；</p>
</li>
<li><p>multipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；</p>
</li>
<li><p>其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，必须使用@RequestBody来处理）；</p>
</li>
</ul>
<p>B) PUT方式提交时， 根据request header Content-Type的值来判断:</p>
<ul>
<li><p>application/x-www-form-urlencoded， 必须；</p>
</li>
<li><p>multipart/form-data, 不能处理；</p>
</li>
<li><p>其他格式， 必须；</p>
</li>
</ul>
<p>说明：request的body部分的数据编码格式由header部分的Content-Type指定；</p>
<p><strong>@ResponseBody</strong>:<br><code>作用</code>： </p>
<p>该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>
<p><code>使用时机</code>：</p>
<p>返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>
<p><strong>HttpMessageConverter</strong>:</p>
<pre class=" language-java"><code class="language-java">
<span class="token operator">*</span> Strategy <span class="token keyword">interface</span> <span class="token class-name">that</span> specifies a converter that can convert from and to HTTP requests and responses<span class="token punctuation">.</span> 
 <span class="token operator">*</span> 
 <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> Arjen Poutsma 
 <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> Juergen Hoeller 
 <span class="token operator">*</span> <span class="token annotation punctuation">@since</span> <span class="token number">3.0</span> 
 <span class="token operator">*</span><span class="token operator">/</span>  
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  

    <span class="token comment" spellcheck="true">/** 
     * Indicates whether the given class can be read by this converter. 
     * @param clazz the class to test for readability 
     * @param mediaType the media type to read, can be {@code null} if not specified. 
     * Typically the value of a {@code Content-Type} header. 
     * @return {@code true} if readable; {@code false} otherwise 
     */</span>  
    <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> MediaType mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">/** 
     * Indicates whether the given class can be written by this converter. 
     * @param clazz the class to test for writability 
     * @param mediaType the media type to write, can be {@code null} if not specified. 
     * Typically the value of an {@code Accept} header. 
     * @return {@code true} if writable; {@code false} otherwise 
     */</span>  
    <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> MediaType mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">/** 
     * Return the list of {@link MediaType} objects supported by this converter. 
     * @return the list of supported media types 
     */</span>  
    List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">/** 
     * Read an object of the given type form the given input message, and returns it. 
     * @param clazz the type of object to return. This type must have previously been passed to the 
     * {@link #canRead canRead} method of this interface, which must have returned {@code true}. 
     * @param inputMessage the HTTP input message to read from 
     * @return the converted object 
     * @throws IOException in case of I/O errors 
     * @throws HttpMessageNotReadableException in case of conversion errors 
     */</span>  
    T <span class="token function">read</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> HttpInputMessage inputMessage<span class="token punctuation">)</span>  
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotReadableException<span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">/** 
     * Write an given object to the given output message. 
     * @param t the object to write to the output message. The type of this object must have previously been 
     * passed to the {@link #canWrite canWrite} method of this interface, which must have returned {@code true}. 
     * @param contentType the content type to use when writing. May be {@code null} to indicate that the 
     * default content type of the converter must be used. If not {@code null}, this media type must have 
     * previously been passed to the {@link #canWrite canWrite} method of this interface, which must have 
     * returned {@code true}. 
     * @param outputMessage the message to write to 
     * @throws IOException in case of I/O errors 
     * @throws HttpMessageNotWritableException in case of conversion errors 
     */</span>  
    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> MediaType contentType<span class="token punctuation">,</span> HttpOutputMessage outputMessage<span class="token punctuation">)</span>  
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotWritableException<span class="token punctuation">;</span>  

<span class="token punctuation">}</span>

</code></pre>
<p>该接口定义了四个方法，分别是读取数据时的 canRead(), read() 和 写入数据时的canWrite(), write()方法。</p>
<p>在使用 &lt;mvc:annotation-driven /&gt;标签配置时，默认配置了<code>RequestMappingHandlerAdapter（注意是RequestMappingHandlerAdapter不是AnnotationMethodHandlerAdapter</code>,详情查看Spring </p>
<pre><code>ByteArrayHttpMessageConverter converts byte arrays.  

StringHttpMessageConverter converts strings.  

ResourceHttpMessageConverter converts to/from org.springframework.core.io.Resource for all media types.  

SourceHttpMessageConverter converts to/from a javax.xml.transform.Source.  

FormHttpMessageConverter converts form data to/from a MultiValueMap&lt;String, String&gt;.  

Jaxb2RootElementHttpMessageConverter converts Java objects to/from XML — added if JAXB2 is present on the classpath.  

MappingJacksonHttpMessageConverter converts to/from JSON — added if Jackson is present on the classpath.  

AtomFeedHttpMessageConverter converts Atom feeds — added if Rome is present on the classpath.  

RssChannelHttpMessageConverter converts RSS feeds — added if Rome is present on the classpath.

</code></pre><p><code>ByteArrayHttpMessageConverter: 负责读取二进制格式的数据和写出二进制格式的数据</code>；</p>
<p><code>StringHttpMessageConverter：   负责读取字符串格式的数据和写出二进制格式的数据</code>；</p>
<p>ResourceHttpMessageConverter：负责读取资源文件和写出资源文件数据； </p>
<p>FormHttpMessageConverter：       负责读取form提交的数据（能读取的数据格式为 application/x-www-form-urlencoded，不能读取multipart/form-data格式数据）；负责写入application/x-www-from-urlencoded和multipart/form-data格式的数据；</p>
<p>MappingJacksonHttpMessageConverter:  负责读取和写入json格式的数据；</p>
<p>SouceHttpMessageConverter：负责读取和写入 xml 中javax.xml.transform.Source定义的数据；</p>
<p>Jaxb2RootElementHttpMessageConverter:  负责读取和写入xml 标签格式的数据；</p>
<p>AtomFeedHttpMessageConverter:              负责读取和写入Atom格式的数据；</p>
<p>RssChannelHttpMessageConverter:           负责读取和写入RSS格式的数据； </p>
<p><code>当使用@RequestBody和@ResponseBody注解时，RequestMappingHandlerAdapter就使用它们来进行读取或者写入相应格式的数据</code>。</p>
<p><strong><code>补充</code></strong>：<br>MappingJacksonHttpMessageConverter 调用了 objectMapper.writeValue(OutputStream stream, Object)方法，使用@ResponseBody注解返回的对象就传入Object参数内。若返回的对象为已经格式化好的json串时，不使用@RequestBody注解，而应该这样处理：<br>1、response.setContentType(“application/json; charset=UTF-8”);<br>2、response.getWriter().print(jsonStr);<br>直接输出到body区，然后的视图为void。</p>
<p>链接: <a href="http://blog.csdn.net/kobejayandy/article/details/12690555" target="_blank" rel="noopener">http://blog.csdn.net/kobejayandy/article/details/12690555</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=520511377&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>转载:关于对REST的基本认识和理解</title>
    <url>/2019/01/20/rest/</url>
    <content><![CDATA[<blockquote>
<p>让努力成为一种习惯。</p>
</blockquote>
<h4 id="1-什么是-REST"><a href="#1-什么是-REST" class="headerlink" title="1.什么是 REST?"></a>1.什么是 REST?</h4><p>REST 是属于 WEB 自身的一种架构风格，是在 HTTP 1.1 规范下实现的。Representational State Transfer 全称翻译为表现层状态转化。Resource：资源。比如 newsfeed；Representational：表现形式，比如用JSON，富文本等；State Transfer：状态变化。通过HTTP 动作实现。<br>REST是所有Web应用都应该遵守的架构设计指导原则。当然，REST并不是法律，违反了REST的指导原则，仍然能够实现应用的功能。但是违反了REST的指导原则，会付出很多代价，特别是对于大流量的网站而言。</p>
<h4 id="2-REST架构风格最重要的架构约束有6个："><a href="#2-REST架构风格最重要的架构约束有6个：" class="headerlink" title="2.REST架构风格最重要的架构约束有6个："></a>2.REST架构风格最重要的架构约束有6个：</h4><ul>
<li><code>客户-服务器（Client-Server）</code>:<ul>
<li>通信只能由客户端单方面发起，表现为请求-响应的形式。</li>
</ul>
</li>
<li><code>无状态（Stateless）</code>:<ul>
<li>通信的会话状态（Session State）应该全部由客户端负责维护。</li>
</ul>
</li>
</ul>
<ul>
<li><code>缓存（Cache）</code>:<ul>
<li>响应内容可以在通信链的某处被缓存，以改善网络效率。</li>
</ul>
</li>
<li><code>统一接口（Uniform Interface）</code><ul>
<li>通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。</li>
</ul>
</li>
<li><code>分层系统（Layered System）</code><ul>
<li>通过限制组件的行为（即，每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。</li>
</ul>
</li>
<li><code>按需代码（Code-On-Demand，可选）</code> <ul>
<li>支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。</li>
</ul>
</li>
</ul>
<h4 id="3-要深入理解REST，需要理解REST的五个关键词："><a href="#3-要深入理解REST，需要理解REST的五个关键词：" class="headerlink" title="3.要深入理解REST，需要理解REST的五个关键词："></a>3.要深入理解REST，需要理解REST的五个关键词：</h4><p>1.<code>资源（Resource）</code><br>2.<code>资源的表述（Representation）</code><br>3.<code>状态转移（State Transfer）</code><br>4.<code>统一接口（Uniform Interface）</code><br>5.<code>超文本驱动（Hypertext Driven）</code><br>6.<code>什么是资源？</code>:<br><code>资源是一种看待服务器的方式</code>，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<p>什么是资源的表述？</p>
<p>资源的表述是<code>一段对于资源在某个特定时刻的状态的描述</code>。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<p>什么是状态转移？</p>
<p>状态转移（state transfer）与状态机中的状态迁移（state transition）的含义是不同的。状态转移说的是：<code>在客户端和服务器端之间转移（transfer）代表资源状态的表述</code>。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<p>什么是统一接口？</p>
<p>REST要求，<code>必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作</code>。以HTTP/1.1协议为例，HTTP/1.1协议定义了一个操作资源的统一接口，主要包括以下内容：</p>
<ul>
<li><p>7个HTTP方法：GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS</p>
</li>
<li><p>HTTP头信息（可自定义）</p>
</li>
<li><p>HTTP响应状态代码（可自定义）</p>
</li>
<li><p>一套标准的内容协商机制</p>
</li>
<li><p>一套标准的缓存机制</p>
</li>
<li><p>一套标准的客户端身份认证机制</p>
</li>
</ul>
<p>REST还要求，对于资源执行的操作，其操作语义必须由HTTP消息体之前的部分完全表达，不能将操作语义封装在HTTP消息体内部。这样做是为了提高交互的可见性，以便于通信链的中间组件实现缓存、安全审计等等功能。</p>
<p>什么是超文本驱动？</p>
<p>“超文本驱动”又名“将超媒体作为应用状态的引擎”（Hypermedia As The Engine Of Application State，来自Fielding博士论文中的一句话，缩写为HATEOAS）。<code>将Web应用看作是一个由很多状态（应用状态）组成的有限状态机</code>。资源之间通过超链接相互关联，超链接既代表资源之间的关系，也代表可执行的状态迁移。在超媒体之中不仅仅包含数据，还包含了状态迁移的语义。以超媒体作为引擎，驱动Web应用的状态迁移。通过超媒体暴露出服务器所提供的资源，服务器提供了哪些资源是在运行时通过解析超媒体发现的，而不是事先定义的。从面向服务的角度看，超媒体定义了服务器所提供服务的协议。客户端应该依赖的是超媒体的状态迁移语义，而不应该对于是否存在某个URI或URI的某种特殊构造方式作出假设。一切都有可能变化，只有超媒体的状态迁移语义能够长期保持稳定。</p>
<h4 id="4-从架构风格的抽象高度来看，常见的分布式应用架构风格有三种："><a href="#4-从架构风格的抽象高度来看，常见的分布式应用架构风格有三种：" class="headerlink" title="4.从架构风格的抽象高度来看，常见的分布式应用架构风格有三种："></a>4.从架构风格的抽象高度来看，常见的分布式应用架构风格有三种：</h4><ul>
<li><p><code>分布式对象（Distributed Objects，简称DO）</code></p>
<ul>
<li>架构实例有CORBA/RMI/EJB/DCOM/.NET Remoting等等</li>
</ul>
</li>
<li><p><code>远程过程调用（Remote Procedure Call，简称RPC）</code></p>
<ul>
<li>架构实例有SOAP/XML-RPC/Hessian/Flash AMF/DWR等等</li>
</ul>
</li>
<li><p><code>分布式对象（Distributed Objects，简称DO）</code></p>
</li>
</ul>
<p>架构实例有HTTP/WebDAV</p>
<p>DO和RPC这两种架构风格在企业应用中非常普遍，而REST则是Web应用的架构风格，它们之间有非常大的差别。</p>
<p><strong><em><code>REST与DO的差别在于</code></em></strong>：</p>
<ul>
<li><p>REST支持抽象（即建模）的工具是资源，DO支持抽象的工具是对象。在不同的编程语言中，对象的定义有很大差别，所以DO风格的架构通常都是与某种编程语言绑定的。跨语言交互即使能实现，实现起来也会非常复杂。而REST中的资源，则完全中立于开发平台和编程语言，可以使用任何编程语言来实现。</p>
</li>
<li><p>DO中没有统一接口的概念。不同的API，接口设计风格可以完全不同。DO也不支持操作语义对于中间组件的可见性。</p>
</li>
<li><p>DO中没有使用超文本，响应的内容中只包含对象本身。REST使用了超文本，可以实现更大粒度的交互，交互的效率比DO更高。</p>
</li>
<li><p>REST支持数据流和管道，DO不支持数据流和管道。</p>
</li>
<li><p>DO风格通常会带来客户端与服务器端的紧耦合。在三种架构风格之中，DO风格的耦合度是最大的，而REST的风格耦合度是最小的。REST松耦合的源泉来自于统一接口+超文本驱动。</p>
</li>
</ul>
<p><strong><em><code>REST与RPC的差别在于</code></em></strong>：</p>
<ul>
<li><p>REST支持抽象的工具是资源，RPC支持抽象的工具是过程。REST风格的架构建模是以名词为核心的，RPC风格的架构建模是以动词为核心的。简单类比一下，REST是面向对象编程，RPC则是面向过程编程。</p>
</li>
<li><p>RPC中没有统一接口的概念。不同的API，接口设计风格可以完全不同。RPC也不支持操作语义对于中间组件的可见性。</p>
</li>
<li><p>RPC中没有使用超文本，响应的内容中只包含消息本身。REST使用了超文本，可以实现更大粒度的交互，交互的效率比RPC更高。</p>
</li>
<li><p>REST支持数据流和管道，RPC不支持数据流和管道。</p>
</li>
<li><p>因为使用了平台中立的消息，RPC风格的耦合度比DO风格要小一些，但是RPC风格也常常会带来客户端与服务器端的紧耦合。支持统一接口+超文本驱动的REST风格，可以达到最小的耦合度。</p>
</li>
</ul>
<p><strong>比较了三种架构风格之间的差别之后，从面向实用的角度来看，REST架构风格可以为Web开发者带来三方面的利益</strong>:</p>
<ul>
<li><p><code>简单性</code></p>
<ul>
<li>采用REST架构风格，对于开发、测试、运维人员来说，都会更简单。可以充分利用大量HTTP服务器端和客户端开发库、Web功能测试/性能测试工具、HTTP缓存、HTTP代理服务器、防火墙。这些开发库和基础设施早已成为了日常用品，不需要什么火箭科技（例如神奇昂贵的应用服务器、中间件）就能解决大多数可伸缩性方面的问题。</li>
</ul>
</li>
<li><p><code>可伸缩性</code></p>
<ul>
<li>充分利用好通信链各个位置的HTTP缓存组件，可以带来更好的可伸缩性。其实很多时候，在Web前端做性能优化，产生的效果不亚于仅仅在服务器端做性能优化，但是HTTP协议层面的缓存常常被一些资深的架构师完全忽略掉。</li>
</ul>
</li>
<li><p><code>松耦合</code></p>
<ul>
<li>统一接口+超文本驱动，带来了最大限度的松耦合。允许服务器端和客户端程序在很大范围内，相对独立地进化。对于设计面向企业内网的API来说，松耦合并不是一个很重要的设计关注点。但是对于设计面向互联网的API来说，松耦合变成了一个必选项，不仅在设计时应该关注，而且应该放在最优先位置。</li>
</ul>
</li>
</ul>
<p>链接：<a href="http://www.infoq.com/cn/articles/understanding-restful-style" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/understanding-restful-style</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34072193&amp;auto=1&amp;height=66"></iframe>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>REST</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea配置tomcat运行成功后报404</title>
    <url>/2018/08/16/idea-tomcat/</url>
    <content><![CDATA[<p>解决办法：</p>
<h4 id="1-将Tomcat的首页的工程部署到Tomcat服务器上，部署步骤如下："><a href="#1-将Tomcat的首页的工程部署到Tomcat服务器上，部署步骤如下：" class="headerlink" title="1.将Tomcat的首页的工程部署到Tomcat服务器上，部署步骤如下："></a>1.将Tomcat的首页的工程部署到Tomcat服务器上，部署步骤如下：</h4><ul>
<li>选择菜单栏“Run–&gt;Edit Configuration…–&gt;Deployment”,选择右上角绿色“+”，选择“External Source…”，将Apache-tomcat的webapps目录下的ROOT文件夹选中，点击OK，及完成Tomcat的首页的工程的部署。选择ROOT文件后右侧Application Context 可不填写，默认即可。</li>
</ul>
<p><img src="/img/2.png" alt=""><br><img src="/img/3.png" alt=""></p>
<ul>
<li><p>选择菜单栏“Run–&gt;Edit Configuration…–&gt;Deployment”,选择右上角绿色“+”，选择“Artifact…”，选择exploded项，点击OK。<br><img src="/img/4.png" alt=""></p>
</li>
<li><p>右侧Application Context 可填写为访问URL名称。<br><img src="/img/5.png" alt=""></p>
</li>
</ul>
<p>再次运行项目，项目成功运行啦。</p>
<p>这次再访问<a href="http://localhost:8080/，熟悉的猫咪出来了。" target="_blank" rel="noopener">http://localhost:8080/，熟悉的猫咪出来了。</a><br><img src="/img/6.png" alt=""></p>
<h4 id="2-将tomcat中的catalina-bat打开，如果之前设置了set-JAVA-POST-去掉，就OK了，这里的原因是因为Idea会给tomcat配置参数，如果之前有，就会覆盖IDea的，导致冲突"><a href="#2-将tomcat中的catalina-bat打开，如果之前设置了set-JAVA-POST-去掉，就OK了，这里的原因是因为Idea会给tomcat配置参数，如果之前有，就会覆盖IDea的，导致冲突" class="headerlink" title="2.将tomcat中的catalina.bat打开，如果之前设置了set JAVA_POST,去掉，就OK了，这里的原因是因为Idea会给tomcat配置参数，如果之前有，就会覆盖IDea的，导致冲突"></a>2.<strong>将tomcat中的catalina.bat打开，如果之前设置了set JAVA_POST,去掉，就OK了，这里的原因是因为Idea会给tomcat配置参数，如果之前有，就会覆盖IDea的，导致冲突</strong></h4><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=453507852&amp;auto=1&amp;height=66"></iframe>




<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis自动生成插件对数据库类型为text的处理</title>
    <url>/2018/08/16/mybatis-generator/</url>
    <content><![CDATA[<p>如果数据库中的字段为text或者blob这种大文本类型，在使用MybatisGenerator工具自动生成代码的时候会将其进行特殊处理（一个新的sql片段），结果会导致无法对该字段的值进行操作。 </p>
<p>解决方式： </p>
<ul>
<li><p>方法1：<strong>改java代码，如下图所示，使用自动生成的对应方法。 </strong><br><img src="https://img-blog.csdn.net/20171229093347836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzU4MzU2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
<li><p>方法2：修改generatorConfig.xml配置文件，其中column为你需要覆盖的数据库字段<br><img src="https://img-blog.csdn.net/20171229093541359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzU4MzU2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mock_config<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MockConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columnOverride</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>backon_result<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mybatis中resultType返回null的问题</title>
    <url>/2018/08/16/mybatis-two/</url>
    <content><![CDATA[<ul>
<li><p>1.resultType 就是返回的类型 </p>
</li>
<li><p>2.resultMap 返回的是一个结果集，这个结果集一般是用过resultMap节点来配置的，相应的type一般是一个Model。<br>而resultType则就是类型，包括了，int,sring,以及类似model这样的Object类型。 </p>
</li>
<li><p>3.需要注意的是<strong>如果把返回resultType结果写成resultMap节点配置出来的类似 ModelMap这样的结果集，就会在BuildSession的时候抛空指针。 </strong><br>而IBATIS只是会提示NullPointer，必须加到源代码调试放能看到会提示ClassNotFound，ModelMap找不到。 </p>
</li>
<li><p>所以，如果是创建SqlSession的时候出错，提示空指针，那么错误的几种可能就是配置文件的错误<br>1.SalMapConfig 里面文件路径,文件名<br>2.Model.xml 里面resultMap映射的时候名字写错。<br>3.Model.xml 里面的参数错误，例如返回ModelMap写成了model，返回的resultType写成了ModelMap </p>
</li>
<li><p>4.其余的可能都是拼写的错误。</p>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>idea2017.3创建springboot项目报Unsupported major.minor version 52.0的解决方案</title>
    <url>/2018/08/16/springboot/</url>
    <content><![CDATA[<p>如果你的jdk是1.7并且在搭建springboot项目时报如上错，请按此步骤，已测试并通过</p>
<p>解决方法步骤：</p>
<h3 id="将java版本改为1-7"><a href="#将java版本改为1-7" class="headerlink" title="将java版本改为1.7"></a>将java版本改为1.7</h3><p><img src="/img/7.png" alt=""></p>
<h3 id="将springboot的版本改为1-4-7，默认的是2-0-1，这里为啥要改成1-4-7因为2-0-1内置的JDK是1-8"><a href="#将springboot的版本改为1-4-7，默认的是2-0-1，这里为啥要改成1-4-7因为2-0-1内置的JDK是1-8" class="headerlink" title="将springboot的版本改为1.4.7，默认的是2.0.1，这里为啥要改成1.4.7因为2.0.1内置的JDK是1.8"></a>将springboot的版本改为1.4.7，默认的是2.0.1，这里为啥要改成1.4.7因为2.0.1内置的JDK是1.8</h3><p><img src="/img/8.png" alt=""></p>
<h3 id="点击file-settings-java-compiler选择1-7"><a href="#点击file-settings-java-compiler选择1-7" class="headerlink" title="点击file-settings-java compiler选择1.7"></a>点击file-settings-java compiler选择1.7</h3><p><img src="/img/9.png" alt=""></p>
<h3 id="file-project-structure选择Project的JDK版本，Modules的JDK版本，以及SDK版本"><a href="#file-project-structure选择Project的JDK版本，Modules的JDK版本，以及SDK版本" class="headerlink" title="file-project structure选择Project的JDK版本，Modules的JDK版本，以及SDK版本"></a>file-project structure选择Project的JDK版本，Modules的JDK版本，以及SDK版本</h3><p><img src="/img/10.jpg" alt=""></p>
<p><img src="/img/11.jpg" alt=""></p>
<p><img src="/img/12.jpg" alt=""></p>
<p>5.再重新运行DemoApplication就OK了</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Idea</tag>
        <tag>springBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>张嘉倪：我要嫁的不是王子，而是永远拿我当小公主的人</title>
    <url>/2018/07/21/zhangjiani/</url>
    <content><![CDATA[<p>1.</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-a4f807ea020f82db.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="本图片来自网络"></p>
<p>近日，张嘉倪因出演电视剧《温暖的弦》而再次大火，老公买超也上了微博热搜。</p>
<p>据悉，张嘉倪老公不仅是一位超级富二代，还有自己独立的事业——一家大型婚礼及活动策划公司执行董事，跟国民老公王思聪是一个圈子的。188cm的身高，颜值爆表，名副其实的高富帅！</p>
<p>当年张嘉倪参加一个朋友的婚礼，那次婚礼的策划人正是买超，买超对张嘉倪一见钟情，随后便对其展开了热烈的追求，张嘉倪也拒绝过买超两次，不过最终还是被买超的执着打动了。</p>
<p>在张嘉倪27岁生日当天买超求婚成功。他是很多女生心目中的白马王子，可是张嘉倪却说：我要嫁的不是王子，而是永远拿我当小公主的人。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-a1e503492aa8e320.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/535" alt="本图片来自网络"></p>
<p>两人登记结婚的日子是5月27日，那天是买超的生日，也是取了5.27的谐音“我爱妻”。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-92f79c89ecc01734.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="本图片来自网络"></p>
<p>三年过去了，如今两人有了一个2岁的可爱儿子，张嘉倪又怀了二胎，生活幸福甜蜜。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-57adb72b11f59194.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="本图片来自网络"></p>
<p>生活中的买超还是个十足的奶爸， 微博里除了篮球就是老婆和孩子，张嘉倪的这份幸福让网友看在眼里，不禁感叹：紫菱终于遇到了现实版的费云帆。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-c3fae84c0779f9a4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="本图片来自网络"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-0df4df5b3eecb1ba.jpg?imageMogr2/auto-orient/" alt="本图片来自网络"></p>
<p><strong> 婚姻幸福的秘诀：不管他是不是王子，但一定要把你当成公主来宠。</strong></p>
<p>2.</p>
<p>前几天哈里王子大婚的消息又在朋友圈刷屏了。</p>
<p>这位英国王位第五顺位继承人，迎娶的是美国女演员梅根。</p>
<p>梅根出身贫民，母亲是美国黑人，父亲是荷兰裔的爱尔兰人。今年37岁，比哈里王子大3岁，离过婚还带着一个娃。</p>
<p>哈里王子对梅根赤诚一片，顶着全世界的反对和王室的压力也照样把她娶进家门，而且还拒签婚前协议。</p>
<p>这份协议关乎的可不是几套房子，几辆车子，这份协议涉及的资产约为3000万英镑，折合成人民币大约3亿元。</p>
<p>拒签这份协议也就意味着，婚后如果面临离婚，梅根就要分走他1.5亿元的财产。</p>
<p>据他的一位朋友透露，“他确定他的婚姻将是一个持久的婚姻，所以他不需要签署任何东西。”</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-afac22a20a87b6d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="本图片来自网络"></p>
<p><strong> 真正爱你的男人，不会在乎你们身份地位是否悬殊，即使他是王子，你是灰姑娘，他依然会奋力为你披荆斩棘。</strong></p>
<p><strong> 不是公主没关系，你的王子会把你宠成公主。</strong></p>
<p>3.</p>
<p>同样是嫁人，我的朋友小暖就没那么幸运了。</p>
<p>小暖和老公李维是大学同学，两人从大二开始交往。</p>
<p>小暖父母经商多年，家境殷实，她一直是父母捧在手心里的宝，从小没受过苦，也不知道苦日子是什么体验。</p>
<p>李维家在农村，父亲是镇上小学的老师，母亲没工作。</p>
<p>大学毕业以后，小暖家托关系帮李维在这个城市找到了一份体面的工作，转眼二人开始谈婚论嫁。</p>
<p>因为考虑到李维的家庭条件，小暖家主动承担起了买房和装修的花费，没让李维家出一分钱。</p>
<p>婚后小暖从李维老家的亲戚处听说，李维的妈妈到处和人炫耀，说自己儿子有本事，娶了个倒贴钱的老婆。小暖听后很恼火。</p>
<p>小暖怀孕后，李维想把妈妈从老家叫来照顾小暖，小暖并不想和婆婆生活在一起，也不需要她的照顾，就拒绝了。</p>
<p>没想到婆婆竟然不请自来了，而且处处看小暖不顺眼。</p>
<p>“我们那时候第二天生孩子，头一天还要在地里干活，哪像现在的人这么娇气，怀个娃就不得了嘞。”</p>
<p>诸如此类的话，婆婆整天挂在嘴边，小暖每天都在生闷气。</p>
<p>婆婆来之前李维对小暖还算不错，婆婆来了以后，他非但不照顾怀孕的小暖，反而把小暖指使地团团转，一会让她做这个，一会让她做那个，稍微磨蹭了一会，他就会抱怨，“你这怀个孕怎么跟生活不能自理了似的。”</p>
<p>婆婆接茬：“男人要是什么都能做，还娶婆娘做啥子？”</p>
<p>一次，小暖实在受不了他们娘俩合起伙来欺负她，和老公大吵起来，婆婆还在身边帮腔，“不要以为你是城里人就瞧不起我们农村人，嫁到我们家就得供我们使唤，有本事不要托生成女人。”</p>
<p>小暖气得拿起桌上的烟灰缸准备朝老公扔过去，婆婆眼疾手快，为了保护儿子推了小暖一把，小暖的肚子狠狠地撞在了桌角上，流产了。</p>
<p>孩子没了，小暖的心也死了，两人离婚了。</p>
<p><strong> 不爱你的男人，即使他不是王子是乞丐，他仍然会把你当成女仆，对你颐指气使。</strong></p>
<p><strong> 他不会感激你不嫌弃他的条件嫁给他，反而会认为你没本事找到更好的。</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9742592-dddfdb44ce3ae035.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="本图片来自网络"></p>
<p>4.</p>
<p>真正把你当成公主一样宠爱的男人，不会随便对你发脾气，不会事事与你计较，因为他舍不得。</p>
<p>车厘子在《做一个被时光宠爱的女子》一书中说：<strong> 一个真正爱你的男人，不会舍得让自己心爱的女人受一点点委屈，更不忍眼睁睁看着自己的爱人降低姿态，卑躬屈膝。</strong></p>
<p><strong> 女人一定要嫁给那个宠溺自己的男人，如果你爱他胜过他爱你，那么在你们两个人的相处过程中，你注定永远对他高山仰止。</strong></p>
<p><strong> 一辈子很长，没必要委屈自己。</strong></p>
<p>把你当小公主的男人，不会无缘无故玩消失，无论再忙他都会记挂着你，即使他忙到没有时间来见你，他也会打个电话给你，告诉你他想你。</p>
<p>把你当小公主的男人，不会舍不得给你花钱，他会感激你赋予他为你花钱的资格。他想把所有你喜欢的东西统统买给你，因为他想让你知道，钱很重要，但是你比钱更重要。</p>
<p>把你当小公主的男人，不会在你和他父母起争执的时候，毫无原则地和父母站成一队攻击你。更不会说老婆可以换，父母不能换那种混账话。</p>
<p>把你当小公主的男人，不会对你们的关系遮遮掩掩，他会努力在你身上打造他的标志，恨不得昭告天下，你是他的。</p>
<p>把你当小公主的男人，永远不会嫌你麻烦，你的事他会比自己的事更加尽心尽力；永远不会嫌你唠叨，他会真正领会你对他的爱，你对他的好。</p>
<p>把你当小公主的男人，眼里只有你，再盛不下别的女人。你占据了他全部的心理空间，影响了他的审美标准。</p>
<p><strong> 女人，永远不要轻视自己，哪怕你的情况再遭，也终会有那么一个人在不远处等着你，给你岁月静好，给你现世安稳。</strong></p>
<p>相信我，你配得上世间所有的美好。</p>
<p>作者：匹诺曹JS<br>链接：<a href="https://www.jianshu.com/p/f2fe6fe41128" target="_blank" rel="noopener">https://www.jianshu.com/p/f2fe6fe41128</a><br>來源：简书</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=532539923&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>明星</tag>
      </tags>
  </entry>
  <entry>
    <title>你所谓的努力，只不过是其他人的日常</title>
    <url>/2018/07/21/work/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/10393286-cb6d4770e46f1ed3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/445" alt="本图片来自网络"></p>
<blockquote>
<p><strong> 努力它不说谎，任何间歇性的踌躇满志只能欺骗自己。你以为自己在拼命，但那只是别人的起跑线。</strong></p>
</blockquote>
<p>经常有人问我，为什么我这么努力，还不见一点效果？</p>
<p>想要纤瘦的身材，在暴饮暴食了一周之后，饿了两天，只喝水不进食，前胸贴后背地抱怨：</p>
<p>为什么我这么努力减肥，只瘦了两斤？</p>
<p>想要学好英语，说一口流利外语，拿起书本没日没夜得背了几页单词，气急败坏地质问：</p>
<p>为什么我这么努力学英语，一点效果都没有？</p>
<p><strong> 努力它不说谎，任何间歇性的踌躇满志只能欺骗自己。你以为自己在拼命，但那只是别人的起跑线。</strong></p>
<blockquote>
<p><strong> 努力，它不说谎。努力了还不行，说明还不够。</strong></p>
</blockquote>
<p>前段时间看《偶像练习生》，除了小奶狗们的高颜值大长腿，更吸引我的是里面居然还有很燃很燃的点，有几次看得我这个老阿姨热泪盈眶。</p>
<p>关于梦想，关于拼搏，关于努力。</p>
<p>印象最深刻的是有一次岳岳问张艺兴：努力了也没有出现很好的结果，觉得很迷茫，该怎么办？</p>
<p>张PD回答：</p>
<p>** 你得问问自己，这个努力刻苦是从什么时候开始。如果是从这个节目开始，那当然了，别人都是几年几年地练。台上一分钟，台下十年功。</p>
<p>努力，它不说谎。努力了还不行，说明还不够。**</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10393286-ca0b6ee3b1294819.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="本图片来自网络"></p>
<blockquote>
<p><strong> 努力和天赋，是通往成功之路的两大法宝。没有天赋，你只能拼命。 </strong></p>
</blockquote>
<p>有句话说，以大多数人的努力程度之低，根本轮不到拼天赋。</p>
<p>但你不得不承认，就是有人天生公主命，有着姣好的面容，优渥的家境，而你只是一个外表普通，家境普通的灰姑娘。</p>
<p>生命本来就是不公平的，但生活是公平的。你付出多少，它回馈你多少。</p>
<p>天生技不如人就要选择成为一条咸鱼，永远不翻身吗？</p>
<p>当然不。上天没有给你公主命，是为了让你做自己的女王。</p>
<p>最近很火的《创造101》里，我最喜欢的不是那些凭借与生俱来的美丽就收获万千粉丝的A班女生，而是那些资质平平，却永远不服输，赤手空拳地去battle的F班女孩子。</p>
<p>几乎不睡觉，一直练习舞蹈，额外练习时间高达77小时40分钟，相当于把主题曲反复练习了450次。</p>
<p><strong> 努力和天赋，是通往成功之路的两大法宝。没有天赋，你只能拼命。</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10393286-f6fc90c3f74c48ac.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/385" alt="本图片来自网络"></p>
<blockquote>
<p>四 <strong> 努力，它不说谎。</strong></p>
</blockquote>
<p>每个人都想在生活中找到捷径，但成功的路就是很远很远。即便如此，你所做的努力，迈出的每一步，都不会白费。</p>
<p>觉得努力了没有效果，要放弃的时候问问自己，是不是真的竭尽全力了。放弃很简单，但坚持下去一定很酷。</p>
<p>我很喜欢杰克.伦敦的一首诗：</p>
<p><strong> 我宁愿是燃烧后的灰烬，也不愿做匍匐地上的灰尘。我宁愿我的星火在耀目的火光中燃尽，也不愿任其干腐窒息。我宁愿做一闪而过的流星，每一个原子都壮丽地发光，也不愿做永恒沉睡的行星。人的生命是去生活，而不是仅仅存在着。</strong></p>
<p>所有，先别管结果，就这么一直努力下去吧。<strong> 努力，它不说谎。</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10393286-c595ef1e01614be3.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/431" alt="本图片来自网络"></p>
<p>作者：Judy姐姐啊<br>链接：<a href="https://www.jianshu.com/p/d45a04d1245c" target="_blank" rel="noopener">https://www.jianshu.com/p/d45a04d1245c</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29567100&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>喜欢的人在一起久了，会长得很像</title>
    <url>/2018/07/21/like/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1399776-54248f6d610c6ebe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="本图片来自网络"></p>
<p>1</p>
<p>正在电脑前码字，男朋友突然惊诧出一声“卧槽！”我忙转身，“怎么了？”</p>
<p>男朋友望着我说：“我刚翻自己的照片，发觉跟你长的神似，简直就是男版的你！”我满腹狐疑，要过手机进行验证。真的，我们在眼神、表情上有着七分的相似，简直不可置信。</p>
<p>经男友一说，我才想起闺蜜平时也说我跟男友相像；记起平时跟男友合照，我们也会摆出相同的姿势、十分默契……</p>
<p><strong> 原来，跟喜欢的人相处久了，真的会长得相像。</strong></p>
<p>2</p>
<p>男朋友曾对我说过，“因为我，他才更珍视自己，想变得更好！”我起初认为这有点说不通，人不应该是为了自己才要变得优秀的嘛？因为别人的说法太牵强了吧。</p>
<p>一次，男友坐对面目不转睛地盯着我，那种感觉特别美好、似曾相识，但又说不出具体在哪见过，总之就是会让你特别有安全感。后来，我发现自己也经常会这样，男友看书时，自己会目不转睛盯着他，就想陪着他、欣赏他。因此常被他说“小傻子”。</p>
<p>我后来慢慢明白男友那句话里的深刻含义：</p>
<p><strong> 那个喜欢你的人，你会从他的眼睛和表情里看到他对你的欣赏，而在他眼里你的那些优点和魅力，也许是你自己从未关注过的。那个真心喜欢你并懂得欣赏你的人，就像一面你的专属镜子，照出你潜质里的特点，所以你才从他的眼睛里读到触动的感觉，很真实。</strong></p>
<p>平凡普通的日子里，日常的细节中，互相喜欢的人会因为一个眼神就读懂对方的意思。会因为对方冲你微笑，你也跟着微笑。不知不觉中你发现，你们的表情和眼神，竟是如此相像。</p>
<p>3</p>
<p>曾经一档火爆的亲子节目《爸爸去哪儿》中，每次看到田亮一家同框，让人都忍不住要惊叹“这一家人是复制粘贴出来的吧！”</p>
<p>孩子与父母相似可以从遗传角度解释，但绝大多数夫妻二人却是没有亲缘关系的个体，他们之间的这种“夫妻相”的产生太神秘了。</p>
<p><strong> 命理学和面相学上说，命理结构相似的“同构”男女容易结为夫妇，而命理结构相似的人气质相貌本就是相似的。</strong></p>
<p>照此看来，一见钟情、臭味相投的说法不无道理！</p>
<p>心理学家们研究“夫妻相”问题时提出了“选择观”的说法。</p>
<p>我们择偶时，“相似性”是个体择偶偏好的重要影响因素，不可否认人会被与自身相似的人吸引 。心理学家们在研究中还发现，虽然人们容易对外表吸引力高的异性产生好感，但在实际结婚伴侣选择中，会更倾向选择外貌上相似的另一半成为伴侣。</p>
<p><strong> 进化心理学认为，使基因不断地传递是人类生存的本能，是进化的根源。基因相似理论（Genetic similarity theory）提出解释说，特征相似的背后是基因上的相似，而特征相似的两性结合则能形成更复杂、稳定、适应性高的机制，让基因更稳定、更好地传递下去。</strong></p>
<p>因此，我们总强调“喜欢一个人，始于颜值，陷于才华，终于人品”，实际上是偏向于选择与自己外貌、性格、生活习性、价值观等都相似的另一半。</p>
<p>所谓跟三观相近的人结合才能长久，大概就是这个道理吧！</p>
<p>4</p>
<p>很多伴侣在一开始其实并不相像，而是在一起生活久了之后才慢慢开始长得相像的。心理学家们又用“趋同观”和“情绪体验理论”解释了这一情况。</p>
<p>“趋同观”认为“夫妻相”可能是夫妻二人生活在相同的气候环境之中，有着同样的饮食习惯和生活习性所造成的。</p>
<p>密歇根大学在1987年就让学生们对众多夫妻的照片进行相似性评分，这些照片里包括了6对新婚夫妻和6对结婚25年以上的夫妻，结果发现人们认为结婚25年以上的夫妻面孔上更加相似。</p>
<p>此外，“情绪体验理论”的解释似乎更能形象地解释这一现象。</p>
<p><strong> “情绪体验理论（a theory of emotional efference）”认为人们的情绪体验会导致血管变化，血管变化会部分地调节面部肌肉，面部肌肉组织的习惯性使用又可能永久地影响面部特征。</strong></p>
<p>其实就像是那个和你在一起的人，你们在一起久了，你喜欢什么不喜欢什么他都知道，你是什么模样，他就学着什么模样，最后才长得相像。</p>
<p>其实我更觉得，<strong> 相爱的人之所以越来越相像，除了环境和生物基因本能的因素外，更重要的是我们都把对方当成了生命中最重要的人之一。</strong></p>
<p>因为在乎，所以愿意去观察你的情绪，读出你情绪里的信息，然后切换到能让你感到舒服的方式。</p>
<p>因为你很重要，所以愿意和你在一个模式中生活生长:一起哭，一起笑，一起抓紧不放手……到最后，你变成了他，他变成了你，因为有对方的存在，我们才真切地感受到自己变得更加完整。</p>
<p>所以，我们一开始就应当选择那个和自己三观相近，并且欣赏我们的人，不为了将就而草率抉择。同时，每个已得偿所愿的人，都应当珍惜来之不易的缘分，互相给予爱与包容，相爱相融。</p>
<p>作者：一枝丘<br>链接：<a href="https://www.jianshu.com/p/4839fca82e95" target="_blank" rel="noopener">https://www.jianshu.com/p/4839fca82e95</a><br>來源：简书</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=520508050&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>你赚多少钱，决定了别人对你父母的态度</title>
    <url>/2018/06/28/life/</url>
    <content><![CDATA[<blockquote>
<p>01 <strong> 你赚多少钱，决定了父母朋友对他们的态度 </strong></p>
</blockquote>
<p>上周，我回老家看望父母。</p>
<p>恰好，我爸一个哥们的女儿要结婚了，他和其他哥们正一边喝茶一边商量随多少份子钱。</p>
<p>我爸随口对我说：“到时候人家婚礼，你也去吧。”</p>
<p>我正要说话，席间的一个叔叔突然笑了笑说：“你去了只会觉得惭愧吧？”</p>
<p>言下之意，人家很优秀，我去了只会觉得自己丢脸。</p>
<p>那个要结婚的姐姐，对我来说一直是“别人家的孩子”，国内最好的财经院校保送硕士，毕业没几年，已年薪六十万，在北京买了自己的小房子。</p>
<p>而我，在某二线城市国企，领着一份不咸不淡的死工资，毕业头两年差点养不活自己。</p>
<p>这样的差别，对比之下自然让人耻笑。</p>
<p>过了一会儿，那个叔叔又说：“你现在工资有六千了吗？总不能连人家的十分之一都不到吧？”</p>
<p>我轻笑，我那儿比不上大城市，赚的少，每个月收入也就六千乘以二吧。</p>
<p>我爸本来低头不知道说什么，听到我说这话，仿佛脊梁也挺直了一些。</p>
<p>可能是我丢脸的程度没他想得那么严重吧，后来那个叔叔就没说什么了。</p>
<p>当我把这事告诉我的好朋友时，她说：</p>
<p>人家硕士你本科，人家29岁你25岁，再说北京工资跟你那能直接比吗？两者有可比性吗？这人到底会不会说话啊。</p>
<p>我说，他并不是不会说话，而是对我们家，他并不放在眼里，所以不在乎你的尊严。</p>
<p>而他说这些话，踩的并不是我。我一个后辈，他犯不上跟我比。</p>
<p>他踩的是我爸，通过我的不成功，来证明我爸的不成功而已。</p>
<p>我刚毕业时，工资很低，常常被他们问得很尴尬。</p>
<p>其实，<strong> 他们不是没听我爸说过我的情况，但就是喜欢当面问上这么一下，然后看着我窘迫和爸妈脸上无光的样子。</strong></p>
<p><strong> 好在今年，我的经济状况比去年好多了，才有了些底气。</strong></p>
<p>而那个很厉害的姐姐，不用别人问，她爸妈就把她的事迹传遍了整个朋友圈。别人都对他们家，推崇备至。</p>
<p>一起长大的哥们之间，都存在着这样微妙的捧高踩低，更不用说社会了。</p>
<p><strong> 长大后，你赚多少钱，决定了父母在朋友圈中被尊重的程度。</strong></p>
<p>哪怕其他什么都好，你的不争气，也会成为别人戳你父母的软肋。</p>
<p><img src="/img/2090254-b204bd9314758c36.jpg" alt="本图片来自网络"></p>
<blockquote>
<p>02 <strong> 你赚多少钱，决定了亲戚对你父母的态度 </strong></p>
</blockquote>
<p>我有个异性朋友，叫鹏程。</p>
<p>他们家小时候很穷，所以他爸希望他未来能像大鹏展翅，前程万里。</p>
<p>而鹏程的伯伯，早年下海经商成功，90年代就是百万富翁。</p>
<p>赚得多，自然在家族里面就有话语权。</p>
<p>老家的四合院，给鹏程的伯伯留的永远是最好的那一间，哪怕他并不经常回来住。</p>
<p>而鹏程一家三口，挤在潮湿的那面厢房里，还要负责保持鹏程伯伯那个房间的清洁。</p>
<p>鹏程小时候学习不好，托伯伯的帮助，才去了一所好学校。</p>
<p>但学校离老家远，鹏程不得不寄宿在伯伯家里。</p>
<p>伯伯倒没说啥，在家里管事的伯母却并不和善，总是找他的茬。</p>
<p>有一次，鹏程放学回来，伯母拉长了脸问他，家里的钱，是不是你拿的？</p>
<p>鹏程愣了，连忙表示没有。</p>
<p>但伯母略过自己的孩子，硬说是鹏程来了之后，家里才陆陆续续丢钱。</p>
<p>末了，她还把鹏程爸和亲戚都叫来，当着大家的面说：</p>
<p>你们评评理，我供这孩子吃住，他还偷钱。老二，你赶紧把他带回去，别带坏了我的孩子。</p>
<p>鹏程爸只得押着鹏程过来道歉，在亲戚的指责声中对伯母点头哈腰，唯恐她真的要赶鹏程出去。</p>
<p>鹏程挺受刺激的，就此发奋读书，毕业后去了投资公司，后来趁电商兴起的风口自己成立了外贸公司，一路做到年入千万。</p>
<p>而伯伯家，传统的实业不好做了，生意大不如前。</p>
<p>他们家的孩子，一直悠哉悠哉地混日子。毕业了发现，家业惨淡，且呈现出不可挽回的颓势，而他们连工作都找不着。</p>
<p>这下，伯母提了几瓶好酒给鹏程的爸，恭恭敬敬地说了一堆好话，希望鹏程能给自己的孩子谋个职位。</p>
<p><strong> 我们赚钱并非为了对亲戚耀武扬威，而是为了争取多一点公平。</strong></p>
<p><strong> 小时候，别人对你的态度，取决于你爸妈是谁。</strong></p>
<p><strong> 长大后，别人对你爸妈的态度，取决于你是谁。</strong></p>
<p>归根结底就是，<strong> 你能赚多少钱，他们走出去就会得到多少尊重。</strong></p>
<p>虽然势利，但就是这么粗暴的生存法则。</p>
<p>我们生于其中，改变大局很难，改变自己的处境，反倒比较容易一点。</p>
<blockquote>
<p>03 <strong> 你赚多少钱，决定了亲家对你父母的态度 </strong></p>
</blockquote>
<p>静秋是我们高中班长得最漂亮的女孩子。</p>
<p>当她和一个富二代在一起的时候，她爸妈却并不是很高兴。</p>
<p>她妈妈甚至说，<strong> 你嫁给人家，是要受苦的，我们作为娘家没什么钱，总归是会被他们看不起的。</strong></p>
<p>静秋说，不会的，他爸妈都挺有教养的，不会做这种事。</p>
<p>确实，那个富二代的爸妈一开始并没有为难静秋，反倒让他们毕业了就早点结婚。</p>
<p>静秋觉得自己特别幸运，遇到了有钱而且人还不错的婆家，他们还二话不说就包揽了婚礼的全部费用。</p>
<p>但婚后，静秋爸妈送陪嫁的东西过来时，婆婆却说，亲家，你看我们这里啥也不缺，你把这些小家具带回去吧。</p>
<p>静秋爸妈说，这是给孩子结婚的的一点心意，放在新房里用。</p>
<p>静秋的婆婆说，你看，你买的家具，跟我们装修的新房，一点都不搭。家具我们会买，你们就带回去自己用吧。</p>
<p>平时，静秋的爸妈总是满怀诚意地送来家乡的土特产，静秋的婆婆收下后却从不拿出来吃，攒一堆之后，送回给老家的穷亲戚。</p>
<p>静秋的爸妈过来探望，家里多的是房间，静秋的婆婆却执意说要订酒店，说是酒店照顾比较周到。</p>
<p>结婚不久后，婆婆就催静秋生小孩，她说，你又不赚钱，趁年轻多生几个孩子，不然以后可怎么办？</p>
<p>静秋这才恍然大悟，婆家一直把她当成一样漂亮的物品，买回家放着不亏的那种。</p>
<p>而她对这个物品保持着教养中的礼貌，却无法发自内心地尊重欣赏。</p>
<p>对于这个物品附带的静秋的爸妈，她也并不想过多来往。</p>
<p>小时候看偶像剧，平凡的女主角找到高富帅，父母激动不已，对他毕恭毕敬。</p>
<p>而高富帅的父母，对这种想攀高枝的小门小家，总是嗤之以鼻。</p>
<p>比嫁不成高富帅更让人痛苦的，是得不到尊重，甚至连累你的父母都得不到尊重。</p>
<p>结婚，要么娘家有钱，要么自己有钱才行。</p>
<p><strong> 如果家境普通，那么你只有多赚点钱，才不至于让父母被婆家轻视。</strong></p>
<p><img src="/img/2090254-e6a1c272e4da77e0.jpg" alt="本图片来自网络"></p>
<blockquote>
<p>04 我们赚钱，是为了让父母家人过上更好的生活</p>
</blockquote>
<p>我有一个朋友，研究生毕业时，她爸妈对她说，说实话，你考上研究生，让我们出门都很有面子。</p>
<p>于是，我朋友对我感慨道，原来，有时候，大人比小孩更虚荣。</p>
<p>不管这算不算虚荣，父母也有一大堆的人情世故，他们渴望在圈子里获得尊重，他们希望活得脸上有光，这是人之常情。</p>
<p>好的生活，就是有一些让别人羡慕的资本。</p>
<p><strong> 年轻的时候，他们拼自己。到老了，自己这一辈奋斗到头了，他们开始拼子女。</strong></p>
<p>谁家要出一个学习好、赚钱多、婚姻幸福、孝顺的好孩子，不知要被多少人艳羡。</p>
<p>小时候，父母就算囊中羞涩，也会掏尽口袋里的钱，给我们买一部喜欢的MP3。</p>
<p>他们曾用尽全力，让我们在同学中不至于丢了面子。</p>
<p>如今，轮到我们，哪怕为了他们的那一点虚荣，也要与生活搏上一搏，多赚点钱。</p>
<p>你上班刷微博的时候，他们正在菜市场里挑挑拣拣，为了几毛钱与小贩磨破嘴皮；</p>
<p>你下班逛街的时候，他们正在喋喋不休地听邻居炫耀子女送的金手镯；</p>
<p>你过年收他们压岁钱的时候，别人的父母正跟着孩子去旅游；</p>
<p>你抱怨工作太累想求包养时，他们正省吃俭用给你凑房子首付。</p>
<p>你穷的时候，父母不敢病、不敢死，被别人嘲笑的时候，也无话反驳。</p>
<p>别再追求什么平凡可贵，<strong> 你赚多少钱，决定了别人对你父母的态度。</strong></p>
<p><strong> 而他们最在乎的，就是在老年，对你能够放心之余，自己也能受到尊重。</strong></p>
<p>作者：漫漫Chan<br>链接：<a href="https://www.jianshu.com/p/c3aabd8e0834" target="_blank" rel="noopener">https://www.jianshu.com/p/c3aabd8e0834</a><br>來源：简书</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=462391069&amp;auto=1&amp;height=66"></iframe>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mybatis查询集合返回为[null]的问题</title>
    <url>/2018/06/18/mybatis/</url>
    <content><![CDATA[<p>最近项目当中做功能遇到查询集合list为null，判非空却还是进入了非空的判断里面，后面才知道sql查询中</p>
<p><img src="/img/1.png" alt=""></p>
<p>如果你是查询几个字段，必须加上不为空，否则sql查询前面的值是有值得，只是恰巧你查询的字段为Null</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>20岁以后，要尽可能不被自己嫌弃</title>
    <url>/2018/06/18/twenty/</url>
    <content><![CDATA[<p><img src="/img/123.jpg" alt=""></p>
<blockquote>
<p>人生，就是需要一个不断追逐的过程。</p>
</blockquote>
<p>❤</p>
<p>越来越发现，身边有很多刚过20岁的90后开始喊老，不知道是跟随潮流自嘲，还是对20岁出头一事无成的自己表示失望。</p>
<p>总归好像是，人们好像都丢掉了本该在这个年龄所拥有的热血和激情，反而更多的是一种老气横秋的颓感，好像每个人都越来越嫌弃自己了。</p>
<p>周末跟小乐闲聊，说起近况的时候，她情绪突然变得很微妙。在我的追问下她告诉我说，想跟自己的好朋友绝交。</p>
<p>我问她为什么，她说，我跟她关系一直挺好的，经常一起上课一起吃饭，但是这学期开学的时候她就谈了个男朋友，然后就经常出去住，不过这倒也没什么，我也管不着，但是最重要的是她变太多了。以前特别努力的姑娘，现在却只会喊口号，变得很堕落，觉得她带给自己太多负能量了，很辛苦。</p>
<p>小乐这个朋友我多少知道一点，她以前跟我聊天经常会提起她，都是夸赞，但后来慢慢的就变成了吐槽。</p>
<p>她朋友家里条件应该不太好，有一个姐姐一个妹妹，还有一个弟弟，而且爸妈也是普通的工人阶级，生活挺拮据的，所以一开始她也很努力，天天泡图书馆，看网课学习，说要赚奖学金。</p>
<p>刚开始还好，可是到后来就变成化浓妆出去约会，经常逃课，考试也挂科，别说奖学金了，及格都很难。所以就有了天天发无数个朋友圈悲春伤秋的，嫌弃自己太颓废的，可事实呢？依然是天天疯玩，对待小乐给的建议也永远都是一脸嫌弃。</p>
<p>我让小乐趁早远离她，毕竟近朱者赤近墨者黑这句话并不是没有道理的，况且是这种听不进别人建议的人。</p>
<p>要知道，当一个人开始嫌弃自己的时候，至少说明他已经意识到自己所作所为的正确与否了，但如果只是一味嫌弃自己而不去做任何改变的时候，你可能需要远离这种人了。</p>
<p>一个迷途不知返的人是不值得你消耗感情的。你要做的是要尽可能不跟她走同一条路，不被自己嫌弃。</p>
<p>❤</p>
<p>前几天去超市的路上，夜夜突然发微信找我聊天，说有个好朋友把她删了，特别生气，特别闹心。</p>
<p>夜夜的朋友跟她是同班同学，从大一开始就经常腻在一起，虽然一开始两个人就性格不合，但倒也没有吵闹过，就想着搭个伴一起呗，反正日子总要过下去的。</p>
<p>可是她这个朋友呢，就属于那种见不得别人比她好的那种。夜夜搞个中分，她说，不好看，显脸大。她搞个刘海，她朋友又说，不适合你，你又不是那种萌妹子。总之她就是只会窝里横，仗着夜夜脾气好，整天对她冷嘲热讽。</p>
<p>夜夜很会写文章，而且现在是腾讯签约作家，她朋友多少也会眼红，各种泼冷水。就像有次夜夜穿了刚买的衣服去找她，她从上到下打量了一番，然后就开始跟旁边的同学偷笑，窃窃私语说些什么，还顺带着说了句“别跟她说”，夜夜听见她们在讨论说她衣服太透了，但是却不告诉她。</p>
<p>后来回到教室，她朋友在打王者荣耀，一直不停的骂着什么优秀的，好像是故意说给她听，有种指桑骂槐的感觉，夜夜听着挺不舒服的。</p>
<p>下课的时候，她朋友跟其他同学讨论衣服化妆品的时候，一直在吐槽说樊胜美太胖了，除了脸好看，身材一点都不好，可是她清楚的记得，就在前一天她还告诉夜夜，让她照着樊胜美的衣服去买，说她跟樊胜美身材像。</p>
<p>后来夜夜上选修课回来，改了个签“别指点我的生活，谢谢”，然后她就把夜夜的东西全部还回去，然后在qq上跟她说：从没想过指点你的生活，就这样，结束，随后就把她删了。</p>
<p>其实她应该庆幸她朋友把她删了，这样才不会拉低她朋友圈的整体档次。</p>
<p>好多人好像都有过被好朋友泼冷水的经历，也有那些各种见不到你好的所谓朋友，明明你是按照自己的想法在走，她却对你百般刁难各种嫌弃，最重要的是，她明明知道你比她优秀，却还总是故意在你面前展示她莫名的优越感。</p>
<p>也是，人越是没有什么越炫耀什么。</p>
<p>越长大，我们好像就越看中别人对我们的看法，越会想方设法想成为别人眼里优秀的样子。其实说实话，真没必要，做自己就好。</p>
<p>你都20多岁的人了，尽可能变得优秀不被自己嫌弃就好了，何必太过在意别人是否嫌弃你。</p>
<p>别人是只是别人，跟你没有任何关系，你只需要跟着自己的心，大胆往前走，努力朝自己喜欢的样子发展就好。</p>
<p>❤</p>
<p>想起我初中转学时同宿舍的一个妹子，叫李莹，她人就像她名字一样，很普通，普通到不说话都没有人意识到她的存在，可是也正是这种普通，让她骨子里的上进心显得格外夺目。</p>
<p>记得很清楚，我刚当插班生进班的那天，她是第一个跟我打招呼的人。她给我的第一感觉就是温暖，她笑起来特别好看，眼睛弯弯的，很可爱。后来我才知道，她是我们班的第一名。</p>
<p>我最佩服她的就是，说睡就睡，说起床就起床，说写不完作业不睡觉就绝对不会打瞌睡。印象最深的一次是，晚上十二点半，整个宿舍楼的人都睡觉的时候，她拉着我，抽出床底下的脸盆去水房洗头，而且是冷水。原因是太困了，现在想想当时我特么脑子肯定进水了陪她去，我又不困。</p>
<p>她是数学课代表，数学老师是个特别严肃的人，但是她深得数学老师的喜欢。一个原因就是她学习好，当然招老师喜欢，另一个原因大概就是她桀骜不驯的性格了，她谁都不怕，也能让别人服气，不论是学习成绩，还是做人做事。</p>
<p>她并不是特别谦虚的人，也经常被人泼冷水，但我看到更多的是她不服输的拼劲，好像潜意识里一直相信不能有人比她更优秀，当然她也做到了。</p>
<p>我一直欣赏那种特别看得起自己的人，那种人好像生来就自信感爆棚，不论别人再怎么打击，依然可以按照自己的方式骄傲的活着。</p>
<p>按照自己喜欢的方式过一生这句话几乎每个人都说过，但真正做到的，永远都只是那些疯狂前进的人，她们不会过多的在乎别人的看法，也不会一路莽撞前行，而是选择听从对自己有用的意见，抛弃那些负能量的冷嘲热讽，一路披荆斩棘，最终实现自我。</p>
<p>❤</p>
<p>世界上多的是见不得你好的人，但越是这样你越要过得比他们都好，这样才能不辜负那么好强的自己。</p>
<p>别人对你的看法只是别人眼里的你，你要做的不是成为别人眼里的样子，而是成为自己眼里的样子，成全自我。你要做的是自我满足，而不是按照别人的想法过一生。</p>
<p>你要尽可能让自己变得更好，尽可能不被自己嫌弃。</p>
<p>一直以来，都觉得20岁是人生很重要的一个分水岭，它比高中时期的你更成熟稳重，比步入社会的你更简单纯粹。</p>
<p>别人眼里的你千奇百怪，而你眼里只有一个你，那就是最真实的你。</p>
<p>永远都不要为了别人去改变自己，你要做的是朝着自己的目标努力，成全自己，相信自己。</p>
<p>你要做的，只是在面对诸多非议的时候，不用那么恐慌，不用想着取悦于他人，而是取悦于自己，尽可能不被自己嫌弃</p>
<p>作者：阿东哥哥<br>链接：<a href="https://www.jianshu.com/p/87c0a2366f37" target="_blank" rel="noopener">https://www.jianshu.com/p/87c0a2366f37</a><br>來源：简书</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446940017&amp;auto=1&amp;height=66"></iframe><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>20岁</tag>
      </tags>
  </entry>
</search>
